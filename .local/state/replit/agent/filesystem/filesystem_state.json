{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# HarmonyLearn - Music Education Platform\n\n## Overview\n\nHarmonyLearn is a comprehensive music education platform enabling students to learn from expert mentors through interactive courses, live sessions, and community features. It supports multiple user roles (students, mentors, admins) with classroom management, payment processing, and analytics capabilities, aiming to provide a modern, full-stack learning experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite.\n- **Styling**: Tailwind CSS with shadcn/ui and Radix UI.\n- **State Management**: React Query.\n- **Routing**: Wouter for client-side routing.\n- **Theme System**: next-themes for dark/light mode.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js.\n- **Database**: PostgreSQL with Drizzle ORM.\n- **Authentication**: Session-based authentication.\n- **API**: RESTful API structure (`/api` prefix).\n\n### Database Design\n- **ORM**: Drizzle ORM with PostgreSQL dialect.\n- **Database**: PostgreSQL with schema for users, courses, classrooms, enrollments, classroom_memberships, live_sessions, and posts.\n- **Storage Layer**: `server/storage.ts` for CRUD operations.\n- **API Routes**: RESTful endpoints in `server/routes.ts`.\n\n### Key Features\n- **User Management**: Multiple user roles (Students, Mentors, Masters, Admins) with role-based authentication, dedicated portals, and profile management.\n- **Course System**: Categories (Piano, Guitar, etc.), learning paths, interactive content, and mentor integration.\n- **Live Sessions**: Real-time classes with video conferencing, chat, and session management.\n- **Classroom Hub**: Multi-role access for content management, progress tracking, and AI features.\n- **Community Features**: Social learning, practice tools (Metronome, Tuner, Scale Trainer), and gamification.\n- **Student Portal**: Dashboard with stats, course management, progress analytics, live sessions, and achievement system.\n- **Mentor Portal**: Analytics, course creation, student management, and live teaching tools.\n- **Master Role System**: Enhanced mentor role with classroom creation privileges and advanced features.\n- **Administrative Panel**: User management, mentor application review, master role request management, content moderation, and analytics.\n\n## External Dependencies\n\n### Database\n- **Neon Database**: Serverless PostgreSQL hosting (`@neondatabase/serverless`).\n\n### UI/UX Libraries\n- **Radix UI**: Component primitives.\n- **Tailwind CSS**: Utility-first styling framework.\n- **shadcn/ui**: Component library.\n\n### Development Tools\n- **TypeScript**: Type safety.\n- **ESBuild**: Fast JavaScript bundling.\n- **Vite**: Development server with hot module replacement.\n\n### Form Handling\n- **React Hook Form**: Form state management.\n- **Zod**: Schema validation.\n\n## Recent Changes\n\n- **August 3, 2025**: Implemented comprehensive timetable scheduling system for classroom management\n  - Added complete database schema for schedules, enrollments, notifications, and conflict tracking\n  - Built TimetableManager component with weekly grid view and visual time slot management\n  - Integrated instructor availability checking and conflict detection system\n  - Added staff assignment capabilities with real-time availability validation\n  - Created comprehensive API endpoints for schedule management and enrollment\n  - Hidden \"Discover Academies\" and \"My Classroom\" navigation options for masters in mentor portal\n  - Masters now manage their academies exclusively through the Master Dashboard\n\n- **August 3, 2025**: Implemented comprehensive academy discovery and management system for student portal\n  - Created AcademyDiscovery.tsx with advanced search, filtering, and academy browsing capabilities\n  - Built MyAcademies.tsx for students to manage joined academies, track progress, and view upcoming sessions\n  - Added academy discovery features with instrument-based filtering, level selection, and rating sorting\n  - Integrated comprehensive academy cards with detailed information, capacity tracking, and join functionality\n  - Added modal academy detail view with tabbed information (overview, curriculum, staff, contact)\n  - Enhanced student navigation with \"My Academies\" and \"Discover Academies\" options\n  - Added visual academy cards with hero images, master information, and feature highlights\n  - Implemented real-time academy membership tracking and join request system\n  - Added academy statistics dashboard and capacity management with progress bars\n  - Created comprehensive academy filtering by instruments, levels, locations, and ratings\n  - Added landing page viewing capability from both discovery and my academies sections\n  - Fixed student portal access permissions to include academy discovery routes\n  - Enhanced academy cards with dedicated buttons for viewing landing pages and detailed information\n\n- **August 3, 2025**: Completely redesigned Staff Classroom page with comprehensive master management features\n  - Replaced basic staff interface with advanced multi-tab management system (Dashboard, Student Management, Staff Oversight, Analytics, Sessions, Administration)\n  - Added real-time student progress tracking with searchable tables and performance metrics\n  - Implemented staff oversight capabilities including resignation request monitoring and staff member management\n  - Integrated comprehensive analytics dashboard with progress tracking, teaching quality metrics, and engagement statistics\n  - Enhanced with master-level classroom performance monitoring and staff efficiency tracking\n  - Added quick action buttons for common administrative tasks (add students, schedule sessions, award achievements)\n  - Implemented advanced filtering and search capabilities for student and staff management\n  - Added alerts and notifications system for pending issues and staff requests\n  - Created administrative section with master information display and staff resource access\n\n- **August 2, 2025**: Implemented one-mentor-per-classroom constraint and staff classroom functionality\n  - Added database-level validation preventing mentors from being staff in multiple classrooms simultaneously\n  - Created dedicated StaffClassroom.tsx page with role-based access control for approved staff mentors\n  - Built comprehensive staff dashboard with tabs for Overview, Students, Sessions, Materials, and Discussions\n  - Added /staff-classroom route to mentor portal navigation as \"My Classroom\" option\n  - Enhanced API endpoints with proper error handling for staff conflict validation (409 status code)\n  - Updated authentication system to allow staff classroom access in portal navigation check\n  - Integrated staff classroom detection API endpoint for real-time classroom information display\n  - Staff mentors can now access dedicated classroom management tools when approved by masters\n\n- **August 2, 2025**: Resolved mentor portal navigation conflict by consolidating duplicate academy discovery features\n  - Identified and fixed conflict between \"Browse Academies\" (/classroom-browser) and \"Staff Applications\" (/classroom-staff)\n  - Both pages were showing classroom listings but with different purposes and implementations\n  - Created unified ClassroomDiscovery.tsx page with tabbed interface for both \"Discover Academies\" and \"Staff Opportunities\"\n  - Updated MentorNavigation to single \"Discover Academies\" option pointing to /classroom-discovery\n  - Added legacy route redirects to ensure existing users aren't affected by URL changes\n  - Removed duplicate ClassroomBrowser.tsx and ClassroomStaff.tsx files\n  - Enhanced user experience with consistent filtering, search, and actions across both discovery modes\n\n- **August 2, 2025**: Transitioned to one-academy-per-master model with enhanced customization\n  - Removed all demo classroom data to start fresh with real academy creation\n  - Updated master dashboard to enforce single academy creation per master user\n  - Fixed staff requests API endpoint from `/api/staff-requests/pending` to `/api/staff-requests?status=pending`\n  - Enhanced academy browser functionality for mentors to discover available academies\n  - Updated mentor navigation to include \"Browse Academies\" and \"Staff Applications\" options\n  - Streamlined academy creation process with comprehensive form for branding and curriculum\n  - Implemented academy landing pages with shareable links for student enrollment\n  - Masters can now create one personalized academy with custom instruments, colors, and content\n\n- **August 2, 2025**: Implemented comprehensive role-based classroom management system\n  - Restructured classroom navigation to only appear for approved masters in master dashboard\n  - Created complete staff request database schema and API endpoints for mentor-to-classroom staff applications\n  - Built MasterDashboard with classroom creation, management, and staff request approval functionality\n  - Developed ClassroomStaff page for mentors to browse classrooms and request to join as staff members\n  - Added comprehensive staff request workflow with pending/approved/rejected status management\n  - Enhanced classroom creation form with proper field validation (title, description, subject, level, maxStudents)\n  - Integrated staff request management into master dashboard with real-time notifications and approval actions\n  - Updated mentor navigation to include \"Classroom Staff\" option for discovering staff opportunities\n  - Created sample classroom data for testing with advanced piano, guitar, jazz, and theory classrooms\n  - Implemented role-based authorization where masters create classrooms and approve mentor staff requests\n  - Added visual status indicators and request history tracking for mentors applying to classroom positions\n\n- **August 2, 2025**: Implemented complete master role progression system\n  - Added master_role_requests table to database schema for mentor-to-master role advancement\n  - Created comprehensive backend API with storage methods and routes for master role request management\n  - Built MasterRoleRequestForm component for mentors to apply for master status with detailed information\n  - Developed MasterRoleRequestStatus component showing current application status with real-time updates\n  - Created MasterRoleRequestManager admin component for reviewing and approving master role applications\n  - Enhanced MentorDashboard with master role request functionality and master dashboard navigation\n  - Built dedicated MasterDashboard with classroom creation, management tools, and enhanced mentor features\n  - Added master role authentication checks (isMaster, canCreateClassrooms) in auth system\n  - Created MasterRoute protected component for master-only access with appropriate error handling\n  - Integrated master role request management into AdminPanel with dedicated tab and approval workflow\n  - Updated routing system with /master-dashboard route protected by master role requirements\n  - Enhanced ClassroomCreationForm component for masters to create and manage classrooms\n  - Added visual indicators and upgrade prompts for mentors to apply for master status\n  - Implemented role progression system where masters have all mentor capabilities plus classroom management\n\n- **August 1, 2025**: Created dedicated student mentors page within student portal\n  - Built new StudentMentors.tsx page with full mentor browsing functionality for authenticated students\n  - Added advanced search, filtering by specialization, and sorting by rating/price/experience\n  - Updated student navigation to point to dedicated /student-mentors route instead of main /mentors page\n  - Maintained main /mentors page as demo preview for non-authenticated visitors\n  - Implemented interactive mentor cards with booking and messaging functionality for students\n  - Added real-time stats display and proper empty states for better user experience\n- **August 1, 2025**: Enhanced mentors page and added to student portal\n  - Created sample mentor profiles for existing mentor users in the database\n  - Converted mentors page to demo preview mode with welcome banner and interaction prompts\n  - Added \"Find Mentors\" navigation option to both student sidebar and navigation components\n  - Fixed mentor profiles data loading by creating proper mentor_profiles entries\n  - Added gradient overlay and engaging UI to encourage sign-up when interacting with mentor features\n  - Made mentors page accessible from student portal while maintaining preview functionality\n- **August 1, 2025**: Fixed mentor authentication and login flow\n  - Resolved inconsistent localStorage authentication data storage between MentorSignIn and auth.ts utilities\n  - Updated both MentorSignIn.tsx and StudentSignIn.tsx to use centralized authentication system\n  - Fixed MentorPage.tsx to check authentication state correctly using currentUser instead of userRole\n  - Synchronized all authentication components to use consistent localStorage keys and data format\n  - Added proper login event dispatching for auth state management across components\n- **August 1, 2025**: Enhanced all main pages with demo preview functionality\n  - Converted Community, Tools, and Courses pages to demo mode with subtle gradient overlays\n  - Removed explicit \"demo\" language while maintaining sign-in prompts for all interactions\n  - Added welcome banners with engaging copy that encourages user engagement\n  - Implemented gradient fade effects that give pages a preview feel without explicitly stating it's a demo\n  - Enhanced user experience with consistent authentication flow across all main pages\n- **August 1, 2025**: Implemented comprehensive route-based authentication and authorization system with automatic portal enforcement","size_bytes":13812},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      backgroundImage: {\n        \"gradient-hero\": \"var(--gradient-hero)\",\n        \"gradient-warm\": \"var(--gradient-warm)\",\n        \"gradient-cool\": \"var(--gradient-cool)\",\n        \"gradient-subtle\": \"var(--gradient-subtle)\",\n      },\n      boxShadow: {\n        \"musical\": \"var(--shadow-musical)\",\n        \"glow\": \"var(--shadow-glow)\",\n        \"warm\": \"var(--shadow-warm)\",\n      },\n      transitionTimingFunction: {\n        \"rhythm\": \"cubic-bezier(0.4, 0, 0.2, 1)\",\n        \"beat\": \"cubic-bezier(0.4, 0, 0.2, 1)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(-10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": {\n            boxShadow: \"0 0 20px hsl(220 75% 50% / 0.15)\",\n          },\n          \"50%\": {\n            boxShadow: \"0 0 40px hsl(220 75% 50% / 0.3)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"pulse-glow\": \"pulse-glow 2s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3863},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, \n  insertCourseSchema, \n  insertClassroomSchema, \n  insertPostSchema,\n  insertLearningPathSchema,\n  insertLiveSessionSchema,\n  insertPracticeGroupSchema,\n  insertForumCategorySchema,\n  insertForumTopicSchema,\n  insertEventSchema,\n  insertMentorProfileSchema,\n  insertCourseReviewSchema,\n  insertUserAchievementSchema,\n  insertMentorApplicationSchema,\n  insertMentorshipRequestSchema,\n  insertMentorConversationSchema,\n  insertMentorshipSessionSchema,\n  insertMasterRoleRequestSchema,\n  insertStaffRequestSchema,\n  insertResignationRequestSchema,\n  insertScheduleSchema,\n  insertScheduleEnrollmentSchema,\n  insertScheduleNotificationSchema,\n  insertEnrollmentSchema,\n  insertCourseWaitlistSchema,\n  insertCourseAnalyticsSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(parseInt(req.params.id));\n      if (!user) return res.status(404).json({ error: \"User not found\" });\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const { role } = req.query;\n      const users = await storage.getAllUsers(role as string);\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid user data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { role, ...userData } = req.body;\n      \n      // Validate input data\n      const validatedData = insertUserSchema.parse({\n        ...userData,\n        role: role || \"student\"\n      });\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(409).json({ error: \"User already exists with this email\" });\n      }\n\n      // Hash password\n      const hashedPassword = await storage.hashPassword(validatedData.password);\n      \n      // Create user\n      const user = await storage.registerUser(validatedData, hashedPassword);\n      \n      // Remove password from response\n      const { password, ...userResponse } = user;\n      \n      res.status(201).json({ \n        message: \"User registered successfully\", \n        user: userResponse \n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid registration data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Email and password are required\" });\n      }\n      \n      const user = await storage.authenticateUser(email, password);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Remove password from response\n      const { password: _, ...userResponse } = user;\n      \n      res.json({ \n        message: \"Login successful\", \n        user: userResponse \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Course routes\n  app.get(\"/api/courses\", async (req, res) => {\n    try {\n      const { category, mentor } = req.query;\n      let courses;\n      \n      if (category) {\n        courses = await storage.getCoursesByCategory(category as string);\n      } else if (mentor) {\n        courses = await storage.getCoursesByMentor(parseInt(mentor as string));\n      } else {\n        courses = await storage.getCourses();\n      }\n      \n      res.json(courses);\n    } catch (error) {\n      console.error(\"Error fetching courses:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const course = await storage.getCourse(parseInt(req.params.id));\n      if (!course) return res.status(404).json({ error: \"Course not found\" });\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/courses\", async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.parse(req.body);\n      // Set default status for new courses\n      if (!courseData.status) {\n        courseData.status = \"draft\";\n      }\n      const course = await storage.createCourse(courseData);\n      res.status(201).json(course);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid course data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Update course\n  app.put(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const courseData = insertCourseSchema.partial().parse(req.body);\n      const course = await storage.updateCourse(parseInt(req.params.id), courseData);\n      if (!course) return res.status(404).json({ error: \"Course not found\" });\n      res.json(course);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid course data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Delete course (soft delete)\n  app.delete(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteCourse(parseInt(req.params.id));\n      if (!success) return res.status(404).json({ error: \"Course not found\" });\n      res.json({ message: \"Course deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get courses by status\n  app.get(\"/api/courses/status/:status\", async (req, res) => {\n    try {\n      const courses = await storage.getCoursesByStatus(req.params.status);\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get courses for approval (admin only)\n  app.get(\"/api/courses/pending-approval\", async (req, res) => {\n    try {\n      const courses = await storage.getCoursesForApproval();\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get published courses\n  app.get(\"/api/courses/published\", async (req, res) => {\n    try {\n      const courses = await storage.getPublishedCourses();\n      res.json(courses);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Approve course (admin only)\n  app.post(\"/api/courses/:id/approve\", async (req, res) => {\n    try {\n      const { adminNotes } = req.body;\n      const adminId = 1; // TODO: Get from authenticated user session\n      const course = await storage.approveCourse(parseInt(req.params.id), adminId, adminNotes);\n      if (!course) return res.status(404).json({ error: \"Course not found\" });\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Reject course (admin only)\n  app.post(\"/api/courses/:id/reject\", async (req, res) => {\n    try {\n      const { adminNotes } = req.body;\n      const adminId = 1; // TODO: Get from authenticated user session\n      const course = await storage.rejectCourse(parseInt(req.params.id), adminId, adminNotes);\n      if (!course) return res.status(404).json({ error: \"Course not found\" });\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Publish course (admin only)\n  app.post(\"/api/courses/:id/publish\", async (req, res) => {\n    try {\n      const { adminNotes } = req.body;\n      const adminId = 1; // TODO: Get from authenticated user session\n      const course = await storage.updateCourseStatus(parseInt(req.params.id), \"published\", adminNotes, adminId);\n      if (!course) return res.status(404).json({ error: \"Course not found\" });\n      res.json(course);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Classroom routes\n  app.get(\"/api/classrooms\", async (req, res) => {\n    try {\n      const { master } = req.query;\n      let classrooms;\n      \n      if (master) {\n        classrooms = await storage.getClassroomsByMaster(parseInt(master as string));\n      } else {\n        classrooms = await storage.getClassrooms();\n      }\n      \n      res.json(classrooms);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get public classrooms for browsing\n  app.get(\"/api/classrooms/public\", async (req, res) => {\n    try {\n      const classrooms = await storage.getPublicClassrooms();\n      res.json(classrooms);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get classroom by custom slug\n  app.get(\"/api/classrooms/slug/:slug\", async (req, res) => {\n    try {\n      const classroom = await storage.getClassroomBySlug(req.params.slug);\n      if (!classroom) return res.status(404).json({ error: \"Academy not found\" });\n      res.json(classroom);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/classrooms/:id\", async (req, res) => {\n    try {\n      const classroom = await storage.getClassroom(parseInt(req.params.id));\n      if (!classroom) return res.status(404).json({ error: \"Classroom not found\" });\n      res.json(classroom);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/classrooms\", async (req, res) => {\n    try {\n      console.log(\"Received classroom data:\", JSON.stringify(req.body, null, 2));\n      const classroomData = insertClassroomSchema.parse(req.body);\n      console.log(\"Parsed classroom data:\", JSON.stringify(classroomData, null, 2));\n      const classroom = await storage.createClassroom(classroomData);\n      res.status(201).json(classroom);\n    } catch (error) {\n      console.error(\"Classroom creation error:\", error);\n      if (error instanceof z.ZodError) {\n        console.error(\"Zod validation errors:\", error.errors);\n        return res.status(400).json({ error: \"Invalid classroom data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Update classroom route\n  app.put(\"/api/classrooms/:id\", async (req, res) => {\n    try {\n      const classroomId = parseInt(req.params.id);\n      console.log(\"Updating classroom:\", classroomId, \"with data:\", JSON.stringify(req.body, null, 2));\n      \n      // Validate the data using a partial schema for updates\n      const updateData = insertClassroomSchema.partial().parse(req.body);\n      console.log(\"Parsed update data:\", JSON.stringify(updateData, null, 2));\n      \n      const updatedClassroom = await storage.updateClassroom(classroomId, updateData);\n      if (!updatedClassroom) {\n        return res.status(404).json({ error: \"Classroom not found\" });\n      }\n      \n      res.json(updatedClassroom);\n    } catch (error) {\n      console.error(\"Classroom update error:\", error);\n      if (error instanceof z.ZodError) {\n        console.error(\"Zod validation errors:\", error.errors);\n        return res.status(400).json({ error: \"Invalid classroom data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Join classroom route\n  app.post(\"/api/classrooms/:id/join\", async (req, res) => {\n    try {\n      const classroomId = parseInt(req.params.id);\n      const { userId, message, experience } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ error: \"User ID is required\" });\n      }\n      \n      // Check if user already has a membership for this classroom\n      const existingMembership = await storage.getClassroomMembership(userId, classroomId);\n      if (existingMembership) {\n        return res.status(400).json({ error: \"You already have a request for this academy\" });\n      }\n      \n      // Create classroom membership with pending status\n      const membership = await storage.createClassroomMembership({\n        userId,\n        classroomId,\n        role: \"student\",\n        status: \"pending\"\n      });\n      \n      res.status(201).json({ \n        message: \"Join request sent successfully\",\n        membership \n      });\n    } catch (error) {\n      console.error(\"Join classroom error:\", error);\n      res.status(500).json({ error: \"Failed to send join request\" });\n    }\n  });\n\n  // Get pending enrollment requests for a classroom (for masters)\n  app.get(\"/api/classrooms/:id/requests\", async (req, res) => {\n    try {\n      const classroomId = parseInt(req.params.id);\n      const { status } = req.query;\n      \n      const requests = await storage.getClassroomMembershipRequests(classroomId, status as string);\n      res.json(requests);\n    } catch (error) {\n      console.error(\"Get enrollment requests error:\", error);\n      res.status(500).json({ error: \"Failed to fetch enrollment requests\" });\n    }\n  });\n\n  // Approve or reject enrollment request\n  app.patch(\"/api/classroom-memberships/:id/status\", async (req, res) => {\n    try {\n      const membershipId = parseInt(req.params.id);\n      const { status, reviewedBy } = req.body;\n      \n      if (!['active', 'rejected'].includes(status)) {\n        return res.status(400).json({ error: \"Invalid status. Use 'active' or 'rejected'\" });\n      }\n      \n      const updatedMembership = await storage.updateClassroomMembershipStatus(membershipId, status, reviewedBy);\n      \n      res.json({ \n        message: `Request ${status === 'active' ? 'approved' : 'rejected'} successfully`,\n        membership: updatedMembership \n      });\n    } catch (error) {\n      console.error(\"Update membership status error:\", error);\n      res.status(500).json({ error: \"Failed to update request status\" });\n    }\n  });\n\n  // Classroom memberships routes\n  app.get(\"/api/classroom-memberships\", async (req, res) => {\n    try {\n      const { classroomId, role } = req.query;\n      let memberships: any[] = [];\n      \n      if (classroomId && role) {\n        // Get memberships for a specific classroom and role\n        memberships = await storage.getClassroomMembershipsByClassroomAndRole(parseInt(classroomId as string), role as string);\n      } else if (classroomId) {\n        // Get all memberships for a specific classroom\n        memberships = await storage.getClassroomMembershipsByClassroom(parseInt(classroomId as string));\n      } else {\n        // Return empty array if no classroomId provided\n        memberships = [];\n      }\n      \n      res.json(memberships);\n    } catch (error) {\n      console.error(\"Classroom memberships error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Classroom members route (alias for memberships with user details)\n  app.get(\"/api/classrooms/:id/members\", async (req, res) => {\n    try {\n      const classroomId = parseInt(req.params.id);\n      const members = await storage.getClassroomMembershipsByClassroom(classroomId);\n      res.json(members || []);\n    } catch (error) {\n      console.error(\"Classroom members error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Classroom analytics route\n  app.get(\"/api/classrooms/:id/analytics\", async (req, res) => {\n    try {\n      const classroomId = parseInt(req.params.id);\n      \n      // Get basic classroom data\n      const classroom = await storage.getClassroom(classroomId);\n      if (!classroom) {\n        return res.status(404).json({ error: \"Classroom not found\" });\n      }\n\n      // Get members for analytics\n      const members = await storage.getClassroomMembershipsByClassroom(classroomId) || [];\n      const students = members.filter((m: any) => m.role === 'student');\n      const staff = members.filter((m: any) => m.role === 'staff');\n\n      // Calculate analytics\n      const analytics = {\n        totalStudents: students.length,\n        totalStaff: staff.length,\n        averageProgress: students.length > 0 ? \n          students.reduce((sum: number, s: any) => sum + (s.progress || 0), 0) / students.length : 0,\n        completionRate: students.length > 0 ?\n          (students.filter((s: any) => s.progress >= 100).length / students.length) * 100 : 0,\n        staffEfficiency: 85, // Placeholder - would be calculated from actual data\n        satisfaction: 92, // Placeholder - would come from reviews/feedback\n        teachingQuality: 4.8, // Placeholder - would come from student ratings\n        engagement: 89, // Placeholder - would come from participation metrics\n        recentActivities: [] // Placeholder - would come from activity logs\n      };\n\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Classroom analytics error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/classroom-memberships\", async (req, res) => {\n    try {\n      const membershipData = {\n        userId: req.body.userId,\n        classroomId: req.body.classroomId,\n        role: req.body.role || \"student\",\n        status: req.body.status || \"active\"\n      };\n      \n      const membership = await storage.createClassroomMembership(membershipData);\n      res.status(201).json(membership);\n    } catch (error) {\n      console.error(\"Create classroom membership error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Live sessions routes\n  app.get(\"/api/live-sessions\", async (req, res) => {\n    try {\n      const { mentor, classroom } = req.query;\n      let sessions;\n      \n      if (mentor) {\n        sessions = await storage.getLiveSessionsByMentor(parseInt(mentor as string));\n      } else if (classroom) {\n        sessions = await storage.getLiveSessionsByClassroom(parseInt(classroom as string));\n      } else {\n        sessions = await storage.getLiveSessions();\n      }\n      \n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Community posts routes\n  app.get(\"/api/posts\", async (req, res) => {\n    try {\n      const { user } = req.query;\n      let posts;\n      \n      if (user) {\n        posts = await storage.getPostsByUser(parseInt(user as string));\n      } else {\n        posts = await storage.getPosts();\n      }\n      \n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/posts\", async (req, res) => {\n    try {\n      const postData = insertPostSchema.parse(req.body);\n      const post = await storage.createPost(postData);\n      res.status(201).json(post);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid post data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Enhanced enrollment routes\n  app.get(\"/api/enrollments/user/:userId\", async (req, res) => {\n    try {\n      const enrollments = await storage.getEnrollmentsByUser(parseInt(req.params.userId));\n      res.json(enrollments);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/enrollments/course/:courseId\", async (req, res) => {\n    try {\n      const enrollments = await storage.getEnrollmentsByCourse(parseInt(req.params.courseId));\n      res.json(enrollments);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/enrollments/status/:status\", async (req, res) => {\n    try {\n      const enrollments = await storage.getEnrollmentsByStatus(req.params.status);\n      res.json(enrollments);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/enrollments\", async (req, res) => {\n    try {\n      const enrollmentData = insertEnrollmentSchema.parse(req.body);\n      const enrollment = await storage.createEnrollment(enrollmentData);\n      res.status(201).json(enrollment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid enrollment data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/enrollments/:id/progress\", async (req, res) => {\n    try {\n      const { progress } = req.body;\n      const enrollment = await storage.updateEnrollmentProgress(parseInt(req.params.id), progress);\n      if (!enrollment) return res.status(404).json({ error: \"Enrollment not found\" });\n      res.json(enrollment);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/enrollments/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      const enrollment = await storage.updateEnrollmentStatus(parseInt(req.params.id), status);\n      if (!enrollment) return res.status(404).json({ error: \"Enrollment not found\" });\n      res.json(enrollment);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/enrollments/:id/complete\", async (req, res) => {\n    try {\n      const enrollment = await storage.completeEnrollment(parseInt(req.params.id));\n      if (!enrollment) return res.status(404).json({ error: \"Enrollment not found\" });\n      res.json(enrollment);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Course waitlist routes\n  app.get(\"/api/courses/:id/waitlist\", async (req, res) => {\n    try {\n      const waitlist = await storage.getCourseWaitlist(parseInt(req.params.id));\n      res.json(waitlist);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/waitlist/user/:userId\", async (req, res) => {\n    try {\n      const waitlistEntries = await storage.getUserWaitlistEntries(parseInt(req.params.userId));\n      res.json(waitlistEntries);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/courses/:id/waitlist\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n      const waitlistEntry = await storage.addToWaitlist({\n        userId,\n        courseId: parseInt(req.params.id),\n        priority: 1,\n        status: \"waiting\"\n      });\n      res.status(201).json(waitlistEntry);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/courses/:courseId/waitlist/:userId\", async (req, res) => {\n    try {\n      const success = await storage.removeFromWaitlist(parseInt(req.params.userId), parseInt(req.params.courseId));\n      if (!success) return res.status(404).json({ error: \"Waitlist entry not found\" });\n      res.json({ message: \"Removed from waitlist successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/courses/:id/waitlist/notify\", async (req, res) => {\n    try {\n      const { count = 1 } = req.body;\n      const notifiedUsers = await storage.notifyWaitlistUsers(parseInt(req.params.id), count);\n      res.json({ \n        message: `Notified ${notifiedUsers.length} users from waitlist`,\n        notifiedUsers \n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Course analytics routes\n  app.get(\"/api/courses/:id/analytics\", async (req, res) => {\n    try {\n      const analytics = await storage.getCourseAnalytics(parseInt(req.params.id));\n      res.json(analytics);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/courses/:id/analytics/summary\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const summary = await storage.getCourseAnalyticsSummary(\n        parseInt(req.params.id),\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/courses/:id/analytics\", async (req, res) => {\n    try {\n      const analyticsData = insertCourseAnalyticsSchema.parse(req.body);\n      analyticsData.courseId = parseInt(req.params.id);\n      const analytics = await storage.createCourseAnalytics(analyticsData);\n      res.status(201).json(analytics);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid analytics data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Live sessions routes\n  app.get(\"/api/live-sessions\", async (req, res) => {\n    try {\n      const { mentor, classroom, status } = req.query;\n      let sessions;\n      \n      if (mentor) {\n        sessions = await storage.getLiveSessionsByMentor(parseInt(mentor as string));\n      } else if (classroom) {\n        sessions = await storage.getLiveSessionsByClassroom(parseInt(classroom as string));\n      } else {\n        sessions = await storage.getLiveSessions();\n      }\n      \n      // Filter by status if provided\n      if (status && sessions) {\n        sessions = sessions.filter(session => session.status === status);\n      }\n      \n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/live-sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.getLiveSession(parseInt(req.params.id));\n      if (!session) return res.status(404).json({ error: \"Live session not found\" });\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/live-sessions\", async (req, res) => {\n    try {\n      const sessionData = insertLiveSessionSchema.parse(req.body);\n      const session = await storage.createLiveSession(sessionData);\n      res.status(201).json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid live session data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Learning path routes\n  app.get(\"/api/learning-paths\", async (req, res) => {\n    try {\n      const { instructor } = req.query;\n      let paths;\n      \n      if (instructor) {\n        paths = await storage.getLearningPathsByInstructor(parseInt(instructor as string));\n      } else {\n        paths = await storage.getLearningPaths();\n      }\n      \n      res.json(paths);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/learning-paths/:id\", async (req, res) => {\n    try {\n      const path = await storage.getLearningPath(parseInt(req.params.id));\n      if (!path) return res.status(404).json({ error: \"Learning path not found\" });\n      res.json(path);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/learning-paths\", async (req, res) => {\n    try {\n      const pathData = insertLearningPathSchema.parse(req.body);\n      const path = await storage.createLearningPath(pathData);\n      res.status(201).json(path);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid learning path data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Mentor profiles routes\n  app.get(\"/api/mentor-profiles\", async (req, res) => {\n    try {\n      const { specialization } = req.query;\n      let profiles;\n      \n      if (specialization) {\n        profiles = await storage.getMentorProfilesBySpecialization(specialization as string);\n      } else {\n        profiles = await storage.getMentorProfiles();\n      }\n      \n      res.json(profiles);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentor-profiles/:userId\", async (req, res) => {\n    try {\n      const profile = await storage.getMentorProfile(parseInt(req.params.userId));\n      if (!profile) return res.status(404).json({ error: \"Mentor profile not found\" });\n      res.json(profile);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/mentor-profiles\", async (req, res) => {\n    try {\n      const profileData = insertMentorProfileSchema.parse(req.body);\n      const profile = await storage.createMentorProfile(profileData);\n      res.status(201).json(profile);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid mentor profile data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Mentor application routes\n  app.get(\"/api/mentor-applications\", async (req, res) => {\n    try {\n      const { status } = req.query;\n      let applications;\n      \n      if (status) {\n        applications = await storage.getMentorApplicationsByStatus(status as string);\n      } else {\n        applications = await storage.getMentorApplications();\n      }\n      \n      res.json(applications);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentor-applications/:id\", async (req, res) => {\n    try {\n      const application = await storage.getMentorApplication(parseInt(req.params.id));\n      if (!application) return res.status(404).json({ error: \"Mentor application not found\" });\n      res.json(application);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/mentor-applications\", async (req, res) => {\n    try {\n      const applicationData = insertMentorApplicationSchema.parse(req.body);\n      const application = await storage.createMentorApplication(applicationData);\n      res.status(201).json(application);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid mentor application data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/mentor-applications/:id/status\", async (req, res) => {\n    try {\n      const { status, adminNotes, reviewedBy } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n\n      const application = await storage.updateMentorApplicationStatus(\n        parseInt(req.params.id),\n        status,\n        adminNotes,\n        reviewedBy\n      );\n      \n      if (!application) {\n        return res.status(404).json({ error: \"Mentor application not found\" });\n      }\n      \n      res.json(application);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Mentorship request routes\n  app.get(\"/api/mentorship-requests\", async (req, res) => {\n    try {\n      const { studentId, mentorId, status } = req.query;\n      let requests;\n      \n      if (studentId) {\n        requests = await storage.getMentorshipRequestsByStudent(parseInt(studentId as string));\n      } else if (mentorId) {\n        requests = await storage.getMentorshipRequestsByMentor(parseInt(mentorId as string));\n      } else if (status) {\n        requests = await storage.getMentorshipRequestsByStatus(status as string);\n      } else {\n        requests = await storage.getMentorshipRequests();\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentorship-requests/:id\", async (req, res) => {\n    try {\n      const request = await storage.getMentorshipRequest(parseInt(req.params.id));\n      if (!request) return res.status(404).json({ error: \"Mentorship request not found\" });\n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/mentorship-requests\", async (req, res) => {\n    try {\n      const requestData = insertMentorshipRequestSchema.parse(req.body);\n      const request = await storage.createMentorshipRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid mentorship request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/mentorship-requests/:id/status\", async (req, res) => {\n    try {\n      const { status, mentorResponse } = req.body;\n      \n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n\n      const request = await storage.updateMentorshipRequestStatus(\n        parseInt(req.params.id),\n        status,\n        mentorResponse\n      );\n      \n      if (!request) {\n        return res.status(404).json({ error: \"Mentorship request not found\" });\n      }\n      \n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Mentor conversation routes\n  app.get(\"/api/mentorship-requests/:id/conversations\", async (req, res) => {\n    try {\n      const conversations = await storage.getMentorConversations(parseInt(req.params.id));\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/mentorship-requests/:id/conversations\", async (req, res) => {\n    try {\n      const conversationData = insertMentorConversationSchema.parse({\n        ...req.body,\n        mentorshipRequestId: parseInt(req.params.id)\n      });\n      const conversation = await storage.createMentorConversation(conversationData);\n      res.status(201).json(conversation);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid conversation data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/conversations/:id/read\", async (req, res) => {\n    try {\n      const conversation = await storage.markMessageAsRead(parseInt(req.params.id));\n      if (!conversation) return res.status(404).json({ error: \"Conversation not found\" });\n      res.json(conversation);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Mentorship session routes\n  app.get(\"/api/mentorship-requests/:id/sessions\", async (req, res) => {\n    try {\n      const sessions = await storage.getMentorshipSessions(parseInt(req.params.id));\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentorship-sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.getMentorshipSession(parseInt(req.params.id));\n      if (!session) return res.status(404).json({ error: \"Session not found\" });\n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentorship-sessions\", async (req, res) => {\n    try {\n      const { mentorId, studentId } = req.query;\n      let sessions;\n      \n      if (mentorId) {\n        sessions = await storage.getMentorshipSessionsByMentor(parseInt(mentorId as string));\n      } else if (studentId) {\n        sessions = await storage.getMentorshipSessionsByStudent(parseInt(studentId as string));\n      } else {\n        return res.status(400).json({ error: \"mentorId or studentId query parameter is required\" });\n      }\n      \n      res.json(sessions);\n    } catch (error) {\n      console.error('Error fetching mentorship sessions:', error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/mentorship-sessions\", async (req, res) => {\n    try {\n      const sessionData = insertMentorshipSessionSchema.parse({\n        ...req.body,\n        status: 'scheduled'\n      });\n      const session = await storage.createMentorshipSession(sessionData);\n      res.status(201).json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid session data\", details: error.errors });\n      }\n      console.error('Error creating mentorship session:', error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/mentorship-sessions\", async (req, res) => {\n    try {\n      const sessionData = insertMentorshipSessionSchema.parse(req.body);\n      const session = await storage.createMentorshipSession(sessionData);\n      res.status(201).json(session);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid session data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/mentorship-sessions/:id\", async (req, res) => {\n    try {\n      const session = await storage.updateMentorshipSession(\n        parseInt(req.params.id),\n        req.body\n      );\n      \n      if (!session) {\n        return res.status(404).json({ error: \"Session not found\" });\n      }\n      \n      res.json(session);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Master role request routes\n  app.get(\"/api/master-role-requests\", async (req, res) => {\n    try {\n      const status = req.query.status as string;\n      let requests;\n      \n      if (status) {\n        requests = await storage.getMasterRoleRequestsByStatus(status);\n      } else {\n        requests = await storage.getMasterRoleRequests();\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/master-role-requests/:id\", async (req, res) => {\n    try {\n      const request = await storage.getMasterRoleRequest(parseInt(req.params.id));\n      if (!request) return res.status(404).json({ error: \"Master role request not found\" });\n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentors/:mentorId/master-role-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getMasterRoleRequestsByMentor(parseInt(req.params.mentorId));\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/master-role-requests\", async (req, res) => {\n    try {\n      const requestData = insertMasterRoleRequestSchema.parse(req.body);\n      \n      // Check if mentor already has a pending request\n      const existingRequests = await storage.getMasterRoleRequestsByMentor(requestData.mentorId);\n      const pendingRequest = existingRequests.find(r => r.status === 'pending');\n      \n      if (pendingRequest) {\n        return res.status(409).json({ error: \"You already have a pending master role request\" });\n      }\n      \n      const request = await storage.createMasterRoleRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/master-role-requests/:id/status\", async (req, res) => {\n    try {\n      const { status, adminNotes, reviewedBy } = req.body;\n      \n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ error: \"Status must be 'approved' or 'rejected'\" });\n      }\n      \n      const request = await storage.updateMasterRoleRequestStatus(\n        parseInt(req.params.id),\n        status,\n        adminNotes,\n        reviewedBy\n      );\n      \n      if (!request) {\n        return res.status(404).json({ error: \"Master role request not found\" });\n      }\n      \n      // If approved, promote the mentor to master\n      if (status === 'approved') {\n        await storage.promoteMentorToMaster(request.mentorId);\n      }\n      \n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Staff request routes\n  app.get(\"/api/staff-requests\", async (req, res) => {\n    try {\n      const status = req.query.status as string;\n      let requests;\n      \n      if (status) {\n        requests = await storage.getStaffRequestsByStatus(status);\n      } else {\n        requests = await storage.getStaffRequests();\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/staff-requests/:id\", async (req, res) => {\n    try {\n      const request = await storage.getStaffRequest(parseInt(req.params.id));\n      if (!request) return res.status(404).json({ error: \"Staff request not found\" });\n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentors/:mentorId/staff-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getStaffRequestsByMentor(parseInt(req.params.mentorId));\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/classrooms/:classroomId/staff-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getStaffRequestsByClassroom(parseInt(req.params.classroomId));\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/staff-requests\", async (req, res) => {\n    try {\n      const requestData = insertStaffRequestSchema.parse(req.body);\n      \n      // Check if mentor already has a pending request for this classroom\n      const existingRequests = await storage.getStaffRequestsByMentor(requestData.mentorId);\n      const pendingRequest = existingRequests.find(r => \n        r.classroomId === requestData.classroomId && r.status === 'pending'\n      );\n      \n      if (pendingRequest) {\n        return res.status(409).json({ error: \"You already have a pending staff request for this classroom\" });\n      }\n      \n      const request = await storage.createStaffRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/staff-requests/:id/status\", async (req, res) => {\n    try {\n      const { status, adminNotes, reviewedBy } = req.body;\n      \n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ error: \"Status must be 'approved' or 'rejected'\" });\n      }\n      \n      const request = await storage.updateStaffRequestStatus(\n        parseInt(req.params.id),\n        status,\n        adminNotes,\n        reviewedBy\n      );\n      \n      if (!request) {\n        return res.status(404).json({ error: \"Staff request not found\" });\n      }\n      \n      // If approved, add mentor as staff to the classroom\n      if (status === 'approved') {\n        try {\n          await storage.addStaffToClassroom(request.mentorId, request.classroomId);\n        } catch (staffError: any) {\n          return res.status(409).json({ error: staffError.message });\n        }\n      }\n      \n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Get mentor's staff classroom\n  app.get(\"/api/mentors/:id/staff-classroom\", async (req, res) => {\n    try {\n      const classroom = await storage.getStaffClassroomByMentor(parseInt(req.params.id));\n      if (!classroom) {\n        return res.status(404).json({ error: \"No staff classroom found for this mentor\" });\n      }\n      res.json(classroom);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Resignation request routes\n  app.get(\"/api/resignation-requests\", async (req, res) => {\n    try {\n      const { status, classroomId } = req.query;\n      \n      let requests;\n      if (status) {\n        requests = await storage.getResignationRequestsByStatus(status as string);\n      } else if (classroomId) {\n        requests = await storage.getResignationRequestsByClassroom(parseInt(classroomId as string));\n      } else {\n        requests = await storage.getResignationRequests();\n      }\n      \n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentors/:id/resignation-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getResignationRequestsByMentor(parseInt(req.params.id));\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/resignation-requests\", async (req, res) => {\n    try {\n      const requestData = insertResignationRequestSchema.parse(req.body);\n      \n      // Check if mentor already has a pending resignation request\n      const existingRequests = await storage.getResignationRequestsByMentor(requestData.mentorId);\n      const pendingRequest = existingRequests.find(r => r.status === 'pending');\n      \n      if (pendingRequest) {\n        return res.status(409).json({ error: \"You already have a pending resignation request\" });\n      }\n      \n      const request = await storage.createResignationRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid request data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.patch(\"/api/resignation-requests/:id/status\", async (req, res) => {\n    try {\n      const { status, masterNotes, reviewedBy } = req.body;\n      \n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ error: \"Status must be 'approved' or 'rejected'\" });\n      }\n      \n      const request = await storage.updateResignationRequestStatus(\n        parseInt(req.params.id),\n        status,\n        masterNotes,\n        reviewedBy\n      );\n      \n      if (!request) {\n        return res.status(404).json({ error: \"Resignation request not found\" });\n      }\n      \n      // If approved, remove mentor from classroom staff\n      if (status === 'approved') {\n        try {\n          await storage.removeStaffFromClassroom(request.mentorId, request.classroomId);\n        } catch (removalError: any) {\n          return res.status(500).json({ error: \"Failed to remove staff from classroom\" });\n        }\n      }\n      \n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Practice group routes\n  app.get(\"/api/practice-groups\", async (req, res) => {\n    try {\n      const groups = await storage.getPracticeGroups();\n      res.json(groups);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/practice-groups/:id\", async (req, res) => {\n    try {\n      const group = await storage.getPracticeGroup(parseInt(req.params.id));\n      if (!group) return res.status(404).json({ error: \"Practice group not found\" });\n      res.json(group);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/practice-groups\", async (req, res) => {\n    try {\n      const groupData = insertPracticeGroupSchema.parse(req.body);\n      const group = await storage.createPracticeGroup(groupData);\n      res.status(201).json(group);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid practice group data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Forum routes\n  app.get(\"/api/forum/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getForumCategories();\n      res.json(categories);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/forum/topics\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      let topics;\n      \n      if (category) {\n        topics = await storage.getForumTopicsByCategory(parseInt(category as string));\n      } else {\n        topics = await storage.getForumTopics();\n      }\n      \n      res.json(topics);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/forum/categories\", async (req, res) => {\n    try {\n      const categoryData = insertForumCategorySchema.parse(req.body);\n      const category = await storage.createForumCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid forum category data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/forum/topics\", async (req, res) => {\n    try {\n      const topicData = insertForumTopicSchema.parse(req.body);\n      const topic = await storage.createForumTopic(topicData);\n      res.status(201).json(topic);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid forum topic data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Event routes\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const { instructor, upcoming } = req.query;\n      let events;\n      \n      if (instructor) {\n        events = await storage.getEventsByInstructor(parseInt(instructor as string));\n      } else if (upcoming === 'true') {\n        events = await storage.getUpcomingEvents();\n      } else {\n        events = await storage.getEvents();\n      }\n      \n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/events/:id\", async (req, res) => {\n    try {\n      const event = await storage.getEvent(parseInt(req.params.id));\n      if (!event) return res.status(404).json({ error: \"Event not found\" });\n      res.json(event);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/events\", async (req, res) => {\n    try {\n      const eventData = insertEventSchema.parse(req.body);\n      const event = await storage.createEvent(eventData);\n      res.status(201).json(event);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid event data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Mentor profile routes\n  app.get(\"/api/mentors\", async (req, res) => {\n    try {\n      const { specialization } = req.query;\n      let mentors;\n      \n      if (specialization) {\n        mentors = await storage.getMentorProfilesBySpecialization(specialization as string);\n      } else {\n        mentors = await storage.getMentorProfiles();\n      }\n      \n      res.json(mentors);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentors\", async (req, res) => {\n    try {\n      const mentors = await storage.getMentorProfiles();\n      res.json(mentors);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/mentors/:userId\", async (req, res) => {\n    try {\n      const mentor = await storage.getMentorProfile(parseInt(req.params.userId));\n      if (!mentor) return res.status(404).json({ error: \"Mentor profile not found\" });\n      res.json(mentor);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/mentors\", async (req, res) => {\n    try {\n      const mentorData = insertMentorProfileSchema.parse(req.body);\n      const mentor = await storage.createMentorProfile(mentorData);\n      res.status(201).json(mentor);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid mentor profile data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Course review routes\n  app.get(\"/api/courses/:courseId/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getCourseReviews(parseInt(req.params.courseId));\n      res.json(reviews);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/course-reviews\", async (req, res) => {\n    try {\n      const reviewData = insertCourseReviewSchema.parse(req.body);\n      const review = await storage.createCourseReview(reviewData);\n      res.status(201).json(review);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid course review data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Achievement routes\n  app.get(\"/api/achievements\", async (req, res) => {\n    try {\n      const achievements = await storage.getAchievements();\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/achievements\", async (req, res) => {\n    try {\n      const achievements = await storage.getUserAchievements(parseInt(req.params.userId));\n      res.json(achievements);\n    } catch (error) {\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/user-achievements\", async (req, res) => {\n    try {\n      const achievementData = insertUserAchievementSchema.parse(req.body);\n      const achievement = await storage.createUserAchievement(achievementData);\n      res.status(201).json(achievement);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid user achievement data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Schedule/Timetable routes\n  app.get(\"/api/schedules\", async (req, res) => {\n    try {\n      const { classroomId, instructorId, dayOfWeek } = req.query;\n      \n      if (classroomId) {\n        const schedules = await storage.getSchedulesByClassroom(parseInt(classroomId as string));\n        res.json(schedules);\n      } else if (instructorId) {\n        const schedules = await storage.getSchedulesByInstructor(parseInt(instructorId as string));\n        res.json(schedules);\n      } else if (dayOfWeek) {\n        const schedules = await storage.getSchedulesByDay(parseInt(dayOfWeek as string));\n        res.json(schedules);\n      } else {\n        const schedules = await storage.getSchedules();\n        res.json(schedules);\n      }\n    } catch (error) {\n      console.error(\"Get schedules error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/schedules\", async (req, res) => {\n    try {\n      const scheduleData = insertScheduleSchema.parse(req.body);\n      const schedule = await storage.createSchedule(scheduleData);\n      res.status(201).json(schedule);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid schedule data\", details: error.errors });\n      }\n      if (error instanceof Error && error.message.includes('conflict')) {\n        return res.status(409).json({ error: error.message });\n      }\n      console.error(\"Create schedule error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/schedules/check-availability\", async (req, res) => {\n    try {\n      const { instructorId, dayOfWeek, startTime, endTime, excludeScheduleId } = req.body;\n      \n      const isAvailable = await storage.checkInstructorAvailability(\n        instructorId,\n        dayOfWeek,\n        startTime,\n        endTime,\n        excludeScheduleId\n      );\n      \n      res.json({ available: isAvailable });\n    } catch (error) {\n      console.error(\"Check availability error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/schedule-enrollments\", async (req, res) => {\n    try {\n      const enrollmentData = insertScheduleEnrollmentSchema.parse(req.body);\n      const enrollment = await storage.enrollStudentInSchedule(enrollmentData);\n      res.status(201).json(enrollment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid enrollment data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":58786},"server/storage.ts":{"content":"import { \n  users, \n  courses,\n  classrooms,\n  enrollments,\n  classroomMemberships,\n  liveSessions,\n  posts,\n  learningPaths,\n  practiceGroups,\n  practiceGroupMemberships,\n  forumCategories,\n  forumTopics,\n  events,\n  eventRegistrations,\n  courseReviews,\n  mentorProfiles,\n  achievements,\n  userAchievements,\n  courseLessons,\n  lessonProgress,\n  postComments,\n  userFollows,\n  mentorApplications,\n  mentorshipRequests,\n  mentorConversations,\n  mentorshipSessions,\n  masterRoleRequests,\n  staffRequests,\n  resignationRequests,\n  schedules,\n  scheduleEnrollments,\n  scheduleNotifications,\n  scheduleConflicts,\n  courseWaitlist,\n  courseAnalytics,\n  type User, \n  type InsertUser,\n  type Course,\n  type InsertCourse,\n  type Classroom,\n  type InsertClassroom,\n  type Enrollment,\n  type InsertEnrollment,\n  type ClassroomMembership,\n  type InsertClassroomMembership,\n  type LiveSession,\n  type InsertLiveSession,\n  type Post,\n  type InsertPost,\n  type LearningPath,\n  type InsertLearningPath,\n  type PracticeGroup,\n  type InsertPracticeGroup,\n  type PracticeGroupMembership,\n  type InsertPracticeGroupMembership,\n  type ForumCategory,\n  type InsertForumCategory,\n  type ForumTopic,\n  type InsertForumTopic,\n  type Event,\n  type InsertEvent,\n  type EventRegistration,\n  type InsertEventRegistration,\n  type CourseReview,\n  type InsertCourseReview,\n  type MentorProfile,\n  type InsertMentorProfile,\n  type Achievement,\n  type InsertAchievement,\n  type UserAchievement,\n  type InsertUserAchievement,\n  type CourseLesson,\n  type InsertCourseLesson,\n  type LessonProgress,\n  type InsertLessonProgress,\n  type PostComment,\n  type InsertPostComment,\n  type UserFollow,\n  type InsertUserFollow,\n  type MentorApplication,\n  type InsertMentorApplication,\n  type MentorshipRequest,\n  type InsertMentorshipRequest,\n  type MasterRoleRequest,\n  type InsertMasterRoleRequest,\n  type StaffRequest,\n  type InsertStaffRequest,\n  type ResignationRequest,\n  type InsertResignationRequest,  \n  type MentorConversation,\n  type InsertMentorConversation,\n  type MentorshipSession,\n  type InsertMentorshipSession,\n  type Schedule,\n  type InsertSchedule,\n  type ScheduleEnrollment,\n  type InsertScheduleEnrollment,\n  type ScheduleNotification,\n  type InsertScheduleNotification,\n  type ScheduleConflict,\n  type InsertScheduleConflict,\n  type CourseWaitlist,\n  type InsertCourseWaitlist,\n  type CourseAnalytics,\n  type InsertCourseAnalytics\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, ne, inArray, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\n// Enhanced interface with comprehensive CRUD methods for the music education platform\nexport interface IStorage {\n  // User methods\n  getAllUsers(role?: string): Promise<User[]>;\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Course methods\n  getCourses(): Promise<Course[]>;\n  getCourse(id: number): Promise<Course | undefined>;\n  getCoursesByCategory(category: string): Promise<Course[]>;\n  getCoursesByMentor(mentorId: number): Promise<Course[]>;\n  getCoursesByStatus(status: string): Promise<Course[]>;\n  getCoursesForApproval(): Promise<Course[]>;\n  getPublishedCourses(): Promise<Course[]>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  updateCourse(id: number, updates: Partial<InsertCourse>): Promise<Course | undefined>;\n  updateCourseStatus(id: number, status: string, adminNotes?: string, reviewedBy?: number): Promise<Course | undefined>;\n  approveCourse(id: number, adminId: number, adminNotes?: string): Promise<Course | undefined>;\n  rejectCourse(id: number, adminId: number, adminNotes?: string): Promise<Course | undefined>;\n  deleteCourse(id: number): Promise<boolean>;\n\n  // Enhanced enrollment methods\n  getEnrollmentsByUser(userId: number): Promise<Enrollment[]>;\n  getEnrollmentsByCourse(courseId: number): Promise<Enrollment[]>;\n  getEnrollment(userId: number, courseId: number): Promise<Enrollment | undefined>;\n  createEnrollment(enrollment: InsertEnrollment): Promise<Enrollment>;\n  updateEnrollmentProgress(id: number, progress: number): Promise<Enrollment | undefined>;\n  updateEnrollmentStatus(id: number, status: string): Promise<Enrollment | undefined>;\n  completeEnrollment(id: number): Promise<Enrollment | undefined>;\n  getEnrollmentsByStatus(status: string): Promise<Enrollment[]>;\n\n  // Course waitlist methods\n  getCourseWaitlist(courseId: number): Promise<CourseWaitlist[]>;\n  getUserWaitlistEntries(userId: number): Promise<CourseWaitlist[]>;\n  addToWaitlist(waitlistEntry: InsertCourseWaitlist): Promise<CourseWaitlist>;\n  removeFromWaitlist(userId: number, courseId: number): Promise<boolean>;\n  notifyWaitlistUsers(courseId: number, count: number): Promise<CourseWaitlist[]>;\n\n  // Course analytics methods\n  getCourseAnalytics(courseId: number): Promise<CourseAnalytics[]>;\n  createCourseAnalytics(analytics: InsertCourseAnalytics): Promise<CourseAnalytics>;\n  updateCourseAnalytics(courseId: number, date: Date, updates: Partial<InsertCourseAnalytics>): Promise<CourseAnalytics | undefined>;\n  getCourseAnalyticsSummary(courseId: number, startDate?: Date, endDate?: Date): Promise<any>;\n  \n  // Classroom methods\n  getClassrooms(): Promise<Classroom[]>;\n  getClassroom(id: number): Promise<Classroom | undefined>;\n  getClassroomBySlug(slug: string): Promise<Classroom | undefined>;\n  getPublicClassrooms(): Promise<Classroom[]>;\n  getClassroomsByMaster(masterId: number): Promise<Classroom[]>;\n  createClassroom(classroom: InsertClassroom): Promise<Classroom>;\n  updateClassroom(id: number, updates: Partial<InsertClassroom>): Promise<Classroom | undefined>;\n  \n  // Enrollment methods\n  getEnrollmentsByUser(userId: number): Promise<Enrollment[]>;\n  getEnrollmentsByCourse(courseId: number): Promise<Enrollment[]>;\n  getEnrollment(userId: number, courseId: number): Promise<Enrollment | undefined>;\n  createEnrollment(enrollment: InsertEnrollment): Promise<Enrollment>;\n  updateEnrollmentProgress(id: number, progress: number): Promise<Enrollment | undefined>;\n  \n  // Classroom membership methods\n  getClassroomMembershipsByUser(userId: number): Promise<ClassroomMembership[]>;\n  getClassroomMembershipsByClassroom(classroomId: number): Promise<ClassroomMembership[]>;\n  getClassroomMembershipsByClassroomAndRole(classroomId: number, role: string): Promise<ClassroomMembership[]>;\n  createClassroomMembership(membership: InsertClassroomMembership): Promise<ClassroomMembership>;\n  \n  // Live session methods\n  getLiveSessions(): Promise<LiveSession[]>;\n  getLiveSession(id: number): Promise<LiveSession | undefined>;\n  getLiveSessionsByMentor(mentorId: number): Promise<LiveSession[]>;\n  getLiveSessionsByClassroom(classroomId: number): Promise<LiveSession[]>;\n  createLiveSession(session: InsertLiveSession): Promise<LiveSession>;\n  updateLiveSession(id: number, updates: Partial<InsertLiveSession>): Promise<LiveSession | undefined>;\n  \n  // Community post methods\n  getPosts(): Promise<Post[]>;\n  getPost(id: number): Promise<Post | undefined>;\n  getPostsByUser(userId: number): Promise<Post[]>;\n  createPost(post: InsertPost): Promise<Post>;\n  updatePost(id: number, updates: Partial<InsertPost>): Promise<Post | undefined>;\n\n  // Learning path methods\n  getLearningPaths(): Promise<LearningPath[]>;\n  getLearningPath(id: number): Promise<LearningPath | undefined>;\n  getLearningPathsByInstructor(instructorId: number): Promise<LearningPath[]>;\n  createLearningPath(path: InsertLearningPath): Promise<LearningPath>;\n\n  // Practice group methods\n  getPracticeGroups(): Promise<PracticeGroup[]>;\n  getPracticeGroup(id: number): Promise<PracticeGroup | undefined>;\n  getPracticeGroupsByUser(userId: number): Promise<PracticeGroup[]>;\n  createPracticeGroup(group: InsertPracticeGroup): Promise<PracticeGroup>;\n\n  // Forum methods\n  getForumCategories(): Promise<ForumCategory[]>;\n  getForumTopics(): Promise<ForumTopic[]>;\n  getForumTopicsByCategory(categoryId: number): Promise<ForumTopic[]>;\n  createForumCategory(category: InsertForumCategory): Promise<ForumCategory>;\n  createForumTopic(topic: InsertForumTopic): Promise<ForumTopic>;\n\n  // Event methods\n  getEvents(): Promise<Event[]>;\n  getEvent(id: number): Promise<Event | undefined>;\n  getEventsByInstructor(instructorId: number): Promise<Event[]>;\n  getUpcomingEvents(): Promise<Event[]>;\n  createEvent(event: InsertEvent): Promise<Event>;\n\n  // Mentor profile methods\n  getMentorProfiles(): Promise<MentorProfile[]>;\n  getMentorProfile(userId: number): Promise<MentorProfile | undefined>;\n  getMentorProfilesBySpecialization(specialization: string): Promise<MentorProfile[]>;\n  createMentorProfile(profile: InsertMentorProfile): Promise<MentorProfile>;\n\n  // Course review methods\n  getCourseReviews(courseId: number): Promise<CourseReview[]>;\n  getCourseReviewsByUser(userId: number): Promise<CourseReview[]>;\n  createCourseReview(review: InsertCourseReview): Promise<CourseReview>;\n\n  // Achievement methods\n  getAchievements(): Promise<Achievement[]>;\n  getUserAchievements(userId: number): Promise<UserAchievement[]>;\n  createUserAchievement(achievement: InsertUserAchievement): Promise<UserAchievement>;\n\n  // Authentication methods\n  authenticateUser(email: string, password: string): Promise<User | null>;\n  registerUser(userData: InsertUser, hashedPassword: string): Promise<User>;\n  hashPassword(password: string): Promise<string>;\n  verifyPassword(password: string, hashedPassword: string): Promise<boolean>;\n\n  // Mentor application methods\n  getMentorApplications(): Promise<MentorApplication[]>;\n  getMentorApplication(id: number): Promise<MentorApplication | undefined>;\n  getMentorApplicationsByStatus(status: string): Promise<MentorApplication[]>;\n  createMentorApplication(application: InsertMentorApplication): Promise<MentorApplication>;\n  updateMentorApplicationStatus(id: number, status: string, adminNotes?: string, reviewedBy?: number): Promise<MentorApplication | undefined>;\n\n  // Mentorship request methods\n  getMentorshipRequests(): Promise<MentorshipRequest[]>;\n  getMentorshipRequest(id: number): Promise<MentorshipRequest | undefined>;\n  getMentorshipRequestsByStudent(studentId: number): Promise<MentorshipRequest[]>;\n  getMentorshipRequestsByMentor(mentorId: number): Promise<MentorshipRequest[]>;\n  getMentorshipRequestsByStatus(status: string): Promise<MentorshipRequest[]>;\n  createMentorshipRequest(request: InsertMentorshipRequest): Promise<MentorshipRequest>;\n  updateMentorshipRequestStatus(id: number, status: string, mentorResponse?: string): Promise<MentorshipRequest | undefined>;\n\n  // Mentor conversation methods\n  getMentorConversations(mentorshipRequestId: number): Promise<MentorConversation[]>;\n  createMentorConversation(conversation: InsertMentorConversation): Promise<MentorConversation>;\n  markMessageAsRead(id: number): Promise<MentorConversation | undefined>;\n\n  // Mentorship session methods\n  getMentorshipSessions(mentorshipRequestId: number): Promise<MentorshipSession[]>;\n  getMentorshipSession(id: number): Promise<MentorshipSession | undefined>;\n  getMentorshipSessionsByMentor(mentorId: number): Promise<MentorshipSession[]>;\n  getMentorshipSessionsByStudent(studentId: number): Promise<MentorshipSession[]>;\n  createMentorshipSession(session: InsertMentorshipSession): Promise<MentorshipSession>;\n  updateMentorshipSession(id: number, updates: Partial<InsertMentorshipSession>): Promise<MentorshipSession | undefined>;\n\n  // Master role request methods\n  getMasterRoleRequests(): Promise<MasterRoleRequest[]>;\n  getMasterRoleRequest(id: number): Promise<MasterRoleRequest | undefined>;\n  getMasterRoleRequestsByMentor(mentorId: number): Promise<MasterRoleRequest[]>;\n  getMasterRoleRequestsByStatus(status: string): Promise<MasterRoleRequest[]>;\n  createMasterRoleRequest(request: InsertMasterRoleRequest): Promise<MasterRoleRequest>;\n  updateMasterRoleRequestStatus(id: number, status: string, adminNotes?: string, reviewedBy?: number): Promise<MasterRoleRequest | undefined>;\n  promoteMentorToMaster(mentorId: number): Promise<User | undefined>;\n\n  // Schedule/Timetable methods\n  getSchedules(): Promise<Schedule[]>;\n  getSchedule(id: number): Promise<Schedule | undefined>;\n  getSchedulesByClassroom(classroomId: number): Promise<Schedule[]>;\n  getSchedulesByInstructor(instructorId: number): Promise<Schedule[]>;\n  getSchedulesByDay(dayOfWeek: number): Promise<Schedule[]>;\n  createSchedule(schedule: InsertSchedule): Promise<Schedule>;\n  updateSchedule(id: number, updates: Partial<InsertSchedule>): Promise<Schedule | undefined>;\n  deleteSchedule(id: number): Promise<boolean>;\n  checkInstructorAvailability(instructorId: number, dayOfWeek: number, startTime: string, endTime: string, excludeScheduleId?: number): Promise<boolean>;\n\n  // Schedule enrollment methods\n  getScheduleEnrollments(scheduleId: number): Promise<ScheduleEnrollment[]>;\n  getStudentSchedules(studentId: number): Promise<ScheduleEnrollment[]>;\n  enrollStudentInSchedule(enrollment: InsertScheduleEnrollment): Promise<ScheduleEnrollment>;\n  unenrollStudentFromSchedule(scheduleId: number, studentId: number): Promise<boolean>;\n\n  // Schedule notification methods\n  getScheduleNotifications(userId: number): Promise<ScheduleNotification[]>;\n  createScheduleNotification(notification: InsertScheduleNotification): Promise<ScheduleNotification>;\n  markNotificationAsRead(id: number): Promise<ScheduleNotification | undefined>;\n\n  // Schedule conflict methods\n  getScheduleConflicts(instructorId?: number): Promise<ScheduleConflict[]>;\n  createScheduleConflict(conflict: InsertScheduleConflict): Promise<ScheduleConflict>;\n  resolveScheduleConflict(id: number): Promise<ScheduleConflict | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getAllUsers(role?: string): Promise<User[]> {\n    if (role) {\n      return await db.select().from(users).where(eq(users.role, role));\n    }\n    return await db.select().from(users);\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Course methods\n  async getCourses(): Promise<Course[]> {\n    try {\n      // Direct SQL query to avoid schema mismatch issues\n      const result = await db.execute(sql`SELECT * FROM courses WHERE is_active = true ORDER BY created_at DESC`);\n      return result.rows as Course[];\n    } catch (error) {\n      console.error(\"Error in getCourses:\", error);\n      // Final fallback\n      const result = await db.execute(sql`SELECT * FROM courses`);\n      return result.rows as Course[];\n    }\n  }\n\n  async getCourse(id: number): Promise<Course | undefined> {\n    const [course] = await db.select().from(courses).where(eq(courses.id, id));\n    return course || undefined;\n  }\n\n  async getCoursesByCategory(category: string): Promise<Course[]> {\n    return await db.select().from(courses).where(and(eq(courses.category, category), eq(courses.isActive, true)));\n  }\n\n  async getCoursesByMentor(mentorId: number): Promise<Course[]> {\n    return await db.select().from(courses).where(eq(courses.mentorId, mentorId));\n  }\n\n  async createCourse(insertCourse: InsertCourse): Promise<Course> {\n    const [course] = await db\n      .insert(courses)\n      .values(insertCourse)\n      .returning();\n    return course;\n  }\n\n  async updateCourse(id: number, updates: Partial<InsertCourse>): Promise<Course | undefined> {\n    const [course] = await db\n      .update(courses)\n      .set(updates)\n      .where(eq(courses.id, id))\n      .returning();\n    return course || undefined;\n  }\n\n  async getCoursesByStatus(status: string): Promise<Course[]> {\n    // For now, return all active courses since status column doesn't exist in database\n    return await db.select().from(courses).where(eq(courses.isActive, true));\n  }\n\n  async getCoursesForApproval(): Promise<Course[]> {\n    // For now, return empty array since status column doesn't exist in database\n    return [];\n  }\n\n  async getPublishedCourses(): Promise<Course[]> {\n    return await db.select().from(courses).where(eq(courses.isActive, true));\n  }\n\n  async updateCourseStatus(id: number, status: string, adminNotes?: string, reviewedBy?: number): Promise<Course | undefined> {\n    // For now, only update isActive since status column doesn't exist in database\n    const updates: any = { isActive: status !== \"rejected\" };\n\n    const [course] = await db\n      .update(courses)\n      .set(updates)\n      .where(eq(courses.id, id))\n      .returning();\n    return course || undefined;\n  }\n\n  async approveCourse(id: number, adminId: number, adminNotes?: string): Promise<Course | undefined> {\n    return this.updateCourseStatus(id, \"approved\", adminNotes, adminId);\n  }\n\n  async rejectCourse(id: number, adminId: number, adminNotes?: string): Promise<Course | undefined> {\n    return this.updateCourseStatus(id, \"rejected\", adminNotes, adminId);\n  }\n\n  async deleteCourse(id: number): Promise<boolean> {\n    try {\n      await db.update(courses).set({ isActive: false }).where(eq(courses.id, id));\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Classroom methods\n  async getClassrooms(): Promise<Classroom[]> {\n    return await db.select().from(classrooms).where(eq(classrooms.isActive, true));\n  }\n\n  async getClassroom(id: number): Promise<Classroom | undefined> {\n    const [classroom] = await db.select().from(classrooms).where(eq(classrooms.id, id));\n    return classroom || undefined;\n  }\n\n  async getClassroomBySlug(slug: string): Promise<Classroom | undefined> {\n    const [classroom] = await db.select().from(classrooms).where(eq(classrooms.customSlug, slug));\n    return classroom || undefined;\n  }\n\n  async getPublicClassrooms(): Promise<Classroom[]> {\n    return await db.select().from(classrooms)\n      .where(and(eq(classrooms.isActive, true), eq(classrooms.isPublic, true)));\n  }\n\n  async getClassroomsByMaster(masterId: number): Promise<Classroom[]> {\n    return await db.select().from(classrooms).where(eq(classrooms.masterId, masterId));\n  }\n\n  async createClassroom(insertClassroom: InsertClassroom): Promise<Classroom> {\n    const [classroom] = await db\n      .insert(classrooms)\n      .values(insertClassroom)\n      .returning();\n    return classroom;\n  }\n\n  async updateClassroom(id: number, updates: Partial<InsertClassroom>): Promise<Classroom | undefined> {\n    const [classroom] = await db\n      .update(classrooms)\n      .set(updates)\n      .where(eq(classrooms.id, id))\n      .returning();\n    return classroom || undefined;\n  }\n\n  // Enrollment methods\n  async getEnrollmentsByUser(userId: number): Promise<Enrollment[]> {\n    return await db.select().from(enrollments).where(eq(enrollments.userId, userId));\n  }\n\n  async getEnrollmentsByCourse(courseId: number): Promise<Enrollment[]> {\n    return await db.select().from(enrollments).where(eq(enrollments.courseId, courseId));\n  }\n\n  async getEnrollment(userId: number, courseId: number): Promise<Enrollment | undefined> {\n    const [enrollment] = await db.select().from(enrollments).where(\n      and(eq(enrollments.userId, userId), eq(enrollments.courseId, courseId))\n    );\n    return enrollment || undefined;\n  }\n\n  async createEnrollment(insertEnrollment: InsertEnrollment): Promise<Enrollment> {\n    const [enrollment] = await db\n      .insert(enrollments)\n      .values(insertEnrollment)\n      .returning();\n    return enrollment;\n  }\n\n  async updateEnrollmentProgress(id: number, progress: number): Promise<Enrollment | undefined> {\n    const [enrollment] = await db\n      .update(enrollments)\n      .set({ progress, lastAccessedAt: new Date() })\n      .where(eq(enrollments.id, id))\n      .returning();\n    return enrollment || undefined;\n  }\n\n  async updateEnrollmentStatus(id: number, status: string): Promise<Enrollment | undefined> {\n    const updates: any = { status };\n    if (status === \"completed\") {\n      updates.completedAt = new Date();\n      updates.progress = 100;\n    }\n\n    const [enrollment] = await db\n      .update(enrollments)\n      .set(updates)\n      .where(eq(enrollments.id, id))\n      .returning();\n    return enrollment || undefined;\n  }\n\n  async completeEnrollment(id: number): Promise<Enrollment | undefined> {\n    return this.updateEnrollmentStatus(id, \"completed\");\n  }\n\n  async getEnrollmentsByStatus(status: string): Promise<Enrollment[]> {\n    return await db.select().from(enrollments).where(eq(enrollments.status, status));\n  }\n\n  // Course waitlist methods\n  async getCourseWaitlist(courseId: number): Promise<CourseWaitlist[]> {\n    return await db.select().from(courseWaitlist)\n      .where(eq(courseWaitlist.courseId, courseId))\n      .orderBy(courseWaitlist.priority, courseWaitlist.joinedWaitlistAt);\n  }\n\n  async getUserWaitlistEntries(userId: number): Promise<CourseWaitlist[]> {\n    return await db.select().from(courseWaitlist).where(eq(courseWaitlist.userId, userId));\n  }\n\n  async addToWaitlist(waitlistEntry: InsertCourseWaitlist): Promise<CourseWaitlist> {\n    const [entry] = await db\n      .insert(courseWaitlist)\n      .values(waitlistEntry)\n      .returning();\n    return entry;\n  }\n\n  async removeFromWaitlist(userId: number, courseId: number): Promise<boolean> {\n    try {\n      await db.delete(courseWaitlist).where(\n        and(eq(courseWaitlist.userId, userId), eq(courseWaitlist.courseId, courseId))\n      );\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async notifyWaitlistUsers(courseId: number, count: number): Promise<CourseWaitlist[]> {\n    const waitlistUsers = await db.select().from(courseWaitlist)\n      .where(and(eq(courseWaitlist.courseId, courseId), eq(courseWaitlist.status, \"waiting\")))\n      .orderBy(courseWaitlist.priority, courseWaitlist.joinedWaitlistAt)\n      .limit(count);\n\n    if (waitlistUsers.length > 0) {\n      const ids = waitlistUsers.map(u => u.id);\n      await db.update(courseWaitlist)\n        .set({ status: \"notified\", notifiedAt: new Date() })\n        .where(inArray(courseWaitlist.id, ids));\n    }\n\n    return waitlistUsers;\n  }\n\n  // Course analytics methods\n  async getCourseAnalytics(courseId: number): Promise<CourseAnalytics[]> {\n    return await db.select().from(courseAnalytics)\n      .where(eq(courseAnalytics.courseId, courseId))\n      .orderBy(desc(courseAnalytics.date));\n  }\n\n  async createCourseAnalytics(analytics: InsertCourseAnalytics): Promise<CourseAnalytics> {\n    const [analyticsRecord] = await db\n      .insert(courseAnalytics)\n      .values(analytics)\n      .returning();\n    return analyticsRecord;\n  }\n\n  async updateCourseAnalytics(courseId: number, date: Date, updates: Partial<InsertCourseAnalytics>): Promise<CourseAnalytics | undefined> {\n    const [analyticsRecord] = await db\n      .update(courseAnalytics)\n      .set(updates)\n      .where(and(eq(courseAnalytics.courseId, courseId), eq(courseAnalytics.date, date)))\n      .returning();\n    return analyticsRecord || undefined;\n  }\n\n  async getCourseAnalyticsSummary(courseId: number, startDate?: Date, endDate?: Date): Promise<any> {\n    let query = db.select().from(courseAnalytics).where(eq(courseAnalytics.courseId, courseId));\n    \n    if (startDate && endDate) {\n      // Add date range filtering logic here if needed\n    }\n\n    const analytics = await query;\n    \n    return {\n      totalEnrollments: analytics.reduce((sum, a) => sum + (a.newEnrollments || 0), 0),\n      totalCompletions: analytics.reduce((sum, a) => sum + (a.completions || 0), 0),\n      totalRevenue: analytics.reduce((sum, a) => sum + parseFloat(a.totalRevenue || \"0\"), 0),\n      averageRating: analytics.length > 0 ? \n        analytics.reduce((sum, a) => sum + parseFloat(a.averageRating || \"0\"), 0) / analytics.length : 0,\n      totalLessonsCompleted: analytics.reduce((sum, a) => sum + (a.lessonsCompleted || 0), 0),\n    };\n  }\n\n  // Classroom membership methods\n  async getClassroomMembershipsByUser(userId: number): Promise<ClassroomMembership[]> {\n    return await db.select().from(classroomMemberships).where(eq(classroomMemberships.userId, userId));\n  }\n\n  async getClassroomMembershipsByClassroom(classroomId: number): Promise<ClassroomMembership[]> {\n    return await db.select().from(classroomMemberships).where(eq(classroomMemberships.classroomId, classroomId));\n  }\n\n  async getClassroomMembershipsByClassroomAndRole(classroomId: number, role: string): Promise<ClassroomMembership[]> {\n    return await db.select().from(classroomMemberships).where(\n      and(eq(classroomMemberships.classroomId, classroomId), eq(classroomMemberships.role, role))\n    );\n  }\n\n  async createClassroomMembership(insertMembership: InsertClassroomMembership): Promise<ClassroomMembership> {\n    const [membership] = await db\n      .insert(classroomMemberships)\n      .values(insertMembership)\n      .returning();\n    return membership;\n  }\n\n  async getClassroomMembership(userId: number, classroomId: number): Promise<ClassroomMembership | undefined> {\n    const [membership] = await db\n      .select()\n      .from(classroomMemberships)\n      .where(and(eq(classroomMemberships.userId, userId), eq(classroomMemberships.classroomId, classroomId)));\n    return membership || undefined;\n  }\n\n  async getClassroomMembershipRequests(classroomId: number, status?: string): Promise<any[]> {\n    const query = db\n      .select({\n        id: classroomMemberships.id,\n        userId: classroomMemberships.userId,\n        classroomId: classroomMemberships.classroomId,\n        role: classroomMemberships.role,\n        status: classroomMemberships.status,\n        joinedAt: classroomMemberships.joinedAt,\n        username: users.username,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        avatar: users.avatar\n      })\n      .from(classroomMemberships)\n      .innerJoin(users, eq(classroomMemberships.userId, users.id));\n\n    if (status) {\n      return await query\n        .where(and(eq(classroomMemberships.classroomId, classroomId), eq(classroomMemberships.status, status)))\n        .orderBy(desc(classroomMemberships.joinedAt));\n    } else {\n      return await query\n        .where(eq(classroomMemberships.classroomId, classroomId))\n        .orderBy(desc(classroomMemberships.joinedAt));\n    }\n  }\n\n  async updateClassroomMembershipStatus(membershipId: number, status: string, reviewedBy?: number): Promise<ClassroomMembership | undefined> {\n    const [membership] = await db\n      .update(classroomMemberships)\n      .set({ status })\n      .where(eq(classroomMemberships.id, membershipId))\n      .returning();\n    return membership || undefined;\n  }\n\n  // Live session methods\n  async getLiveSessions(): Promise<LiveSession[]> {\n    return await db.select().from(liveSessions).orderBy(desc(liveSessions.scheduledAt));\n  }\n\n  async getLiveSession(id: number): Promise<LiveSession | undefined> {\n    const [session] = await db.select().from(liveSessions).where(eq(liveSessions.id, id));\n    return session || undefined;\n  }\n\n  async getLiveSessionsByMentor(mentorId: number): Promise<LiveSession[]> {\n    return await db.select().from(liveSessions).where(eq(liveSessions.mentorId, mentorId));\n  }\n\n  async getLiveSessionsByClassroom(classroomId: number): Promise<LiveSession[]> {\n    return await db.select().from(liveSessions).where(eq(liveSessions.classroomId, classroomId));\n  }\n\n  async createLiveSession(insertSession: InsertLiveSession): Promise<LiveSession> {\n    const [session] = await db\n      .insert(liveSessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async updateLiveSession(id: number, updates: Partial<InsertLiveSession>): Promise<LiveSession | undefined> {\n    const [session] = await db\n      .update(liveSessions)\n      .set(updates)\n      .where(eq(liveSessions.id, id))\n      .returning();\n    return session || undefined;\n  }\n\n  // Community post methods\n  async getPosts(): Promise<Post[]> {\n    return await db.select().from(posts).orderBy(desc(posts.createdAt));\n  }\n\n  async getPost(id: number): Promise<Post | undefined> {\n    const [post] = await db.select().from(posts).where(eq(posts.id, id));\n    return post || undefined;\n  }\n\n  async getPostsByUser(userId: number): Promise<Post[]> {\n    return await db.select().from(posts).where(eq(posts.userId, userId));\n  }\n\n  async createPost(insertPost: InsertPost): Promise<Post> {\n    const [post] = await db\n      .insert(posts)\n      .values(insertPost)\n      .returning();\n    return post;\n  }\n\n  async updatePost(id: number, updates: Partial<InsertPost>): Promise<Post | undefined> {\n    const [post] = await db\n      .update(posts)\n      .set(updates)\n      .where(eq(posts.id, id))\n      .returning();\n    return post || undefined;\n  }\n\n  // Learning path methods\n  async getLearningPaths(): Promise<LearningPath[]> {\n    return await db.select().from(learningPaths).orderBy(desc(learningPaths.createdAt));\n  }\n\n  async getLearningPath(id: number): Promise<LearningPath | undefined> {\n    const [path] = await db.select().from(learningPaths).where(eq(learningPaths.id, id));\n    return path || undefined;\n  }\n\n  async getLearningPathsByInstructor(instructorId: number): Promise<LearningPath[]> {\n    return await db.select().from(learningPaths).where(eq(learningPaths.instructorId, instructorId));\n  }\n\n  async createLearningPath(insertPath: InsertLearningPath): Promise<LearningPath> {\n    const [path] = await db\n      .insert(learningPaths)\n      .values(insertPath)\n      .returning();\n    return path;\n  }\n\n  // Practice group methods\n  async getPracticeGroups(): Promise<PracticeGroup[]> {\n    return await db.select().from(practiceGroups).orderBy(desc(practiceGroups.createdAt));\n  }\n\n  async getPracticeGroup(id: number): Promise<PracticeGroup | undefined> {\n    const [group] = await db.select().from(practiceGroups).where(eq(practiceGroups.id, id));\n    return group || undefined;\n  }\n\n  async getPracticeGroupsByUser(userId: number): Promise<PracticeGroup[]> {\n    return await db.select().from(practiceGroups).where(eq(practiceGroups.createdById, userId));\n  }\n\n  async createPracticeGroup(insertGroup: InsertPracticeGroup): Promise<PracticeGroup> {\n    const [group] = await db\n      .insert(practiceGroups)\n      .values(insertGroup)\n      .returning();\n    return group;\n  }\n\n  // Forum methods\n  async getForumCategories(): Promise<ForumCategory[]> {\n    return await db.select().from(forumCategories).orderBy(forumCategories.sortOrder);\n  }\n\n  async getForumTopics(): Promise<ForumTopic[]> {\n    return await db.select().from(forumTopics).orderBy(desc(forumTopics.createdAt));\n  }\n\n  async getForumTopicsByCategory(categoryId: number): Promise<ForumTopic[]> {\n    return await db.select().from(forumTopics).where(eq(forumTopics.categoryId, categoryId));\n  }\n\n  async createForumCategory(insertCategory: InsertForumCategory): Promise<ForumCategory> {\n    const [category] = await db\n      .insert(forumCategories)\n      .values(insertCategory)\n      .returning();\n    return category;\n  }\n\n  async createForumTopic(insertTopic: InsertForumTopic): Promise<ForumTopic> {\n    const [topic] = await db\n      .insert(forumTopics)\n      .values(insertTopic)\n      .returning();\n    return topic;\n  }\n\n  // Event methods\n  async getEvents(): Promise<Event[]> {\n    return await db.select().from(events).orderBy(events.startDate);\n  }\n\n  async getEvent(id: number): Promise<Event | undefined> {\n    const [event] = await db.select().from(events).where(eq(events.id, id));\n    return event || undefined;\n  }\n\n  async getEventsByInstructor(instructorId: number): Promise<Event[]> {\n    return await db.select().from(events).where(eq(events.instructorId, instructorId));\n  }\n\n  async getUpcomingEvents(): Promise<Event[]> {\n    return await db.select().from(events)\n      .where(eq(events.status, 'upcoming'))\n      .orderBy(events.startDate);\n  }\n\n  async createEvent(insertEvent: InsertEvent): Promise<Event> {\n    const [event] = await db\n      .insert(events)\n      .values(insertEvent)\n      .returning();\n    return event;\n  }\n\n  // Mentor profile methods\n  async getMentorProfiles(): Promise<any[]> {\n    return await db\n      .select({\n        id: mentorProfiles.id,\n        userId: mentorProfiles.userId,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        specialization: mentorProfiles.specialization,\n        experience: mentorProfiles.experience,\n        hourlyRate: mentorProfiles.hourlyRate,\n        location: mentorProfiles.location,\n        languages: mentorProfiles.languages,\n        badges: mentorProfiles.badges,\n        bio: mentorProfiles.bio,\n        availability: mentorProfiles.availability,\n        totalStudents: mentorProfiles.totalStudents,\n        totalReviews: mentorProfiles.totalReviews,\n        averageRating: mentorProfiles.averageRating,\n        nextAvailableSession: mentorProfiles.nextAvailableSession,\n        isVerified: mentorProfiles.isVerified,\n        createdAt: mentorProfiles.createdAt,\n      })\n      .from(mentorProfiles)\n      .innerJoin(users, eq(mentorProfiles.userId, users.id))\n      .orderBy(desc(mentorProfiles.averageRating));\n  }\n\n  async getMentorProfile(userId: number): Promise<MentorProfile | undefined> {\n    const [profile] = await db.select().from(mentorProfiles).where(eq(mentorProfiles.userId, userId));\n    return profile || undefined;\n  }\n\n  async getMentorProfilesBySpecialization(specialization: string): Promise<MentorProfile[]> {\n    return await db.select().from(mentorProfiles).where(eq(mentorProfiles.specialization, specialization));\n  }\n\n  async createMentorProfile(insertProfile: InsertMentorProfile): Promise<MentorProfile> {\n    const [profile] = await db\n      .insert(mentorProfiles)\n      .values(insertProfile)\n      .returning();\n    return profile;\n  }\n\n  // Course review methods\n  async getCourseReviews(courseId: number): Promise<CourseReview[]> {\n    return await db.select().from(courseReviews)\n      .where(eq(courseReviews.courseId, courseId))\n      .orderBy(desc(courseReviews.createdAt));\n  }\n\n  async getCourseReviewsByUser(userId: number): Promise<CourseReview[]> {\n    return await db.select().from(courseReviews).where(eq(courseReviews.userId, userId));\n  }\n\n  async createCourseReview(insertReview: InsertCourseReview): Promise<CourseReview> {\n    const [review] = await db\n      .insert(courseReviews)\n      .values(insertReview)\n      .returning();\n    return review;\n  }\n\n  // Achievement methods\n  async getAchievements(): Promise<Achievement[]> {\n    return await db.select().from(achievements).where(eq(achievements.isActive, true));\n  }\n\n  async getUserAchievements(userId: number): Promise<UserAchievement[]> {\n    return await db.select().from(userAchievements)\n      .where(eq(userAchievements.userId, userId))\n      .orderBy(desc(userAchievements.earnedAt));\n  }\n\n  async createUserAchievement(insertAchievement: InsertUserAchievement): Promise<UserAchievement> {\n    const [achievement] = await db\n      .insert(userAchievements)\n      .values(insertAchievement)\n      .returning();\n    return achievement;\n  }\n\n  // Authentication methods\n  async authenticateUser(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user) return null;\n    \n    const isValidPassword = await this.verifyPassword(password, user.password);\n    if (!isValidPassword) return null;\n    \n    return user;\n  }\n\n  async registerUser(userData: InsertUser, hashedPassword: string): Promise<User> {\n    const userWithHashedPassword = {\n      ...userData,\n      password: hashedPassword\n    };\n    return await this.createUser(userWithHashedPassword);\n  }\n\n  async hashPassword(password: string): Promise<string> {\n    const saltRounds = 12;\n    return await bcrypt.hash(password, saltRounds);\n  }\n\n  async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n    return await bcrypt.compare(password, hashedPassword);\n  }\n\n  // Mentor application methods\n  async getMentorApplications(): Promise<MentorApplication[]> {\n    return await db.select().from(mentorApplications).orderBy(desc(mentorApplications.createdAt));\n  }\n\n  async getMentorApplication(id: number): Promise<MentorApplication | undefined> {\n    const [application] = await db.select().from(mentorApplications).where(eq(mentorApplications.id, id));\n    return application || undefined;\n  }\n\n  async getMentorApplicationsByStatus(status: string): Promise<MentorApplication[]> {\n    return await db.select().from(mentorApplications)\n      .where(eq(mentorApplications.status, status))\n      .orderBy(desc(mentorApplications.createdAt));\n  }\n\n  async createMentorApplication(insertApplication: InsertMentorApplication): Promise<MentorApplication> {\n    const [application] = await db\n      .insert(mentorApplications)\n      .values(insertApplication)\n      .returning();\n    return application;\n  }\n\n  async updateMentorApplicationStatus(\n    id: number, \n    status: string, \n    adminNotes?: string, \n    reviewedBy?: number\n  ): Promise<MentorApplication | undefined> {\n    const updates: any = { \n      status,\n      reviewedAt: new Date()\n    };\n    \n    if (adminNotes) updates.adminNotes = adminNotes;\n    if (reviewedBy) updates.reviewedBy = reviewedBy;\n\n    const [application] = await db\n      .update(mentorApplications)\n      .set(updates)\n      .where(eq(mentorApplications.id, id))\n      .returning();\n    return application || undefined;\n  }\n\n  // Mentorship request methods\n  async getMentorshipRequests(): Promise<MentorshipRequest[]> {\n    return await db.select().from(mentorshipRequests).orderBy(desc(mentorshipRequests.createdAt));\n  }\n\n  async getMentorshipRequest(id: number): Promise<MentorshipRequest | undefined> {\n    const [request] = await db.select().from(mentorshipRequests).where(eq(mentorshipRequests.id, id));\n    return request || undefined;\n  }\n\n  async getMentorshipRequestsByStudent(studentId: number): Promise<MentorshipRequest[]> {\n    return await db.select().from(mentorshipRequests)\n      .where(eq(mentorshipRequests.studentId, studentId))\n      .orderBy(desc(mentorshipRequests.createdAt));\n  }\n\n  async getMentorshipRequestsByMentor(mentorId: number): Promise<any[]> {\n    return await db.select({\n      id: mentorshipRequests.id,\n      studentId: mentorshipRequests.studentId,\n      mentorId: mentorshipRequests.mentorId,\n      message: mentorshipRequests.message,\n      status: mentorshipRequests.status,\n      acceptedAt: mentorshipRequests.acceptedAt,\n      rejectedAt: mentorshipRequests.rejectedAt,\n      mentorResponse: mentorshipRequests.mentorResponse,\n      createdAt: mentorshipRequests.createdAt,\n      studentInfo: {\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n      }\n    }).from(mentorshipRequests)\n      .innerJoin(users, eq(mentorshipRequests.studentId, users.id))\n      .where(eq(mentorshipRequests.mentorId, mentorId))\n      .orderBy(desc(mentorshipRequests.createdAt));\n  }\n\n  async getMentorshipRequestsByStatus(status: string): Promise<MentorshipRequest[]> {\n    return await db.select().from(mentorshipRequests)\n      .where(eq(mentorshipRequests.status, status))\n      .orderBy(desc(mentorshipRequests.createdAt));\n  }\n\n  async createMentorshipRequest(insertRequest: InsertMentorshipRequest): Promise<MentorshipRequest> {\n    const [request] = await db\n      .insert(mentorshipRequests)\n      .values(insertRequest)\n      .returning();\n    return request;\n  }\n\n  async updateMentorshipRequestStatus(\n    id: number, \n    status: string, \n    mentorResponse?: string\n  ): Promise<MentorshipRequest | undefined> {\n    const updates: any = { status };\n    \n    if (status === 'accepted') {\n      updates.acceptedAt = new Date();\n    } else if (status === 'rejected') {\n      updates.rejectedAt = new Date();\n    }\n    \n    if (mentorResponse) {\n      updates.mentorResponse = mentorResponse;\n    }\n\n    const [request] = await db\n      .update(mentorshipRequests)\n      .set(updates)\n      .where(eq(mentorshipRequests.id, id))\n      .returning();\n    return request || undefined;\n  }\n\n  // Mentor conversation methods\n  async getMentorConversations(mentorshipRequestId: number): Promise<MentorConversation[]> {\n    return await db.select().from(mentorConversations)\n      .where(eq(mentorConversations.mentorshipRequestId, mentorshipRequestId))\n      .orderBy(mentorConversations.createdAt);\n  }\n\n  async createMentorConversation(insertConversation: InsertMentorConversation): Promise<MentorConversation> {\n    const [conversation] = await db\n      .insert(mentorConversations)\n      .values(insertConversation)\n      .returning();\n    return conversation;\n  }\n\n  async markMessageAsRead(id: number): Promise<MentorConversation | undefined> {\n    const [conversation] = await db\n      .update(mentorConversations)\n      .set({ \n        isRead: true,\n        readAt: new Date()\n      })\n      .where(eq(mentorConversations.id, id))\n      .returning();\n    return conversation || undefined;\n  }\n\n  // Mentorship session methods\n  async getMentorshipSessions(mentorshipRequestId: number): Promise<MentorshipSession[]> {\n    return await db.select().from(mentorshipSessions)\n      .where(eq(mentorshipSessions.mentorshipRequestId, mentorshipRequestId))\n      .orderBy(mentorshipSessions.scheduledAt);\n  }\n\n  async getMentorshipSession(id: number): Promise<MentorshipSession | undefined> {\n    const [session] = await db.select().from(mentorshipSessions).where(eq(mentorshipSessions.id, id));\n    return session || undefined;\n  }\n\n  async getMentorshipSessionsByMentor(mentorId: number): Promise<MentorshipSession[]> {\n    const results = await db.select({\n      id: mentorshipSessions.id,\n      mentorshipRequestId: mentorshipSessions.mentorshipRequestId,\n      title: mentorshipSessions.title,\n      description: mentorshipSessions.description,\n      scheduledAt: mentorshipSessions.scheduledAt,\n      duration: mentorshipSessions.duration,\n      status: mentorshipSessions.status,\n      meetingLink: mentorshipSessions.meetingLink,\n      recordingUrl: mentorshipSessions.recordingUrl,\n      mentorNotes: mentorshipSessions.mentorNotes,\n      studentNotes: mentorshipSessions.studentNotes,\n      sessionFeedback: mentorshipSessions.sessionFeedback,\n      rating: mentorshipSessions.rating,\n      createdAt: mentorshipSessions.createdAt,\n    })\n      .from(mentorshipSessions)\n      .innerJoin(mentorshipRequests, eq(mentorshipSessions.mentorshipRequestId, mentorshipRequests.id))\n      .where(eq(mentorshipRequests.mentorId, mentorId))\n      .orderBy(mentorshipSessions.scheduledAt);\n    return results;\n  }\n\n  async getMentorshipSessionsByStudent(studentId: number): Promise<MentorshipSession[]> {\n    const results = await db.select({\n      id: mentorshipSessions.id,\n      mentorshipRequestId: mentorshipSessions.mentorshipRequestId,\n      title: mentorshipSessions.title,\n      description: mentorshipSessions.description,\n      scheduledAt: mentorshipSessions.scheduledAt,\n      duration: mentorshipSessions.duration,\n      status: mentorshipSessions.status,\n      meetingLink: mentorshipSessions.meetingLink,\n      recordingUrl: mentorshipSessions.recordingUrl,\n      mentorNotes: mentorshipSessions.mentorNotes,\n      studentNotes: mentorshipSessions.studentNotes,\n      sessionFeedback: mentorshipSessions.sessionFeedback,\n      rating: mentorshipSessions.rating,\n      createdAt: mentorshipSessions.createdAt,\n    })\n      .from(mentorshipSessions)\n      .innerJoin(mentorshipRequests, eq(mentorshipSessions.mentorshipRequestId, mentorshipRequests.id))\n      .where(eq(mentorshipRequests.studentId, studentId))\n      .orderBy(mentorshipSessions.scheduledAt);\n    return results;\n  }\n\n  async createMentorshipSession(insertSession: InsertMentorshipSession): Promise<MentorshipSession> {\n    const [session] = await db\n      .insert(mentorshipSessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async updateMentorshipSession(\n    id: number, \n    updates: Partial<InsertMentorshipSession>\n  ): Promise<MentorshipSession | undefined> {\n    const [session] = await db\n      .update(mentorshipSessions)\n      .set(updates)\n      .where(eq(mentorshipSessions.id, id))\n      .returning();\n    return session || undefined;\n  }\n\n  // Master role request methods\n  async getMasterRoleRequests(): Promise<MasterRoleRequest[]> {\n    return await db.select().from(masterRoleRequests).orderBy(desc(masterRoleRequests.createdAt));\n  }\n\n  async getMasterRoleRequest(id: number): Promise<MasterRoleRequest | undefined> {\n    const [request] = await db.select().from(masterRoleRequests).where(eq(masterRoleRequests.id, id));\n    return request || undefined;\n  }\n\n  async getMasterRoleRequestsByMentor(mentorId: number): Promise<MasterRoleRequest[]> {\n    return await db.select().from(masterRoleRequests).where(eq(masterRoleRequests.mentorId, mentorId)).orderBy(desc(masterRoleRequests.createdAt));\n  }\n\n  async getMasterRoleRequestsByStatus(status: string): Promise<MasterRoleRequest[]> {\n    return await db.select().from(masterRoleRequests).where(eq(masterRoleRequests.status, status)).orderBy(desc(masterRoleRequests.createdAt));\n  }\n\n  async createMasterRoleRequest(request: InsertMasterRoleRequest): Promise<MasterRoleRequest> {\n    const [newRequest] = await db.insert(masterRoleRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async updateMasterRoleRequestStatus(\n    id: number, \n    status: string, \n    adminNotes?: string, \n    reviewedBy?: number\n  ): Promise<MasterRoleRequest | undefined> {\n    const updateData: any = {\n      status,\n      reviewedAt: new Date(),\n      ...(adminNotes && { adminNotes }),\n      ...(reviewedBy && { reviewedBy })\n    };\n\n    if (status === 'approved') {\n      updateData.approvedAt = new Date();\n    } else if (status === 'rejected') {\n      updateData.rejectedAt = new Date();\n    }\n\n    const [request] = await db\n      .update(masterRoleRequests)\n      .set(updateData)\n      .where(eq(masterRoleRequests.id, id))\n      .returning();\n    return request || undefined;\n  }\n\n  async promoteMentorToMaster(mentorId: number): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ isMaster: true })\n      .where(eq(users.id, mentorId))\n      .returning();\n    return user || undefined;\n  }\n\n  // Staff request methods\n  async getStaffRequests(): Promise<StaffRequest[]> {\n    return await db.select().from(staffRequests).orderBy(desc(staffRequests.createdAt));\n  }\n\n  async getStaffRequest(id: number): Promise<StaffRequest | undefined> {\n    const [request] = await db.select().from(staffRequests).where(eq(staffRequests.id, id));\n    return request || undefined;\n  }\n\n  async getStaffRequestsByMentor(mentorId: number): Promise<StaffRequest[]> {\n    return await db.select().from(staffRequests).where(eq(staffRequests.mentorId, mentorId)).orderBy(desc(staffRequests.createdAt));\n  }\n\n  async getStaffRequestsByClassroom(classroomId: number): Promise<StaffRequest[]> {\n    return await db.select().from(staffRequests).where(eq(staffRequests.classroomId, classroomId)).orderBy(desc(staffRequests.createdAt));\n  }\n\n  async getStaffRequestsByStatus(status: string): Promise<StaffRequest[]> {\n    return await db.select().from(staffRequests).where(eq(staffRequests.status, status)).orderBy(desc(staffRequests.createdAt));\n  }\n\n  async createStaffRequest(request: InsertStaffRequest): Promise<StaffRequest> {\n    const [newRequest] = await db.insert(staffRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async updateStaffRequestStatus(\n    id: number, \n    status: string, \n    adminNotes?: string, \n    reviewedBy?: number\n  ): Promise<StaffRequest | undefined> {\n    const updateData: any = {\n      status,\n      reviewedAt: new Date(),\n      ...(adminNotes && { adminNotes }),\n      ...(reviewedBy && { reviewedBy })\n    };\n\n    const [request] = await db\n      .update(staffRequests)\n      .set(updateData)\n      .where(eq(staffRequests.id, id))\n      .returning();\n    return request || undefined;\n  }\n\n  async addStaffToClassroom(mentorId: number, classroomId: number): Promise<ClassroomMembership | undefined> {\n    // Check if mentor is already staff in another classroom\n    const existingStaffMembership = await db\n      .select()\n      .from(classroomMemberships)\n      .where(\n        and(\n          eq(classroomMemberships.userId, mentorId),\n          eq(classroomMemberships.role, 'staff'),\n          eq(classroomMemberships.status, 'active')\n        )\n      );\n\n    if (existingStaffMembership.length > 0) {\n      throw new Error('Mentor can only be staff in one classroom at a time');\n    }\n\n    const [membership] = await db\n      .insert(classroomMemberships)\n      .values({\n        userId: mentorId,\n        classroomId: classroomId,\n        role: 'staff',\n        status: 'active'\n      })\n      .returning();\n    return membership || undefined;\n  }\n\n  async getStaffClassroomByMentor(mentorId: number): Promise<any | undefined> {\n    const [membership] = await db\n      .select({\n        classroomId: classroomMemberships.classroomId,\n        classroomTitle: classrooms.title,\n        classroomSubject: classrooms.subject,\n        classroomDescription: classrooms.description,\n        classroomLevel: classrooms.level,\n        classroomMaxStudents: classrooms.maxStudents,\n        masterName: users.firstName,\n        joinedAt: classroomMemberships.joinedAt\n      })\n      .from(classroomMemberships)\n      .innerJoin(classrooms, eq(classroomMemberships.classroomId, classrooms.id))\n      .innerJoin(users, eq(classrooms.masterId, users.id))\n      .where(\n        and(\n          eq(classroomMemberships.userId, mentorId),\n          eq(classroomMemberships.role, 'staff'),\n          eq(classroomMemberships.status, 'active')\n        )\n      );\n    return membership || undefined;\n  }\n\n  // Resignation request methods\n  async getResignationRequests(): Promise<ResignationRequest[]> {\n    return await db.select().from(resignationRequests).orderBy(desc(resignationRequests.createdAt));\n  }\n\n  async getResignationRequestsByMentor(mentorId: number): Promise<ResignationRequest[]> {\n    return await db.select().from(resignationRequests).where(eq(resignationRequests.mentorId, mentorId)).orderBy(desc(resignationRequests.createdAt));\n  }\n\n  async getResignationRequestsByClassroom(classroomId: number): Promise<ResignationRequest[]> {\n    return await db.select().from(resignationRequests).where(eq(resignationRequests.classroomId, classroomId)).orderBy(desc(resignationRequests.createdAt));\n  }\n\n  async getResignationRequestsByStatus(status: string): Promise<ResignationRequest[]> {\n    return await db.select().from(resignationRequests).where(eq(resignationRequests.status, status)).orderBy(desc(resignationRequests.createdAt));\n  }\n\n  async createResignationRequest(request: InsertResignationRequest): Promise<ResignationRequest> {\n    const [newRequest] = await db.insert(resignationRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async updateResignationRequestStatus(\n    id: number, \n    status: string, \n    masterNotes?: string, \n    reviewedBy?: number\n  ): Promise<ResignationRequest | undefined> {\n    const updateData: any = {\n      status,\n      reviewedAt: new Date(),\n      ...(masterNotes && { masterNotes }),\n      ...(reviewedBy && { reviewedBy })\n    };\n\n    const [request] = await db\n      .update(resignationRequests)\n      .set(updateData)\n      .where(eq(resignationRequests.id, id))\n      .returning();\n    return request || undefined;\n  }\n\n  async removeStaffFromClassroom(mentorId: number, classroomId: number): Promise<boolean> {\n    const result = await db\n      .delete(classroomMemberships)\n      .where(\n        and(\n          eq(classroomMemberships.userId, mentorId),\n          eq(classroomMemberships.classroomId, classroomId),\n          eq(classroomMemberships.role, 'staff')\n        )\n      );\n    return true;\n  }\n\n  // Schedule/Timetable implementation methods\n  async getSchedules(): Promise<Schedule[]> {\n    return await db.select().from(schedules).orderBy(schedules.dayOfWeek, schedules.startTime);\n  }\n\n  async getSchedule(id: number): Promise<Schedule | undefined> {\n    const [schedule] = await db.select().from(schedules).where(eq(schedules.id, id));\n    return schedule || undefined;\n  }\n\n  async getSchedulesByClassroom(classroomId: number): Promise<Schedule[]> {\n    return await db.select().from(schedules)\n      .where(eq(schedules.classroomId, classroomId))\n      .orderBy(schedules.dayOfWeek, schedules.startTime);\n  }\n\n  async getSchedulesByInstructor(instructorId: number): Promise<Schedule[]> {\n    return await db.select().from(schedules)\n      .where(eq(schedules.instructorId, instructorId))\n      .orderBy(schedules.dayOfWeek, schedules.startTime);\n  }\n\n  async getSchedulesByDay(dayOfWeek: number): Promise<Schedule[]> {\n    return await db.select().from(schedules)\n      .where(eq(schedules.dayOfWeek, dayOfWeek))\n      .orderBy(schedules.startTime);\n  }\n\n  async createSchedule(schedule: InsertSchedule): Promise<Schedule> {\n    // Check for conflicts before creating\n    const hasConflict = await this.checkInstructorAvailability(\n      schedule.instructorId,\n      schedule.dayOfWeek,\n      schedule.startTime,\n      schedule.endTime\n    );\n    \n    if (!hasConflict) {\n      throw new Error('Instructor has a scheduling conflict at this time');\n    }\n\n    const [newSchedule] = await db\n      .insert(schedules)\n      .values(schedule)\n      .returning();\n    return newSchedule;\n  }\n\n  async updateSchedule(id: number, updates: Partial<InsertSchedule>): Promise<Schedule | undefined> {\n    // Check for conflicts if time or instructor is being updated\n    if (updates.instructorId || updates.dayOfWeek || updates.startTime || updates.endTime) {\n      const currentSchedule = await this.getSchedule(id);\n      if (!currentSchedule) return undefined;\n\n      const instructorId = updates.instructorId || currentSchedule.instructorId;\n      const dayOfWeek = updates.dayOfWeek || currentSchedule.dayOfWeek;\n      const startTime = updates.startTime || currentSchedule.startTime;\n      const endTime = updates.endTime || currentSchedule.endTime;\n\n      const hasConflict = await this.checkInstructorAvailability(\n        instructorId,\n        dayOfWeek,\n        startTime,\n        endTime,\n        id\n      );\n\n      if (!hasConflict) {\n        throw new Error('Instructor has a scheduling conflict at this time');\n      }\n    }\n\n    const [schedule] = await db\n      .update(schedules)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(schedules.id, id))\n      .returning();\n    return schedule || undefined;\n  }\n\n  async deleteSchedule(id: number): Promise<boolean> {\n    await db.delete(scheduleEnrollments).where(eq(scheduleEnrollments.scheduleId, id));\n    await db.delete(schedules).where(eq(schedules.id, id));\n    return true;\n  }\n\n  async checkInstructorAvailability(\n    instructorId: number,\n    dayOfWeek: number,\n    startTime: string,\n    endTime: string,\n    excludeScheduleId?: number\n  ): Promise<boolean> {\n    const query = db.select().from(schedules).where(\n      and(\n        eq(schedules.instructorId, instructorId),\n        eq(schedules.dayOfWeek, dayOfWeek),\n        eq(schedules.isActive, true),\n        excludeScheduleId ? ne(schedules.id, excludeScheduleId) : undefined\n      )\n    );\n\n    const existingSchedules = await query;\n\n    // Check for time overlap\n    for (const schedule of existingSchedules) {\n      if (\n        (startTime >= schedule.startTime && startTime < schedule.endTime) ||\n        (endTime > schedule.startTime && endTime <= schedule.endTime) ||\n        (startTime <= schedule.startTime && endTime >= schedule.endTime)\n      ) {\n        return false; // Conflict found\n      }\n    }\n\n    return true; // No conflict\n  }\n\n  // Schedule enrollment methods\n  async getScheduleEnrollments(scheduleId: number): Promise<ScheduleEnrollment[]> {\n    return await db.select().from(scheduleEnrollments)\n      .where(eq(scheduleEnrollments.scheduleId, scheduleId))\n      .orderBy(scheduleEnrollments.enrolledAt);\n  }\n\n  async getStudentSchedules(studentId: number): Promise<ScheduleEnrollment[]> {\n    return await db.select().from(scheduleEnrollments)\n      .where(eq(scheduleEnrollments.studentId, studentId))\n      .orderBy(scheduleEnrollments.enrolledAt);\n  }\n\n  async enrollStudentInSchedule(enrollment: InsertScheduleEnrollment): Promise<ScheduleEnrollment> {\n    const [newEnrollment] = await db\n      .insert(scheduleEnrollments)\n      .values(enrollment)\n      .returning();\n    return newEnrollment;\n  }\n\n  async unenrollStudentFromSchedule(scheduleId: number, studentId: number): Promise<boolean> {\n    await db.delete(scheduleEnrollments).where(\n      and(\n        eq(scheduleEnrollments.scheduleId, scheduleId),\n        eq(scheduleEnrollments.studentId, studentId)\n      )\n    );\n    return true;\n  }\n\n  // Schedule notification methods\n  async getScheduleNotifications(userId: number): Promise<ScheduleNotification[]> {\n    return await db.select().from(scheduleNotifications)\n      .where(eq(scheduleNotifications.userId, userId))\n      .orderBy(desc(scheduleNotifications.sentAt));\n  }\n\n  async createScheduleNotification(notification: InsertScheduleNotification): Promise<ScheduleNotification> {\n    const [newNotification] = await db\n      .insert(scheduleNotifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: number): Promise<ScheduleNotification | undefined> {\n    const [notification] = await db\n      .update(scheduleNotifications)\n      .set({ isRead: true })\n      .where(eq(scheduleNotifications.id, id))\n      .returning();\n    return notification || undefined;\n  }\n\n  // Schedule conflict methods\n  async getScheduleConflicts(instructorId?: number): Promise<ScheduleConflict[]> {\n    const query = instructorId\n      ? db.select().from(scheduleConflicts).where(eq(scheduleConflicts.instructorId, instructorId))\n      : db.select().from(scheduleConflicts);\n      \n    return await query.orderBy(desc(scheduleConflicts.createdAt));\n  }\n\n  async createScheduleConflict(conflict: InsertScheduleConflict): Promise<ScheduleConflict> {\n    const [newConflict] = await db\n      .insert(scheduleConflicts)\n      .values(conflict)\n      .returning();\n    return newConflict;\n  }\n\n  async resolveScheduleConflict(id: number): Promise<ScheduleConflict | undefined> {\n    const [conflict] = await db\n      .update(scheduleConflicts)\n      .set({ resolvedAt: new Date() })\n      .where(eq(scheduleConflicts.id, id))\n      .returning();\n    return conflict || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":59605},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, numeric, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Users table with role-based access\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  role: text(\"role\").notNull().default(\"student\"), // student, mentor, admin\n  isMaster: boolean(\"is_master\").default(false), // true if mentor has been promoted to master\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  avatar: text(\"avatar\"),\n  bio: text(\"bio\"),\n  xp: integer(\"xp\").default(0),\n  level: integer(\"level\").default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Courses table\nexport const courses = pgTable(\"courses\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // piano, guitar, vocals, etc.\n  level: text(\"level\").notNull(), // beginner, intermediate, advanced\n  price: numeric(\"price\", { precision: 10, scale: 2 }),\n  duration: integer(\"duration\"), // in minutes\n  mentorId: integer(\"mentor_id\").references(() => users.id),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  // Enhanced course management fields\n  status: text(\"status\").default(\"draft\"), // draft, pending, approved, rejected, published, archived\n  approvedBy: integer(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectedAt: timestamp(\"rejected_at\"),\n  adminNotes: text(\"admin_notes\"),\n  syllabus: text(\"syllabus\"), // Detailed course syllabus\n  prerequisites: text(\"prerequisites\").array(), // Array of prerequisites\n  learningObjectives: text(\"learning_objectives\").array(), // Array of learning objectives\n  targetAudience: text(\"target_audience\"),\n  difficulty: integer(\"difficulty\").default(1), // 1-10 difficulty scale\n  estimatedWeeks: integer(\"estimated_weeks\"), // Course duration in weeks\n  maxStudents: integer(\"max_students\").default(100), // Maximum enrollment\n  currentEnrollments: integer(\"current_enrollments\").default(0),\n  averageRating: numeric(\"average_rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  totalRatings: integer(\"total_ratings\").default(0),\n  totalRevenue: numeric(\"total_revenue\", { precision: 12, scale: 2 }).default(\"0.00\"),\n  tags: text(\"tags\").array(), // Course tags for better searchability\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Classrooms table - enhanced for academy-style customizable classrooms\nexport const classrooms = pgTable(\"classrooms\", {\n  id: serial(\"id\").primaryKey(),\n  // Legacy required fields for backwards compatibility\n  title: text(\"title\").notNull(), // Required legacy field\n  subject: text(\"subject\").notNull(), // Required legacy field\n  level: text(\"level\").notNull(), // Required legacy field\n  description: text(\"description\"),\n  masterId: integer(\"master_id\").references(() => users.id),\n  maxStudents: integer(\"max_students\").default(50),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  // New academy fields\n  academyName: text(\"academy_name\"), // Name of the academy/classroom\n  about: text(\"about\"), // Detailed about section for landing page\n  instruments: text(\"instruments\").array(), // Array of instruments taught\n  curriculum: text(\"curriculum\"), // Detailed curriculum description\n  // Landing page customization\n  heroImage: text(\"hero_image\"), // Main image for landing page\n  logoImage: text(\"logo_image\"), // Academy logo\n  aboutImage: text(\"about_image\"), // Image for about section\n  primaryColor: text(\"primary_color\").default(\"#3B82F6\"), // Theme color\n  secondaryColor: text(\"secondary_color\").default(\"#10B981\"), // Secondary theme color\n  contactEmail: text(\"contact_email\"),\n  contactPhone: text(\"contact_phone\"),\n  website: text(\"website\"),\n  socialLinks: text(\"social_links\"), // JSON string of social media links\n  features: text(\"features\").array(), // Array of key features/highlights\n  testimonials: text(\"testimonials\"), // JSON string of student testimonials\n  pricing: text(\"pricing\"), // JSON string of pricing tiers\n  schedule: text(\"schedule\"), // JSON string of class schedules\n  address: text(\"address\"), // Physical address if applicable\n  isPublic: boolean(\"is_public\").default(true), // Whether landing page is publicly accessible\n  customSlug: text(\"custom_slug\").unique(), // Custom URL slug for sharing\n});\n\n// Enrollments table (many-to-many between users and courses)\nexport const enrollments = pgTable(\"enrollments\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  courseId: integer(\"course_id\").references(() => courses.id),\n  progress: integer(\"progress\").default(0), // percentage 0-100\n  completedAt: timestamp(\"completed_at\"),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  // Enhanced enrollment tracking\n  status: text(\"status\").default(\"active\"), // active, paused, completed, dropped\n  lastAccessedAt: timestamp(\"last_accessed_at\"),\n  totalTimeSpent: integer(\"total_time_spent\").default(0), // in minutes\n  currentLesson: integer(\"current_lesson\").default(1),\n  completedLessons: integer(\"completed_lessons\").default(0),\n  certificateIssued: boolean(\"certificate_issued\").default(false),\n  certificateIssuedAt: timestamp(\"certificate_issued_at\"),\n  enrollmentNotes: text(\"enrollment_notes\"), // Student or mentor notes\n  paymentStatus: text(\"payment_status\").default(\"pending\"), // pending, paid, refunded\n  paymentAmount: numeric(\"payment_amount\", { precision: 10, scale: 2 }),\n  refundAmount: numeric(\"refund_amount\", { precision: 10, scale: 2 }),\n});\n\n// Classroom memberships (many-to-many between users and classrooms)\nexport const classroomMemberships = pgTable(\"classroom_memberships\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  classroomId: integer(\"classroom_id\").references(() => classrooms.id),\n  role: text(\"role\").notNull().default(\"student\"), // master, staff, student\n  status: text(\"status\").default(\"active\"), // active, pending, removed\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\n// Staff requests for classrooms (mentors requesting to join as staff)\nexport const staffRequests = pgTable(\"staff_requests\", {\n  id: serial(\"id\").primaryKey(),\n  mentorId: integer(\"mentor_id\").references(() => users.id).notNull(),\n  classroomId: integer(\"classroom_id\").references(() => classrooms.id).notNull(),\n  message: text(\"message\"), // optional message from mentor\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  adminNotes: text(\"admin_notes\"), // notes from master during review\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const resignationRequests = pgTable(\"resignation_requests\", {\n  id: serial(\"id\").primaryKey(),\n  mentorId: integer(\"mentor_id\").references(() => users.id).notNull(),\n  classroomId: integer(\"classroom_id\").references(() => classrooms.id).notNull(),\n  reason: text(\"reason\"), // reason for resignation\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  masterNotes: text(\"master_notes\"), // notes from master during review\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Course Waitlist - for courses that are full or not yet available\nexport const courseWaitlist = pgTable(\"course_waitlist\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  courseId: integer(\"course_id\").references(() => courses.id).notNull(),\n  priority: integer(\"priority\").default(1), // 1 = highest priority\n  status: text(\"status\").default(\"waiting\"), // waiting, notified, enrolled, expired\n  notifiedAt: timestamp(\"notified_at\"),\n  expiresAt: timestamp(\"expires_at\"),\n  joinedWaitlistAt: timestamp(\"joined_waitlist_at\").defaultNow(),\n});\n\n// Course Analytics - for tracking course performance and engagement\nexport const courseAnalytics = pgTable(\"course_analytics\", {\n  id: serial(\"id\").primaryKey(),\n  courseId: integer(\"course_id\").references(() => courses.id).notNull(),\n  date: timestamp(\"date\").defaultNow(),\n  // Daily metrics\n  newEnrollments: integer(\"new_enrollments\").default(0),\n  completions: integer(\"completions\").default(0),\n  dropouts: integer(\"dropouts\").default(0),\n  totalActiveStudents: integer(\"total_active_students\").default(0),\n  averageSessionDuration: integer(\"average_session_duration\").default(0), // in minutes\n  totalRevenue: numeric(\"total_revenue\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  // Engagement metrics\n  forumPosts: integer(\"forum_posts\").default(0),\n  questionsAsked: integer(\"questions_asked\").default(0),\n  lessonsCompleted: integer(\"lessons_completed\").default(0),\n  averageRating: numeric(\"average_rating\", { precision: 3, scale: 2 }).default(\"0.00\"),\n});\n\n// Live sessions table\nexport const liveSessions = pgTable(\"live_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  mentorId: integer(\"mentor_id\").references(() => users.id),\n  classroomId: integer(\"classroom_id\").references(() => classrooms.id),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").default(60), // in minutes\n  maxParticipants: integer(\"max_participants\").default(20),\n  status: text(\"status\").default(\"scheduled\"), // scheduled, live, completed, cancelled\n  recordingUrl: text(\"recording_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Community posts table\nexport const posts = pgTable(\"posts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  title: text(\"title\"),\n  content: text(\"content\").notNull(),\n  type: text(\"type\").default(\"general\"), // general, achievement, question, showcase\n  audioFile: text(\"audio_file\"), // for audio recordings\n  likes: integer(\"likes\").default(0),\n  comments: integer(\"comments\").default(0),\n  shares: integer(\"shares\").default(0),\n  tags: text(\"tags\").array(), // array of tags\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Learning paths table\nexport const learningPaths = pgTable(\"learning_paths\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  duration: text(\"duration\"), // e.g., \"6 months\"\n  lessonsCount: integer(\"lessons_count\").default(0),\n  difficulty: text(\"difficulty\").notNull(), // beginner, intermediate, advanced, all-levels\n  price: text(\"price\").default(\"Free\"), // e.g., \"$29/month\", \"Free\"\n  rating: numeric(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  enrolledCount: integer(\"enrolled_count\").default(0),\n  instructorId: integer(\"instructor_id\").references(() => users.id),\n  imageUrl: text(\"image_url\"),\n  skills: text(\"skills\").array(), // array of skills learned\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Practice groups table\nexport const practiceGroups = pgTable(\"practice_groups\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  instrument: text(\"instrument\"), // Mixed, Piano, Guitar, etc.\n  membersCount: integer(\"members_count\").default(0),\n  maxMembers: integer(\"max_members\").default(50),\n  nextSession: timestamp(\"next_session\"),\n  createdById: integer(\"created_by_id\").references(() => users.id),\n  imageEmoji: text(\"image_emoji\").default(\"🎵\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Practice group memberships\nexport const practiceGroupMemberships = pgTable(\"practice_group_memberships\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  groupId: integer(\"group_id\").references(() => practiceGroups.id),\n  role: text(\"role\").default(\"member\"), // member, moderator, admin\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\n// Forum categories and topics\nexport const forumCategories = pgTable(\"forum_categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\").default(\"🎵\"),\n  sortOrder: integer(\"sort_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const forumTopics = pgTable(\"forum_topics\", {\n  id: serial(\"id\").primaryKey(),\n  categoryId: integer(\"category_id\").references(() => forumCategories.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\").default(\"🎵\"),\n  postsCount: integer(\"posts_count\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(), // workshop, masterclass, concert, community-event\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  location: text(\"location\"), // online, venue name, etc.\n  maxAttendees: integer(\"max_attendees\"),\n  currentAttendees: integer(\"current_attendees\").default(0),\n  price: numeric(\"price\", { precision: 10, scale: 2 }),\n  instructorId: integer(\"instructor_id\").references(() => users.id),\n  imageUrl: text(\"image_url\"),\n  isOnline: boolean(\"is_online\").default(true),\n  meetingLink: text(\"meeting_link\"),\n  status: text(\"status\").default(\"upcoming\"), // upcoming, live, completed, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Event registrations\nexport const eventRegistrations = pgTable(\"event_registrations\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  eventId: integer(\"event_id\").references(() => events.id),\n  status: text(\"status\").default(\"registered\"), // registered, attended, cancelled\n  registeredAt: timestamp(\"registered_at\").defaultNow(),\n});\n\n// Course reviews and ratings\nexport const courseReviews = pgTable(\"course_reviews\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  courseId: integer(\"course_id\").references(() => courses.id),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  title: text(\"title\"),\n  content: text(\"content\"),\n  isVerified: boolean(\"is_verified\").default(false), // verified purchase\n  helpfulVotes: integer(\"helpful_votes\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Mentor profiles (extended user data for mentors)\nexport const mentorProfiles = pgTable(\"mentor_profiles\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  specialization: text(\"specialization\"),\n  experience: text(\"experience\"), // e.g., \"15+ years\"\n  hourlyRate: text(\"hourly_rate\"), // e.g., \"$75\"\n  location: text(\"location\"),\n  languages: text(\"languages\").array(),\n  badges: text(\"badges\").array(),\n  bio: text(\"bio\"),\n  availability: text(\"availability\").default(\"Available\"), // Available, Busy, Offline\n  totalStudents: integer(\"total_students\").default(0),\n  totalReviews: integer(\"total_reviews\").default(0),\n  averageRating: numeric(\"average_rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  nextAvailableSession: timestamp(\"next_available_session\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Achievements and badges\nexport const achievements = pgTable(\"achievements\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: text(\"icon\").default(\"🏆\"),\n  category: text(\"category\"), // skill, progress, social, special\n  requirements: text(\"requirements\"), // JSON string describing requirements\n  xpReward: integer(\"xp_reward\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User achievements\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  achievementId: integer(\"achievement_id\").references(() => achievements.id),\n  earnedAt: timestamp(\"earned_at\").defaultNow(),\n});\n\n// Course lessons (for detailed course structure)\nexport const courseLessons = pgTable(\"course_lessons\", {\n  id: serial(\"id\").primaryKey(),\n  courseId: integer(\"course_id\").references(() => courses.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  videoUrl: text(\"video_url\"),\n  duration: integer(\"duration\"), // in minutes\n  sortOrder: integer(\"sort_order\").default(0),\n  isPreview: boolean(\"is_preview\").default(false),\n  resources: text(\"resources\").array(), // array of resource URLs\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User lesson progress\nexport const lessonProgress = pgTable(\"lesson_progress\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  lessonId: integer(\"lesson_id\").references(() => courseLessons.id),\n  isCompleted: boolean(\"is_completed\").default(false),\n  watchTime: integer(\"watch_time\").default(0), // in seconds\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Post comments\nexport const postComments = pgTable(\"post_comments\", {\n  id: serial(\"id\").primaryKey(),\n  postId: integer(\"post_id\").references(() => posts.id),\n  userId: integer(\"user_id\").references(() => users.id),\n  content: text(\"content\").notNull(),\n  parentCommentId: integer(\"parent_comment_id\"), // self-reference for nested comments\n  likes: integer(\"likes\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User follows (for social features)\nexport const userFollows = pgTable(\"user_follows\", {\n  id: serial(\"id\").primaryKey(),\n  followerId: integer(\"follower_id\").references(() => users.id),\n  followedId: integer(\"followed_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Mentor applications (for mentor verification process)\nexport const mentorApplications = pgTable(\"mentor_applications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  specialization: text(\"specialization\").notNull(),\n  experience: text(\"experience\").notNull(),\n  bio: text(\"bio\").notNull(),\n  credentials: text(\"credentials\"), // education, certifications\n  portfolio: text(\"portfolio\"), // links to work samples\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  adminNotes: text(\"admin_notes\"),\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Mentorship requests (student-mentor connection requests)\nexport const mentorshipRequests = pgTable(\"mentorship_requests\", {\n  id: serial(\"id\").primaryKey(),\n  studentId: integer(\"student_id\").references(() => users.id).notNull(),\n  mentorId: integer(\"mentor_id\").references(() => users.id).notNull(),\n  message: text(\"message\"), // initial request message from student\n  status: text(\"status\").default(\"pending\"), // pending, accepted, rejected, cancelled\n  acceptedAt: timestamp(\"accepted_at\"),\n  rejectedAt: timestamp(\"rejected_at\"),\n  mentorResponse: text(\"mentor_response\"), // response message from mentor\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Mentor-student conversations (chat messages)\nexport const mentorConversations = pgTable(\"mentor_conversations\", {\n  id: serial(\"id\").primaryKey(),\n  mentorshipRequestId: integer(\"mentorship_request_id\").references(() => mentorshipRequests.id).notNull(),\n  senderId: integer(\"sender_id\").references(() => users.id).notNull(),\n  message: text(\"message\").notNull(),\n  messageType: text(\"message_type\").default(\"text\"), // text, image, audio, file\n  attachmentUrl: text(\"attachment_url\"), // for file/image/audio messages\n  isRead: boolean(\"is_read\").default(false),\n  readAt: timestamp(\"read_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Mentorship sessions (scheduled 1-on-1 sessions)\nexport const mentorshipSessions = pgTable(\"mentorship_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  mentorshipRequestId: integer(\"mentorship_request_id\").references(() => mentorshipRequests.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").default(60), // in minutes\n  status: text(\"status\").default(\"scheduled\"), // scheduled, completed, cancelled, no-show\n  meetingLink: text(\"meeting_link\"),\n  recordingUrl: text(\"recording_url\"),\n  mentorNotes: text(\"mentor_notes\"), // private notes for mentor\n  studentNotes: text(\"student_notes\"), // private notes for student\n  sessionFeedback: text(\"session_feedback\"), // post-session feedback\n  rating: integer(\"rating\"), // 1-5 stars from student\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Master role requests (mentor requests to become master)\nexport const masterRoleRequests = pgTable(\"master_role_requests\", {\n  id: serial(\"id\").primaryKey(),\n  mentorId: integer(\"mentor_id\").references(() => users.id).notNull(),\n  reason: text(\"reason\").notNull(), // why they want to become a master\n  experience: text(\"experience\").notNull(), // teaching/classroom management experience\n  plannedClassrooms: text(\"planned_classrooms\"), // description of planned classrooms\n  additionalQualifications: text(\"additional_qualifications\"), // extra credentials or experience\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  adminNotes: text(\"admin_notes\"), // notes from admin during review\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  approvedAt: timestamp(\"approved_at\"),\n  rejectedAt: timestamp(\"rejected_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  courses: many(courses),\n  enrollments: many(enrollments),\n  classrooms: many(classrooms),\n  classroomMemberships: many(classroomMemberships),\n  liveSessions: many(liveSessions),\n  posts: many(posts),\n}));\n\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  mentor: one(users, {\n    fields: [courses.mentorId],\n    references: [users.id],\n  }),\n  approver: one(users, {\n    fields: [courses.approvedBy],\n    references: [users.id],\n  }),\n  enrollments: many(enrollments),\n  reviews: many(courseReviews),\n  waitlist: many(courseWaitlist),\n  analytics: many(courseAnalytics),\n}));\n\nexport const courseWaitlistRelations = relations(courseWaitlist, ({ one }) => ({\n  user: one(users, {\n    fields: [courseWaitlist.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [courseWaitlist.courseId],\n    references: [courses.id],\n  }),\n}));\n\nexport const courseAnalyticsRelations = relations(courseAnalytics, ({ one }) => ({\n  course: one(courses, {\n    fields: [courseAnalytics.courseId],\n    references: [courses.id],\n  }),\n}));\n\nexport const classroomsRelations = relations(classrooms, ({ one, many }) => ({\n  master: one(users, {\n    fields: [classrooms.masterId],\n    references: [users.id],\n  }),\n  memberships: many(classroomMemberships),\n  liveSessions: many(liveSessions),\n}));\n\nexport const enrollmentsRelations = relations(enrollments, ({ one }) => ({\n  user: one(users, {\n    fields: [enrollments.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [enrollments.courseId],\n    references: [courses.id],\n  }),\n}));\n\nexport const classroomMembershipsRelations = relations(classroomMemberships, ({ one }) => ({\n  user: one(users, {\n    fields: [classroomMemberships.userId],\n    references: [users.id],\n  }),\n  classroom: one(classrooms, {\n    fields: [classroomMemberships.classroomId],\n    references: [classrooms.id],\n  }),\n}));\n\nexport const liveSessionsRelations = relations(liveSessions, ({ one }) => ({\n  mentor: one(users, {\n    fields: [liveSessions.mentorId],\n    references: [users.id],\n  }),\n  classroom: one(classrooms, {\n    fields: [liveSessions.classroomId],\n    references: [classrooms.id],\n  }),\n}));\n\nexport const postsRelations = relations(posts, ({ one }) => ({\n  user: one(users, {\n    fields: [posts.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const masterRoleRequestsRelations = relations(masterRoleRequests, ({ one }) => ({\n  mentor: one(users, {\n    fields: [masterRoleRequests.mentorId],\n    references: [users.id],\n  }),\n  reviewer: one(users, {\n    fields: [masterRoleRequests.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassroomSchema = createInsertSchema(classrooms).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEnrollmentSchema = createInsertSchema(enrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport const insertClassroomMembershipSchema = createInsertSchema(classroomMemberships).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertLiveSessionSchema = createInsertSchema(liveSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMasterRoleRequestSchema = createInsertSchema(masterRoleRequests).omit({\n  id: true,\n  createdAt: true,\n  reviewedBy: true,\n  reviewedAt: true,\n  approvedAt: true,\n  rejectedAt: true,\n  adminNotes: true,\n});\n\nexport const insertStaffRequestSchema = createInsertSchema(staffRequests).omit({\n  id: true,\n  createdAt: true,\n  reviewedBy: true,\n  reviewedAt: true,\n  adminNotes: true,\n});\n\nexport const insertResignationRequestSchema = createInsertSchema(resignationRequests).omit({\n  id: true,\n  createdAt: true,\n  reviewedBy: true,\n  reviewedAt: true,\n  masterNotes: true,\n});\n\nexport const insertCourseWaitlistSchema = createInsertSchema(courseWaitlist).omit({\n  id: true,\n  joinedWaitlistAt: true,\n  notifiedAt: true,\n});\n\nexport const insertCourseAnalyticsSchema = createInsertSchema(courseAnalytics).omit({\n  id: true,\n  date: true,\n});\n\n// Export types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertEnrollment = z.infer<typeof insertEnrollmentSchema>;\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type InsertCourseWaitlist = z.infer<typeof insertCourseWaitlistSchema>;\nexport type CourseWaitlist = typeof courseWaitlist.$inferSelect;\nexport type InsertCourseAnalytics = z.infer<typeof insertCourseAnalyticsSchema>;\nexport type CourseAnalytics = typeof courseAnalytics.$inferSelect;\nexport type InsertMasterRoleRequest = z.infer<typeof insertMasterRoleRequestSchema>;\nexport type MasterRoleRequest = typeof masterRoleRequests.$inferSelect;\nexport type InsertStaffRequest = z.infer<typeof insertStaffRequestSchema>;\nexport type StaffRequest = typeof staffRequests.$inferSelect;\nexport type InsertResignationRequest = z.infer<typeof insertResignationRequestSchema>;\nexport type ResignationRequest = typeof resignationRequests.$inferSelect;\n\n// Timetable/Schedule tables\nexport const schedules = pgTable(\"schedules\", {\n  id: serial(\"id\").primaryKey(),\n  classroomId: integer(\"classroom_id\").references(() => classrooms.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0=Sunday, 1=Monday, etc.\n  startTime: text(\"start_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(), // HH:MM format\n  instructorId: integer(\"instructor_id\").references(() => users.id).notNull(),\n  subject: text(\"subject\"),\n  sessionType: text(\"session_type\").default(\"class\"), // class, practice, exam, etc.\n  maxStudents: integer(\"max_students\").default(50),\n  isRecurring: boolean(\"is_recurring\").default(true),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const scheduleEnrollments = pgTable(\"schedule_enrollments\", {\n  id: serial(\"id\").primaryKey(),\n  scheduleId: integer(\"schedule_id\").references(() => schedules.id).notNull(),\n  studentId: integer(\"student_id\").references(() => users.id).notNull(),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow(),\n  status: text(\"status\").default(\"active\"), // active, dropped, completed\n});\n\nexport const scheduleNotifications = pgTable(\"schedule_notifications\", {\n  id: serial(\"id\").primaryKey(),\n  scheduleId: integer(\"schedule_id\").references(() => schedules.id).notNull(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  notificationType: text(\"notification_type\").notNull(), // upcoming_session, session_changed, etc.\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n});\n\n// Schedule conflicts tracking\nexport const scheduleConflicts = pgTable(\"schedule_conflicts\", {\n  id: serial(\"id\").primaryKey(),\n  instructorId: integer(\"instructor_id\").references(() => users.id).notNull(),\n  scheduleId1: integer(\"schedule_id_1\").references(() => schedules.id).notNull(),\n  scheduleId2: integer(\"schedule_id_2\").references(() => schedules.id).notNull(),\n  conflictType: text(\"conflict_type\").notNull(), // time_overlap, double_booking\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas for timetable tables\nexport const insertScheduleSchema = createInsertSchema(schedules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertScheduleEnrollmentSchema = createInsertSchema(scheduleEnrollments).omit({\n  id: true,\n  enrolledAt: true,\n});\n\nexport const insertScheduleNotificationSchema = createInsertSchema(scheduleNotifications).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertScheduleConflictSchema = createInsertSchema(scheduleConflicts).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types for timetable tables\nexport type InsertSchedule = z.infer<typeof insertScheduleSchema>;\nexport type Schedule = typeof schedules.$inferSelect;\n\nexport type InsertScheduleEnrollment = z.infer<typeof insertScheduleEnrollmentSchema>;\nexport type ScheduleEnrollment = typeof scheduleEnrollments.$inferSelect;\n\nexport type InsertScheduleNotification = z.infer<typeof insertScheduleNotificationSchema>;\nexport type ScheduleNotification = typeof scheduleNotifications.$inferSelect;\n\nexport type InsertScheduleConflict = z.infer<typeof insertScheduleConflictSchema>;\nexport type ScheduleConflict = typeof scheduleConflicts.$inferSelect;\n\nexport type InsertClassroom = z.infer<typeof insertClassroomSchema>;\nexport type Classroom = typeof classrooms.$inferSelect;\n\nexport type InsertClassroomMembership = z.infer<typeof insertClassroomMembershipSchema>;\nexport type ClassroomMembership = typeof classroomMemberships.$inferSelect;\n\nexport type InsertLiveSession = z.infer<typeof insertLiveSessionSchema>;\nexport type LiveSession = typeof liveSessions.$inferSelect;\n\nexport type InsertPost = z.infer<typeof insertPostSchema>;\nexport type Post = typeof posts.$inferSelect;\n\n// Additional insert schemas for new tables\nexport const insertLearningPathSchema = createInsertSchema(learningPaths).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPracticeGroupSchema = createInsertSchema(practiceGroups).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPracticeGroupMembershipSchema = createInsertSchema(practiceGroupMemberships).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertForumCategorySchema = createInsertSchema(forumCategories).omit({\n  id: true,\n});\n\nexport const insertForumTopicSchema = createInsertSchema(forumTopics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventRegistrationSchema = createInsertSchema(eventRegistrations).omit({\n  id: true,\n  registeredAt: true,\n});\n\nexport const insertCourseReviewSchema = createInsertSchema(courseReviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMentorProfileSchema = createInsertSchema(mentorProfiles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserAchievementSchema = createInsertSchema(userAchievements).omit({\n  id: true,\n  earnedAt: true,\n});\n\nexport const insertCourseLessonSchema = createInsertSchema(courseLessons).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLessonProgressSchema = createInsertSchema(lessonProgress).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPostCommentSchema = createInsertSchema(postComments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserFollowSchema = createInsertSchema(userFollows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMentorApplicationSchema = createInsertSchema(mentorApplications).omit({\n  id: true,\n  createdAt: true,\n  reviewedAt: true,\n});\n\nexport const insertMentorshipRequestSchema = createInsertSchema(mentorshipRequests).omit({\n  id: true,\n  createdAt: true,\n  acceptedAt: true,\n  rejectedAt: true,\n});\n\nexport const insertMentorConversationSchema = createInsertSchema(mentorConversations).omit({\n  id: true,\n  createdAt: true,\n  readAt: true,\n});\n\nexport const insertMentorshipSessionSchema = createInsertSchema(mentorshipSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Additional types for new tables\nexport type InsertLearningPath = z.infer<typeof insertLearningPathSchema>;\nexport type LearningPath = typeof learningPaths.$inferSelect;\n\nexport type InsertPracticeGroup = z.infer<typeof insertPracticeGroupSchema>;\nexport type PracticeGroup = typeof practiceGroups.$inferSelect;\n\nexport type InsertPracticeGroupMembership = z.infer<typeof insertPracticeGroupMembershipSchema>;\nexport type PracticeGroupMembership = typeof practiceGroupMemberships.$inferSelect;\n\nexport type InsertForumCategory = z.infer<typeof insertForumCategorySchema>;\nexport type ForumCategory = typeof forumCategories.$inferSelect;\n\nexport type InsertForumTopic = z.infer<typeof insertForumTopicSchema>;\nexport type ForumTopic = typeof forumTopics.$inferSelect;\n\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\n\nexport type InsertEventRegistration = z.infer<typeof insertEventRegistrationSchema>;\nexport type EventRegistration = typeof eventRegistrations.$inferSelect;\n\nexport type InsertCourseReview = z.infer<typeof insertCourseReviewSchema>;\nexport type CourseReview = typeof courseReviews.$inferSelect;\n\nexport type InsertMentorProfile = z.infer<typeof insertMentorProfileSchema>;\nexport type MentorProfile = typeof mentorProfiles.$inferSelect;\n\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\n\nexport type InsertUserAchievement = z.infer<typeof insertUserAchievementSchema>;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\n\nexport type InsertCourseLesson = z.infer<typeof insertCourseLessonSchema>;\nexport type CourseLesson = typeof courseLessons.$inferSelect;\n\nexport type InsertLessonProgress = z.infer<typeof insertLessonProgressSchema>;\nexport type LessonProgress = typeof lessonProgress.$inferSelect;\n\nexport type InsertPostComment = z.infer<typeof insertPostCommentSchema>;\nexport type PostComment = typeof postComments.$inferSelect;\n\nexport type InsertUserFollow = z.infer<typeof insertUserFollowSchema>;\nexport type UserFollow = typeof userFollows.$inferSelect;\n\nexport type InsertMentorApplication = z.infer<typeof insertMentorApplicationSchema>;\nexport type MentorApplication = typeof mentorApplications.$inferSelect;\n\nexport type InsertMentorshipRequest = z.infer<typeof insertMentorshipRequestSchema>;\nexport type MentorshipRequest = typeof mentorshipRequests.$inferSelect;\n\nexport type InsertMentorConversation = z.infer<typeof insertMentorConversationSchema>;\nexport type MentorConversation = typeof mentorConversations.$inferSelect;\n\nexport type InsertMentorshipSession = z.infer<typeof insertMentorshipSessionSchema>;\nexport type MentorshipSession = typeof mentorshipSessions.$inferSelect;\n","size_bytes":37162},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import React from \"react\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Router, Route, Switch } from \"wouter\";\nimport { ThemeProvider } from \"next-themes\";\nimport Index from \"./pages/Index\";\nimport Courses from \"./pages/Courses\";\nimport { LearningPaths } from \"./pages/LearningPaths\";\nimport NotFound from \"./pages/NotFound\";\nimport { MentorPage } from \"./pages/MentorPage\";\nimport { LiveSessions } from \"./pages/LiveSessions\";\nimport { AdminPanel } from \"./pages/AdminPanel\";\nimport Community from \"./pages/Community\";\nimport Tools from \"./pages/Tools\";\nimport About from \"./pages/About\";\nimport GetStarted from \"./pages/GetStarted\";\nimport StudentSignIn from \"./pages/StudentSignIn\";\nimport StudentSignUp from \"./pages/StudentSignUp\";\nimport MentorSignIn from \"./pages/MentorSignIn\";\nimport MentorSignUp from \"./pages/MentorSignUp\";\nimport AdminSignIn from \"./pages/AdminSignIn\";\nimport Classroom from \"./pages/Classroom\";\nimport ClassroomDashboard from \"./pages/ClassroomDashboard\";\nimport ClassroomManage from \"./pages/ClassroomManage\";\nimport LiveClass from \"./pages/LiveClass\";\nimport MentorDashboard from \"./pages/MentorDashboard\";\nimport MasterDashboard from \"./pages/MasterDashboard\";\nimport StudentDashboard from \"./pages/StudentDashboard\";\nimport StudentCourses from \"./pages/StudentCourses\";\nimport StudentProgress from \"./pages/StudentProgress\";\nimport StudentSessions from \"./pages/StudentSessions\";\nimport StudentAchievements from \"./pages/StudentAchievements\";\nimport StudentCommunity from \"./pages/StudentCommunity\";\nimport StudentTools from \"./pages/StudentTools\";\nimport StudentMentors from \"./pages/StudentMentors\";\nimport AcademyDiscovery from \"./pages/AcademyDiscovery\";\nimport MyAcademies from \"./pages/MyAcademies\";\nimport MentorInteractions from \"./pages/MentorInteractions\";\nimport MentorRequests from \"./pages/MentorRequests\";\nimport MentorStudents from \"./pages/MentorStudents\";\nimport ClassroomDiscovery from \"./pages/ClassroomDiscovery\";\nimport ClassroomLanding from \"./pages/ClassroomLanding\";\nimport StaffClassroom from \"./pages/StaffClassroom\";\nimport ClassroomManagement from \"./pages/ClassroomManagement\";\nimport CourseDetail from \"./pages/CourseDetail\";\nimport CourseCreation from \"./pages/CourseCreation\";\nimport CourseManagement from \"./pages/CourseManagement\";\nimport MetronomePage from \"./pages/tools/MetronomePage\";\nimport TunerPage from \"./pages/tools/TunerPage\";\nimport ScaleTrainerPage from \"./pages/tools/ScaleTrainerPage\";\nimport RhythmTrainerPage from \"./pages/tools/RhythmTrainerPage\";\nimport PracticePlannerPage from \"./pages/tools/PracticePlannerPage\";\nimport ProgressAnalyticsPage from \"./pages/tools/ProgressAnalyticsPage\";\nimport { ProtectedRoute, StudentRoute, MentorRoute, AdminRoute, AuthenticatedRoute, MasterRoute } from \"./components/ProtectedRoute\";\nimport { checkPortalNavigation } from \"./lib/auth\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const url = Array.isArray(queryKey) ? queryKey[0] : queryKey;\n        const response = await fetch(url as string);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      },\n      retry: 1,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n    },\n  },\n});\n\nconst App = () => {\n  // Monitor navigation and automatically logout users who leave their portal\n  React.useEffect(() => {\n    const handleRouteChange = () => {\n      // Small delay to ensure the route has changed\n      setTimeout(() => {\n        checkPortalNavigation();\n      }, 100);\n    };\n\n    // Listen for route changes via popstate (back/forward buttons)\n    window.addEventListener('popstate', handleRouteChange);\n    \n    // Listen for programmatic navigation\n    const originalPushState = history.pushState;\n    const originalReplaceState = history.replaceState;\n    \n    history.pushState = function(...args) {\n      originalPushState.apply(history, args);\n      handleRouteChange();\n    };\n    \n    history.replaceState = function(...args) {\n      originalReplaceState.apply(history, args);\n      handleRouteChange();\n    };\n\n    // Check on initial load\n    handleRouteChange();\n\n    return () => {\n      window.removeEventListener('popstate', handleRouteChange);\n      history.pushState = originalPushState;\n      history.replaceState = originalReplaceState;\n    };\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem>\n        <TooltipProvider>\n          <Toaster />\n          <Sonner />\n          <Router>\n          <Switch>\n            <Route path=\"/\" component={Index} />\n            <Route path=\"/get-started\" component={GetStarted} />\n            <Route path=\"/sign-in\" component={StudentSignIn} />\n            <Route path=\"/sign-up\" component={StudentSignUp} />\n            <Route path=\"/student-signin\" component={StudentSignIn} />\n            <Route path=\"/student-signup\" component={StudentSignUp} />\n            <Route path=\"/mentor-signin\" component={MentorSignIn} />\n            <Route path=\"/mentor-signup\" component={MentorSignUp} />\n            <Route path=\"/admin-signin\" component={AdminSignIn} />\n            <Route path=\"/courses\" component={Courses} />\n            <Route path=\"/courses/:id\" component={CourseDetail} />\n            <Route path=\"/course-creation\" component={() => <AuthenticatedRoute><CourseCreation /></AuthenticatedRoute>} />\n            <Route path=\"/course-management\" component={() => <AuthenticatedRoute><CourseManagement /></AuthenticatedRoute>} />\n            <Route path=\"/learning-paths\" component={LearningPaths} />\n            <Route path=\"/mentors\" component={MentorPage} />\n            <Route path=\"/live-sessions\" component={LiveSessions} />\n            <Route path=\"/community\" component={Community} />\n            <Route path=\"/tools\" component={Tools} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/admin\" component={() => <AdminRoute><AdminPanel /></AdminRoute>} />\n            <Route path=\"/classroom\" component={() => <AuthenticatedRoute><Classroom /></AuthenticatedRoute>} />\n            <Route path=\"/classroom/dashboard/:id\" component={() => <AuthenticatedRoute><ClassroomDashboard /></AuthenticatedRoute>} />\n            <Route path=\"/classroom/manage\" component={() => <MentorRoute><ClassroomManage /></MentorRoute>} />\n            <Route path=\"/classroom/live/:id\" component={() => <AuthenticatedRoute><LiveClass /></AuthenticatedRoute>} />\n            <Route path=\"/mentor-dashboard\" component={() => <MentorRoute><MentorDashboard /></MentorRoute>} />\n            <Route path=\"/master-dashboard\" component={() => <MasterRoute><MasterDashboard /></MasterRoute>} />\n            <Route path=\"/student-dashboard\" component={() => <StudentRoute><StudentDashboard /></StudentRoute>} />\n            <Route path=\"/student-courses\" component={() => <StudentRoute><StudentCourses /></StudentRoute>} />\n            <Route path=\"/student-progress\" component={() => <StudentRoute><StudentProgress /></StudentRoute>} />\n            <Route path=\"/student-sessions\" component={() => <StudentRoute><StudentSessions /></StudentRoute>} />\n            <Route path=\"/student-achievements\" component={() => <StudentRoute><StudentAchievements /></StudentRoute>} />\n            <Route path=\"/student-community\" component={() => <StudentRoute><StudentCommunity /></StudentRoute>} />\n            <Route path=\"/student-tools\" component={() => <StudentRoute><StudentTools /></StudentRoute>} />\n            <Route path=\"/student-mentors\" component={() => <StudentRoute><StudentMentors /></StudentRoute>} />\n            <Route path=\"/academy-discovery\" component={() => <StudentRoute><AcademyDiscovery /></StudentRoute>} />\n            <Route path=\"/my-academies\" component={() => <StudentRoute><MyAcademies /></StudentRoute>} />\n            <Route path=\"/mentor-interactions\" component={() => <AuthenticatedRoute><MentorInteractions /></AuthenticatedRoute>} />\n            <Route path=\"/mentor-requests\" component={() => <MentorRoute><MentorRequests /></MentorRoute>} />\n            <Route path=\"/mentor-students\" component={() => <MentorRoute><MentorStudents /></MentorRoute>} />\n            <Route path=\"/staff-classroom\" component={() => <MentorRoute><StaffClassroom /></MentorRoute>} />\n            <Route path=\"/classroom-discovery\" component={() => <MentorRoute><ClassroomDiscovery /></MentorRoute>} />\n            <Route path=\"/classroom-management/:classroomId\" component={() => <MasterRoute><ClassroomManagement /></MasterRoute>} />\n            {/* Legacy redirects for old conflicting routes */}\n            <Route path=\"/classroom-staff\" component={() => <MentorRoute><ClassroomDiscovery /></MentorRoute>} />\n            <Route path=\"/classroom-browser\" component={() => <MentorRoute><ClassroomDiscovery /></MentorRoute>} />\n            <Route path=\"/academy/:slug\" component={ClassroomLanding} />\n            <Route path=\"/tools/metronome\" component={() => <StudentRoute><MetronomePage /></StudentRoute>} />\n            <Route path=\"/tools/tuner\" component={() => <StudentRoute><TunerPage /></StudentRoute>} />\n            <Route path=\"/tools/scale-trainer\" component={() => <StudentRoute><ScaleTrainerPage /></StudentRoute>} />\n            <Route path=\"/tools/rhythm-trainer\" component={() => <StudentRoute><RhythmTrainerPage /></StudentRoute>} />\n            <Route path=\"/tools/practice-planner\" component={() => <StudentRoute><PracticePlannerPage /></StudentRoute>} />\n            <Route path=\"/tools/progress-analytics\" component={() => <StudentRoute><ProgressAnalyticsPage /></StudentRoute>} />\n            <Route component={NotFound} />\n          </Switch>\n        </Router>\n      </TooltipProvider>\n    </ThemeProvider>\n  </QueryClientProvider>\n  );\n};\n\nexport default App;\n","size_bytes":10106},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. \nAll colors MUST be HSL.\n*/\n\n@layer base {\n  :root {\n    /* HarmonyLearn Music-themed Design System */\n    --background: 240 20% 98%;\n    --foreground: 240 25% 12%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 240 25% 12%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 25% 12%;\n\n    /* Deep Musical Blue */\n    --primary: 220 85% 35%;\n    --primary-foreground: 0 0% 98%;\n    --primary-glow: 220 75% 50%;\n\n    /* Warm Golden Accent */\n    --secondary: 45 95% 55%;\n    --secondary-foreground: 240 25% 12%;\n\n    /* Soft Background Tones */\n    --muted: 240 15% 96%;\n    --muted-foreground: 240 15% 45%;\n\n    /* Vibrant Music Accent */\n    --accent: 280 75% 65%;\n    --accent-foreground: 0 0% 98%;\n\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 98%;\n\n    --border: 240 15% 88%;\n    --input: 240 15% 92%;\n    --ring: 220 85% 35%;\n\n    /* Music-themed Gradients */\n    --gradient-hero: linear-gradient(135deg, hsl(220 85% 35%), hsl(280 75% 65%));\n    --gradient-warm: linear-gradient(135deg, hsl(45 95% 55%), hsl(25 85% 60%));\n    --gradient-cool: linear-gradient(135deg, hsl(220 85% 35%), hsl(200 75% 45%));\n    --gradient-subtle: linear-gradient(180deg, hsl(240 20% 98%), hsl(240 15% 96%));\n\n    /* Musical Shadows */\n    --shadow-musical: 0 10px 30px -10px hsl(220 85% 35% / 0.2);\n    --shadow-glow: 0 0 40px hsl(220 75% 50% / 0.15);\n    --shadow-warm: 0 8px 25px -8px hsl(45 95% 55% / 0.25);\n\n    /* Smooth Musical Transitions */\n    --transition-rhythm: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-beat: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n\n    /* Dark theme gradients */\n    --gradient-hero: linear-gradient(135deg, hsl(220 75% 50%), hsl(280 65% 55%));\n    --gradient-warm: linear-gradient(135deg, hsl(45 85% 45%), hsl(25 75% 50%));\n    --gradient-cool: linear-gradient(135deg, hsl(220 75% 50%), hsl(200 65% 40%));\n    --gradient-subtle: linear-gradient(180deg, hsl(222.2 84% 4.9%), hsl(217.2 32.6% 17.5%));\n\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}","size_bytes":3593},"client/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/AboutInfo.tsx":{"content":"import { Users, Target, Award, Heart } from \"lucide-react\";\n\nexport const AboutInfo = () => {\n  const features = [\n    {\n      icon: Target,\n      title: \"Our Mission\",\n      description: \"To make quality music education accessible to everyone, everywhere, at any skill level.\"\n    },\n    {\n      icon: Users,\n      title: \"Expert Instructors\",\n      description: \"Learn from world-class musicians and certified music educators with years of experience.\"\n    },\n    {\n      icon: Award,\n      title: \"Proven Results\",\n      description: \"95% of our students achieve their musical goals within 6 months of starting their journey.\"\n    },\n    {\n      icon: Heart,\n      title: \"Passionate Community\",\n      description: \"Join a supportive community of music lovers who share your passion for learning and growth.\"\n    }\n  ];\n\n  return (\n    <section className=\"py-20 bg-muted/30\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Why Choose HarmonyLearn?\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            We're more than just an online music school. We're a community dedicated to \n            nurturing musical talent and helping you achieve your dreams.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {features.map((feature, index) => (\n            <div\n              key={index}\n              className=\"text-center p-6 bg-card rounded-xl shadow-musical hover:shadow-glow transition-all duration-300\"\n            >\n              <div className=\"p-4 rounded-lg bg-primary/10 mb-4 mx-auto w-fit\">\n                <feature.icon className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">{feature.title}</h3>\n              <p className=\"text-muted-foreground\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":2063},"client/src/components/AuthDialog.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Link } from \"wouter\";\nimport { Music, GraduationCap, Users } from \"lucide-react\";\n\ninterface AuthDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  featureName?: string;\n}\n\nexport const AuthDialog = ({ open, onOpenChange, featureName = \"this feature\" }: AuthDialogProps) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"p-2 bg-gradient-hero rounded-lg\">\n              <Music className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <DialogTitle>Sign In Required</DialogTitle>\n          </div>\n          <DialogDescription>\n            You need to sign in to access {featureName}. Choose your role to get started with HarmonyLearn.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4 pt-4\">\n          <div className=\"grid grid-cols-1 gap-3\">\n            <Link to=\"/student-signin\">\n              <Button \n                className=\"w-full justify-start gap-3 h-12 bg-blue-500 hover:bg-blue-600\"\n                onClick={() => onOpenChange(false)}\n              >\n                <GraduationCap className=\"h-5 w-5\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Student Portal</div>\n                  <div className=\"text-xs opacity-90\">Learn music with expert mentors</div>\n                </div>\n              </Button>\n            </Link>\n            \n            <Link to=\"/mentor-signin\">\n              <Button \n                className=\"w-full justify-start gap-3 h-12 bg-purple-500 hover:bg-purple-600\"\n                onClick={() => onOpenChange(false)}\n              >\n                <Users className=\"h-5 w-5\" />\n                <div className=\"text-left\">\n                  <div className=\"font-medium\">Mentor Portal</div>\n                  <div className=\"text-xs opacity-90\">Teach and share your expertise</div>\n                </div>\n              </Button>\n            </Link>\n          </div>\n          \n          <div className=\"text-center text-sm text-muted-foreground\">\n            Don't have an account?{\" \"}\n            <Link to=\"/get-started\" className=\"text-primary hover:underline\">\n              Sign up here\n            </Link>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":2621},"client/src/components/CTASection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Music, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport const CTASection = () => {\n  return (\n    <section className=\"py-20\">\n      <div className=\"container mx-auto px-4\">\n        <Card className=\"bg-gradient-hero border-none shadow-musical\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"max-w-3xl mx-auto\">\n              <div className=\"flex justify-center mb-6\">\n                <div className=\"p-4 bg-white/20 rounded-full\">\n                  <Music className=\"h-12 w-12 text-white\" />\n                </div>\n              </div>\n              \n              <h2 className=\"text-4xl md:text-5xl font-bold text-white mb-6\">\n                Ready to Start Your Musical Journey?\n              </h2>\n              \n              <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\n                Join thousands of musicians who have transformed their skills with HarmonyLearn. \n                Start learning today with our expert instructors and interactive platform.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button \n                  size=\"lg\" \n                  variant=\"secondary\" \n                  className=\"text-lg px-8 py-4 shadow-warm hover:shadow-lg transition-all\"\n                  asChild\n                >\n                  <Link to=\"/courses\">\n                    Browse Courses\n                    <ArrowRight className=\"ml-2 h-5 w-5\" />\n                  </Link>\n                </Button>\n                \n                <Button \n                  size=\"lg\" \n                  variant=\"outline\" \n                  className=\"text-lg px-8 py-4 bg-white/10 border-white/30 text-white hover:bg-white/20 hover:text-white\"\n                  asChild\n                >\n                  <Link to=\"/mentors\">Find a Mentor</Link>\n                </Button>\n              </div>\n              \n              <p className=\"text-white/70 mt-6 text-sm\">\n                Free trial • No credit card required • Cancel anytime\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </section>\n  );\n};","size_bytes":2322},"client/src/components/CommunityPreview.tsx":{"content":"import { MessageCircle, Heart, Share2, Trophy, Users, Star } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nexport const CommunityPreview = () => {\n  const posts = [\n    {\n      id: 1,\n      author: \"Sarah Chen\",\n      role: \"Guitar Mentor\",\n      content: \"Just finished my first composition! Here's a snippet of my acoustic piece 🎸\",\n      likes: 47,\n      comments: 12,\n      shares: 5,\n      time: \"2h ago\"\n    },\n    {\n      id: 2,\n      author: \"Marcus Rivera\",\n      role: \"Piano Student\",\n      content: \"Finally nailed Chopin's Minute Waltz! Practice really does make perfect 🎹\",\n      likes: 89,\n      comments: 23,\n      shares: 8,\n      time: \"4h ago\"\n    },\n    {\n      id: 3,\n      author: \"Elena Volkov\",\n      role: \"Violin Mentor\",\n      content: \"Hosting a live masterclass on vibrato techniques tomorrow at 3PM EST. Join us!\",\n      likes: 156,\n      comments: 34,\n      shares: 28,\n      time: \"6h ago\"\n    }\n  ];\n\n  const achievements = [\n    {\n      title: \"First Song Learned\",\n      description: \"Complete your first course lesson\",\n      icon: \"🎵\",\n      earned: 1247\n    },\n    {\n      title: \"Practice Streak\",\n      description: \"Practice for 7 consecutive days\",\n      icon: \"🔥\",\n      earned: 892\n    },\n    {\n      title: \"Community Helper\",\n      description: \"Help 10 fellow musicians\",\n      icon: \"🤝\",\n      earned: 456\n    }\n  ];\n\n  return (\n    <section className=\"py-20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Join the Music Community\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Connect with musicians worldwide, share your progress, get feedback, \n            and celebrate achievements together\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Community Feed */}\n          <div className=\"lg:col-span-2\">\n            <h3 className=\"text-2xl font-semibold mb-6 flex items-center\">\n              <MessageCircle className=\"mr-3 h-6 w-6 text-primary\" />\n              Community Feed\n            </h3>\n            \n            <div className=\"space-y-6\">\n              {posts.map((post) => (\n                <Card key={post.id} className=\"p-6 hover:shadow-musical transition-shadow duration-300\">\n                  <div className=\"flex items-start space-x-4\">\n                    <Avatar>\n                      <AvatarFallback className=\"bg-gradient-hero text-primary-foreground\">\n                        {post.author.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h4 className=\"font-semibold\">{post.author}</h4>\n                        <span className=\"text-sm bg-accent/20 text-accent-foreground px-2 py-1 rounded\">\n                          {post.role}\n                        </span>\n                        <span className=\"text-sm text-muted-foreground\">•</span>\n                        <span className=\"text-sm text-muted-foreground\">{post.time}</span>\n                      </div>\n                      \n                      <p className=\"text-foreground mb-4\">{post.content}</p>\n                      \n                      <div className=\"flex items-center space-x-6 text-muted-foreground\">\n                        <button className=\"flex items-center space-x-2 hover:text-red-500 transition-colors\">\n                          <Heart className=\"h-4 w-4\" />\n                          <span>{post.likes}</span>\n                        </button>\n                        <button className=\"flex items-center space-x-2 hover:text-primary transition-colors\">\n                          <MessageCircle className=\"h-4 w-4\" />\n                          <span>{post.comments}</span>\n                        </button>\n                        <button className=\"flex items-center space-x-2 hover:text-secondary transition-colors\">\n                          <Share2 className=\"h-4 w-4\" />\n                          <span>{post.shares}</span>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-8\">\n            {/* Achievements */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4 flex items-center\">\n                <Trophy className=\"mr-3 h-5 w-5 text-secondary\" />\n                Recent Achievements\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {achievements.map((achievement) => (\n                  <div key={achievement.title} className=\"flex items-center space-x-3 p-3 bg-muted/50 rounded-lg\">\n                    <div className=\"text-2xl\">{achievement.icon}</div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm\">{achievement.title}</h4>\n                      <p className=\"text-xs text-muted-foreground\">{achievement.description}</p>\n                      <p className=\"text-xs text-primary mt-1\">{achievement.earned} earned</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n\n            {/* Community Stats */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4 flex items-center\">\n                <Users className=\"mr-3 h-5 w-5 text-primary\" />\n                Community Stats\n              </h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Active Members</span>\n                  <span className=\"font-semibold\">12,847</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Posts Today</span>\n                  <span className=\"font-semibold\">486</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Live Sessions</span>\n                  <span className=\"font-semibold\">23</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Practice Groups</span>\n                  <span className=\"font-semibold\">156</span>\n                </div>\n              </div>\n            </Card>\n\n            <Button variant=\"hero\" className=\"w-full\">\n              Join Community\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":7111},"client/src/components/CourseCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { StarIcon, Clock, Users, DollarSign, BookOpen, CheckCircle, PlayCircle } from \"lucide-react\";\nimport { getCurrentUser, hasRole } from \"@/lib/auth\";\n\ninterface CourseCardProps {\n  id: number;\n  title: string;\n  description: string;\n  instructor?: string;\n  mentorName?: string;\n  duration: number | string;\n  level: string;\n  category: string;\n  price: number | string;\n  rating?: number;\n  averageRating?: number;\n  students?: number;\n  currentEnrollments?: number;\n  maxStudents?: number;\n  imageUrl?: string;\n  tags?: string[];\n  status?: string;\n  prerequisites?: string[];\n  estimatedWeeks?: number;\n  difficulty?: number;\n  totalRatings?: number;\n  isEnrolled?: boolean;\n  enrollmentProgress?: number;\n  onEnroll?: (courseId: number) => void;\n  onViewDetails?: (courseId: number) => void;\n  onContinue?: (courseId: number) => void;\n  onManage?: (courseId: number) => void;\n}\n\nexport const CourseCard = ({ \n  id, \n  title, \n  description, \n  instructor,\n  mentorName,\n  duration, \n  level, \n  category,\n  price, \n  rating,\n  averageRating,\n  students,\n  currentEnrollments = 0,\n  maxStudents = 0,\n  imageUrl,\n  tags = [],\n  status = \"published\",\n  prerequisites = [],\n  estimatedWeeks,\n  difficulty,\n  totalRatings = 0,\n  isEnrolled = false,\n  enrollmentProgress = 0,\n  onEnroll,\n  onViewDetails,\n  onContinue,\n  onManage\n}: CourseCardProps) => {\n  const currentUser = getCurrentUser();\n  const isMentor = hasRole(\"mentor\");\n  const isAdmin = hasRole(\"admin\");\n  \n  const displayRating = rating || averageRating || 0;\n  const displayStudents = students || currentEnrollments || 0;\n  const instructorName = instructor || mentorName || \"Unknown Instructor\";\n\n  const getStatusColor = (courseStatus: string) => {\n    switch (courseStatus) {\n      case \"draft\": return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"approved\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"published\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"rejected\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const getLevelColor = (courseLevel: string) => {\n    switch (courseLevel?.toLowerCase()) {\n      case \"beginner\": return \"secondary\";\n      case \"intermediate\": return \"default\";\n      case \"advanced\": return \"destructive\";\n      default: return \"outline\";\n    }\n  };\n\n  const getDifficultyText = (diff?: number) => {\n    if (!diff) return \"\";\n    if (diff <= 3) return \"Easy\";\n    if (diff <= 6) return \"Medium\";\n    return \"Hard\";\n  };\n\n  return (\n    <Card className=\"h-full flex flex-col hover:shadow-lg transition-shadow duration-300 group\">\n      {imageUrl && (\n        <div className=\"aspect-video overflow-hidden rounded-t-lg\">\n          <img\n            src={imageUrl}\n            alt={title}\n            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n          />\n        </div>\n      )}\n      \n      <CardHeader className=\"flex-grow\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <CardTitle className=\"text-lg leading-tight group-hover:text-primary transition-colors flex-1\">\n            {title}\n          </CardTitle>\n          <div className=\"flex flex-col gap-1\">\n            <Badge variant={getLevelColor(level)}>\n              {level}\n            </Badge>\n            {status !== \"published\" && (\n              <Badge className={getStatusColor(status)}>\n                {status}\n              </Badge>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <BookOpen className=\"h-4 w-4\" />\n          <span className=\"capitalize\">{category}</span>\n          {difficulty && (\n            <>\n              <span>•</span>\n              <span>{getDifficultyText(difficulty)}</span>\n            </>\n          )}\n        </div>\n\n        <CardDescription className=\"text-sm text-muted-foreground line-clamp-3\">\n          {description}\n        </CardDescription>\n        \n        {tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mt-2\">\n            {tags.slice(0, 3).map((tag, index) => (\n              <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                {tag}\n              </Badge>\n            ))}\n            {tags.length > 3 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{tags.length - 3}\n              </Badge>\n            )}\n          </div>\n        )}\n\n        {prerequisites.length > 0 && (\n          <div className=\"text-xs text-muted-foreground\">\n            <span className=\"font-medium\">Prerequisites:</span> {prerequisites.slice(0, 2).join(\", \")}\n            {prerequisites.length > 2 && \" ...\"}\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        <div className=\"text-sm text-muted-foreground\">\n          <span className=\"font-medium\">Instructor:</span> {instructorName}\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-2 text-sm\">\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"h-4 w-4 text-blue-500\" />\n            <span>{Math.floor(duration / 60)}h {duration % 60}m</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Users className=\"h-4 w-4 text-green-500\" />\n            <span>\n              {displayStudents}\n              {maxStudents > 0 && `/${maxStudents}`}\n            </span>\n          </div>\n          {estimatedWeeks && (\n            <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n              <span>Duration: {estimatedWeeks} weeks</span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-1\">\n            <StarIcon className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n            <span className=\"text-sm font-medium\">{displayRating.toFixed(1)}</span>\n            {totalRatings > 0 && (\n              <span className=\"text-xs text-muted-foreground\">({totalRatings})</span>\n            )}\n          </div>\n          <div className=\"flex items-center gap-1 text-lg font-bold text-primary\">\n            <DollarSign className=\"h-5 w-5\" />\n            <span>{Number(price).toFixed(2)}</span>\n          </div>\n        </div>\n\n        {/* Enrollment Progress */}\n        {isEnrolled && enrollmentProgress > 0 && (\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Progress</span>\n              <span className=\"font-medium\">{Math.round(enrollmentProgress)}%</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                style={{ width: `${enrollmentProgress}%` }}\n              />\n            </div>\n          </div>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"flex gap-2 pt-4\">\n        {isEnrolled ? (\n          <>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onViewDetails?.(id)}\n              className=\"flex-1\"\n            >\n              View Details\n            </Button>\n            <Button\n              size=\"sm\"\n              onClick={() => onContinue?.(id)}\n              className=\"flex-1\"\n            >\n              <PlayCircle className=\"h-4 w-4 mr-1\" />\n              Continue\n            </Button>\n          </>\n        ) : (\n          <>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onViewDetails?.(id)}\n              className=\"flex-1\"\n            >\n              View Details\n            </Button>\n            {status === \"published\" && onEnroll && (\n              <Button\n                size=\"sm\"\n                onClick={() => onEnroll(id)}\n                className=\"flex-1\"\n              >\n                Enroll Now\n              </Button>\n            )}\n          </>\n        )}\n\n        {/* Management Actions for Mentors/Admins */}\n        {(isMentor || isAdmin) && onManage && (\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => onManage(id)}\n            className=\"min-w-fit\"\n          >\n            Manage\n          </Button>\n        )}\n      </CardFooter>\n    </Card>\n  );\n};","size_bytes":8948},"client/src/components/CourseCategories.tsx":{"content":"import { Guitar, Piano, Drum, Mic, Music4, Music } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { CourseCard } from \"./CourseCard\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Course } from \"@shared/schema\";\nimport { CourseCardSkeleton } from \"./LoadingSkeletons\";\n\ninterface CourseCategoriesProps {\n  onCourseClick?: (courseId: number, courseName: string) => void;\n}\n\nexport const CourseCategories = ({ onCourseClick }: CourseCategoriesProps = {}) => {\n  const [, setLocation] = useLocation();\n  const { data: courses, isLoading } = useQuery<Course[]>({\n    queryKey: ['/api/courses'],\n  });\n\n  const handleCourseClick = (courseId: number, courseName: string) => {\n    if (onCourseClick) {\n      onCourseClick(courseId, courseName);\n    } else {\n      // Default behavior: navigate to course detail page\n      setLocation(`/courses/${courseId}`);\n    }\n  };\n\n  const categories = [\n    { icon: Piano, name: \"Piano\", count: courses?.filter(c => c.category === \"piano\").length || 0, color: \"text-blue-500\" },\n    { icon: Guitar, name: \"Guitar\", count: courses?.filter(c => c.category === \"guitar\").length || 0, color: \"text-green-500\" },\n    { icon: Music4, name: \"Violin\", count: courses?.filter(c => c.category === \"violin\").length || 0, color: \"text-purple-500\" },\n    { icon: Drum, name: \"Drums\", count: courses?.filter(c => c.category === \"drums\").length || 0, color: \"text-red-500\" },\n    { icon: Mic, name: \"Vocals\", count: courses?.filter(c => c.category === \"vocals\").length || 0, color: \"text-yellow-500\" },\n    { icon: Music, name: \"Theory\", count: courses?.filter(c => c.category === \"theory\").length || 0, color: \"text-indigo-500\" }\n  ];\n\n  // Show top 4 courses for homepage (first 4 as featured)\n  const featuredCourses = courses?.slice(0, 4) || [];\n\n  return (\n    <section className=\"py-20\">\n      <div className=\"container mx-auto px-4\">\n        {/* Categories */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Learn Any Instrument\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-12\">\n            Choose from our wide selection of instrument courses taught by world-class musicians\n          </p>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6\">\n            {categories.map((category) => (\n              <div\n                key={category.name}\n                className=\"group p-6 bg-card rounded-xl shadow-musical hover:shadow-glow transition-all duration-300 hover:scale-105 cursor-pointer\"\n              >\n                <div className={`p-4 rounded-lg bg-muted/50 mb-4 ${category.color} mx-auto w-fit group-hover:bg-primary group-hover:text-primary-foreground transition-colors duration-300`}>\n                  <category.icon className=\"h-8 w-8\" />\n                </div>\n                <h3 className=\"font-semibold mb-2\">{category.name}</h3>\n                <p className=\"text-sm text-muted-foreground\">{category.count} courses</p>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Featured Courses */}\n        <div className=\"mb-12\">\n          <h3 className=\"text-3xl font-bold mb-8 text-center\">Featured Courses</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {isLoading ? (\n              Array.from({ length: 4 }, (_, i) => (\n                <CourseCardSkeleton key={i} />\n              ))\n            ) : featuredCourses.length > 0 ? (\n              featuredCourses.map((course) => (\n                <CourseCard \n                  key={course.id} \n                  title={course.title}\n                  instructor={`Mentor ID: ${course.mentorId || 'TBD'}`}\n                  rating={4.5}\n                  students={Math.floor(Math.random() * 1000) + 100}\n                  duration={`${course.duration || 30}h`}\n                  level={course.level as any}\n                  price={course.price || \"Free\"}\n                  image={course.imageUrl || \"\"}\n                  category={course.category}\n                  onClick={() => handleCourseClick(course.id, course.title)}\n                />\n              ))\n            ) : (\n              <div className=\"col-span-4 text-center py-8\">\n                <p className=\"text-muted-foreground\">\n                  Featured courses coming soon! Check out our course catalog for amazing learning opportunities.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":4587},"client/src/components/EmptyState.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\ninterface EmptyStateProps {\n  icon: LucideIcon;\n  title: string;\n  description: string;\n  actionText?: string;\n  onAction?: () => void;\n  className?: string;\n}\n\nexport const EmptyState = ({ \n  icon: Icon, \n  title, \n  description, \n  actionText, \n  onAction,\n  className = \"\"\n}: EmptyStateProps) => {\n  return (\n    <Card className={`p-12 text-center ${className}`}>\n      <div className=\"flex flex-col items-center space-y-4\">\n        <div className=\"p-4 bg-muted rounded-full\">\n          <Icon className=\"h-8 w-8 text-muted-foreground\" />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold text-foreground\">{title}</h3>\n          <p className=\"text-muted-foreground max-w-md mx-auto\">{description}</p>\n        </div>\n        \n        {actionText && onAction && (\n          <Button onClick={onAction} className=\"mt-4\">\n            {actionText}\n          </Button>\n        )}\n      </div>\n    </Card>\n  );\n};","size_bytes":1102},"client/src/components/FeaturesGrid.tsx":{"content":"import { Music, Users, Video, BookOpen, Trophy, Star } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst features = [\n  {\n    icon: BookOpen,\n    title: \"Interactive Lessons\",\n    description: \"Learn with hands-on lessons designed by professional musicians and educators.\",\n  },\n  {\n    icon: Users,\n    title: \"Expert Mentors\",\n    description: \"Connect with experienced musicians who will guide your musical journey.\",\n  },\n  {\n    icon: Video,\n    title: \"Live Sessions\",\n    description: \"Join real-time practice sessions and workshops with other learners.\",\n  },\n  {\n    icon: Music,\n    title: \"Practice Tools\",\n    description: \"Access metronomes, tuners, and other essential practice equipment.\",\n  },\n  {\n    icon: Trophy,\n    title: \"Progress Tracking\",\n    description: \"Monitor your improvement with detailed analytics and achievements.\",\n  },\n  {\n    icon: Star,\n    title: \"Community Support\",\n    description: \"Share your progress and get feedback from fellow music enthusiasts.\",\n  },\n];\n\nexport const FeaturesGrid = () => {\n  return (\n    <section className=\"py-20 bg-muted/30\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold mb-4 bg-gradient-hero bg-clip-text text-transparent\">\n            Everything You Need to Master Music\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            From beginner to professional, our platform provides all the tools and support you need\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <Card key={index} className=\"group hover:shadow-musical transition-all duration-300 hover:-translate-y-1\">\n                <CardHeader>\n                  <div className=\"w-12 h-12 bg-gradient-hero rounded-lg flex items-center justify-center mb-4 group-hover:scale-110 transition-transform\">\n                    <Icon className=\"h-6 w-6 text-primary-foreground\" />\n                  </div>\n                  <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-base\">\n                    {feature.description}\n                  </CardDescription>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":2620},"client/src/components/Footer.tsx":{"content":"import { Music, Mail, Phone, MapPin, Facebook, Twitter, Instagram, Youtube } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport const Footer = () => {\n  return (\n    <footer className=\"bg-card border-t\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand & Description */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Music className=\"h-8 w-8 text-primary\" />\n              <span className=\"text-2xl font-bold\">HarmonyLearn</span>\n            </div>\n            <p className=\"text-muted-foreground\">\n              Empowering musicians worldwide with quality education and a vibrant community.\n            </p>\n            <div className=\"flex space-x-4\">\n              <Facebook className=\"h-5 w-5 text-muted-foreground hover:text-primary cursor-pointer transition-colors\" />\n              <Twitter className=\"h-5 w-5 text-muted-foreground hover:text-primary cursor-pointer transition-colors\" />\n              <Instagram className=\"h-5 w-5 text-muted-foreground hover:text-primary cursor-pointer transition-colors\" />\n              <Youtube className=\"h-5 w-5 text-muted-foreground hover:text-primary cursor-pointer transition-colors\" />\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Quick Links</h3>\n            <div className=\"flex flex-col space-y-2\">\n              <Link to=\"/courses\" className=\"text-muted-foreground hover:text-primary transition-colors\">Courses</Link>\n              <Link to=\"/mentors\" className=\"text-muted-foreground hover:text-primary transition-colors\">Mentors</Link>\n              <Link to=\"/live-sessions\" className=\"text-muted-foreground hover:text-primary transition-colors\">Live Sessions</Link>\n              <Link to=\"/about\" className=\"text-muted-foreground hover:text-primary transition-colors\">About Us</Link>\n            </div>\n          </div>\n\n          {/* Learning */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Learning</h3>\n            <div className=\"flex flex-col space-y-2\">\n              <Link to=\"/community\" className=\"text-muted-foreground hover:text-primary transition-colors\">Community</Link>\n              <Link to=\"/tools\" className=\"text-muted-foreground hover:text-primary transition-colors\">Practice Tools</Link>\n              <Link to=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Help Center</Link>\n              <Link to=\"#\" className=\"text-muted-foreground hover:text-primary transition-colors\">Support</Link>\n            </div>\n          </div>\n\n          {/* Contact Info */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Contact</h3>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Mail className=\"h-4 w-4\" />\n                <span>info@harmonylearn.com</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <Phone className=\"h-4 w-4\" />\n                <span>+1 (555) 123-4567</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <MapPin className=\"h-4 w-4\" />\n                <span>123 Music St, Harmony City</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t mt-8 pt-8 text-center text-muted-foreground\">\n          <p>&copy; 2024 HarmonyLearn. All rights reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n};","size_bytes":3769},"client/src/components/Header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Music, Bell, User, BookOpen, Users, Settings, Video, Shield, GraduationCap, Lightbulb } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { getCurrentUser, canCreateClassrooms, onAuthStateChange } from \"@/lib/auth\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  navigationMenuTriggerStyle,\n} from \"@/components/ui/navigation-menu\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport const Header = () => {\n  const [location] = useLocation();\n  const currentPath = location;\n  const [currentUser, setCurrentUser] = useState(getCurrentUser());\n  const canAccessClassrooms = canCreateClassrooms();\n\n  const isActive = (path: string) => currentPath === path;\n\n  // Listen for user authentication state changes\n  useEffect(() => {\n    const cleanup = onAuthStateChange((user) => {\n      setCurrentUser(user);\n    });\n    return cleanup;\n  }, []);\n\n  return (\n    <header className=\"sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b border-border\">\n      <div className=\"container mx-auto px-4 h-16 flex items-center justify-between\">\n        {/* Logo */}\n        <Link to=\"/\" className=\"flex items-center space-x-2\">\n          <div className=\"p-2 bg-gradient-hero rounded-lg shadow-glow\">\n            <Music className=\"h-6 w-6 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-2xl font-bold bg-gradient-hero bg-clip-text text-transparent\">\n            HarmonyLearn\n          </h1>\n        </Link>\n\n        {/* Navigation */}\n        <NavigationMenu className=\"hidden md:flex\">\n          <NavigationMenuList className=\"space-x-2\">\n            <NavigationMenuItem>\n              <NavigationMenuTrigger className={`${navigationMenuTriggerStyle()} group hover:bg-primary/10 transition-all duration-300`}>\n                <GraduationCap className=\"mr-2 h-4 w-4 transition-transform group-hover:scale-110\" />\n                Learn\n              </NavigationMenuTrigger>\n              <NavigationMenuContent className=\"animate-fade-in\">\n                <div className=\"grid gap-3 p-6 w-[400px] lg:w-[500px] lg:grid-cols-[.75fr_1fr]\">\n                  <div className=\"row-span-3\">\n                    <NavigationMenuLink asChild>\n                      <Link\n                        to=\"/courses\"\n                        className=\"flex h-full w-full select-none flex-col justify-end rounded-md bg-gradient-hero p-6 no-underline outline-none focus:shadow-md hover:shadow-glow transition-all duration-300 transform hover:scale-[1.02] group\"\n                      >\n                        <Music className=\"h-6 w-6 text-primary-foreground group-hover:animate-pulse\" />\n                        <div className=\"mb-2 mt-4 text-lg font-medium text-primary-foreground\">\n                          All Courses\n                        </div>\n                        <p className=\"text-sm leading-tight text-primary-foreground/80\">\n                          Browse our complete collection of music courses\n                        </p>\n                      </Link>\n                    </NavigationMenuLink>\n                  </div>\n                  <NavigationMenuLink asChild>\n                    <Link to=\"/learning-paths\" className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-all duration-300 hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground hover:scale-105 hover:shadow-md group\">\n                      <div className=\"text-sm font-medium leading-none flex items-center\">\n                        Learning Paths\n                        <div className=\"ml-2 w-2 h-2 bg-primary rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                      </div>\n                      <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground group-hover:text-accent-foreground/80 transition-colors\">\n                        Structured journeys for mastering instruments\n                      </p>\n                    </Link>\n                  </NavigationMenuLink>\n                  <NavigationMenuLink asChild>\n                    <Link to=\"/mentors\" className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-all duration-300 hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground hover:scale-105 hover:shadow-md group\">\n                      <div className=\"text-sm font-medium leading-none flex items-center\">\n                        Find Mentors\n                        <div className=\"ml-2 w-2 h-2 bg-primary rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                      </div>\n                      <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground group-hover:text-accent-foreground/80 transition-colors\">\n                        Connect with experienced music teachers\n                      </p>\n                    </Link>\n                  </NavigationMenuLink>\n                </div>\n              </NavigationMenuContent>\n            </NavigationMenuItem>\n\n            <NavigationMenuItem>\n              <NavigationMenuLink asChild>\n                <Link \n                  to=\"/live-sessions\" \n                  className={`${navigationMenuTriggerStyle()} flex items-center space-x-2 group hover:bg-primary/10 transition-all duration-300`}\n                >\n                  <Video className=\"h-4 w-4 transition-transform group-hover:scale-110\" />\n                  <span>Live Sessions</span>\n                  <Badge className=\"bg-accent text-accent-foreground text-xs px-1 ml-1 animate-pulse\">LIVE</Badge>\n                </Link>\n              </NavigationMenuLink>\n            </NavigationMenuItem>\n\n            <NavigationMenuItem>\n              <NavigationMenuTrigger className={`${navigationMenuTriggerStyle()} group hover:bg-primary/10 transition-all duration-300`}>\n                <Lightbulb className=\"mr-2 h-4 w-4 transition-transform group-hover:scale-110 group-hover:rotate-12\" />\n                Resources\n              </NavigationMenuTrigger>\n              <NavigationMenuContent className=\"animate-fade-in\">\n                <div className=\"w-[350px] p-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <NavigationMenuLink asChild>\n                      <Link to=\"/tools\" className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-all duration-300 hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground hover:scale-105 hover:shadow-md group\">\n                        <div className=\"text-sm font-medium leading-none flex items-center\">\n                          Practice Tools\n                          <div className=\"ml-2 w-2 h-2 bg-primary rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                        </div>\n                        <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground group-hover:text-accent-foreground/80 transition-colors\">\n                          Tuners, metronomes, and more\n                        </p>\n                      </Link>\n                    </NavigationMenuLink>\n                    <NavigationMenuLink asChild>\n                      <Link to=\"/community\" className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-all duration-300 hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground hover:scale-105 hover:shadow-md group\">\n                        <div className=\"text-sm font-medium leading-none flex items-center\">\n                          Community\n                          <div className=\"ml-2 w-2 h-2 bg-primary rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                        </div>\n                        <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground group-hover:text-accent-foreground/80 transition-colors\">\n                          Join our vibrant music community\n                        </p>\n                      </Link>\n                    </NavigationMenuLink>\n                  </div>\n                </div>\n              </NavigationMenuContent>\n            </NavigationMenuItem>\n\n            {canAccessClassrooms && (\n              <NavigationMenuItem>\n                <NavigationMenuLink asChild>\n                  <Link \n                    to=\"/classroom\" \n                    className={`${navigationMenuTriggerStyle()} flex items-center space-x-2 group hover:bg-primary/10 transition-all duration-300`}\n                  >\n                    <Users className=\"h-4 w-4 transition-transform group-hover:scale-110\" />\n                    <span>Classroom</span>\n                    <Badge className=\"bg-secondary text-secondary-foreground text-xs px-1 ml-1\">MASTER</Badge>\n                  </Link>\n                </NavigationMenuLink>\n              </NavigationMenuItem>\n            )}\n\n            <NavigationMenuItem>\n              <NavigationMenuLink asChild>\n                <Link \n                  to=\"/about\" \n                  className={`${navigationMenuTriggerStyle()} transition-all duration-300 hover:bg-primary/10 hover:scale-105`}\n                >\n                  About Us\n                </Link>\n              </NavigationMenuLink>\n            </NavigationMenuItem>\n          </NavigationMenuList>\n        </NavigationMenu>\n\n\n        {/* User Actions */}\n        <div className=\"flex items-center space-x-2\">\n          <ThemeToggle />\n          \n          <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n            <Bell className=\"h-5 w-5\" />\n            <span className=\"absolute -top-1 -right-1 h-3 w-3 bg-accent rounded-full\"></span>\n          </Button>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon\">\n                <User className=\"h-5 w-5\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuItem asChild>\n                <Link to=\"/get-started\" className=\"flex items-center w-full\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Get Started\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to=\"/student-signin\" className=\"flex items-center w-full\">\n                  <GraduationCap className=\"mr-2 h-4 w-4\" />\n                  Student Sign In\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to=\"/mentor-signin\" className=\"flex items-center w-full\">\n                  <Users className=\"mr-2 h-4 w-4\" />\n                  Mentor Sign In\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to=\"/admin-signin\" className=\"flex items-center w-full\">\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Admin Sign In\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <Link to=\"/dashboard\" className=\"flex items-center w-full\">\n                  <BookOpen className=\"mr-2 h-4 w-4\" />\n                  My Dashboard\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to=\"/community\" className=\"flex items-center w-full\">\n                  <Users className=\"mr-2 h-4 w-4\" />\n                  Community\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to=\"/settings\" className=\"flex items-center w-full\">\n                  <Settings className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <Link to=\"/mentor-mode\" className=\"flex items-center w-full\">\n                  Switch to Mentor Mode\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuItem asChild>\n                <Link to=\"/admin\" className=\"flex items-center w-full\">\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Admin Panel\n                </Link>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <Button variant=\"hero\" size=\"sm\" asChild>\n            <Link to=\"/get-started\">Get Started</Link>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n};","size_bytes":13207},"client/src/components/Hero.tsx":{"content":"import { Play, Users, Award, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport heroImage from \"@/assets/hero-music.jpg\";\nimport heroStudio from \"@/assets/hero-studio.jpg\";\nimport heroConcert from \"@/assets/hero-concert.jpg\";\nexport const Hero = () => {\n  const backgroundImages = [heroImage, heroStudio, heroConcert];\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentImageIndex(prev => (prev + 1) % backgroundImages.length);\n    }, 5000); // Change image every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [backgroundImages.length]);\n  return <section className=\"relative min-h-[80vh] flex items-center overflow-hidden\">\n      {/* Background Carousel */}\n      <div className=\"absolute inset-0\">\n        {backgroundImages.map((image, index) => <div key={index} className={`absolute inset-0 bg-cover bg-center bg-no-repeat transition-opacity duration-1000 ${index === currentImageIndex ? 'opacity-100' : 'opacity-0'}`} style={{\n        backgroundImage: `url(${image})`\n      }} />)}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-background/95 via-background/60 to-background/5\"></div>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative container mx-auto px-4 py-20\">\n        <div className=\"max-w-3xl\">\n          <h1 className=\"text-5xl md:text-7xl font-bold mb-6 animate-slide-up\">\n            Master Music with{\" \"}\n            <span className=\"bg-gradient-hero bg-clip-text text-transparent\">\n              HarmonyLearn\n            </span>\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 animate-slide-up\">\n            Learn instruments, master techniques, and connect with a global community \n            of music enthusiasts. From beginner to virtuoso, your musical journey starts here.\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 mb-12 animate-slide-up\">\n            <Button variant=\"hero\" size=\"lg\" className=\"text-lg px-8 py-4\" asChild>\n              <Link to=\"/live-sessions\">\n                <Play className=\"mr-2 h-5 w-5\" />\n                Start Learning Now\n              </Link>\n            </Button>\n            <Button variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-4\" asChild>\n              <Link to=\"/mentors\">\n                Browse Courses\n              </Link>\n            </Button>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 animate-slide-up\">\n            <div className=\"text-center p-4 bg-card/80 backdrop-blur rounded-lg shadow-musical\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">50K+</div>\n              <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                <Users className=\"mr-1 h-4 w-4\" />\n                Students\n              </div>\n            </div>\n            <div className=\"text-center p-4 bg-card/80 backdrop-blur rounded-lg shadow-musical\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">1.2K+</div>\n              <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                <Play className=\"mr-1 h-4 w-4\" />\n                Courses\n              </div>\n            </div>\n            <div className=\"text-center p-4 bg-card/80 backdrop-blur rounded-lg shadow-musical\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">800+</div>\n              <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                <Award className=\"mr-1 h-4 w-4\" />\n                Mentors\n              </div>\n            </div>\n            <div className=\"text-center p-4 bg-card/80 backdrop-blur rounded-lg shadow-musical\">\n              <div className=\"text-2xl font-bold text-primary mb-1\">95%</div>\n              <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                <TrendingUp className=\"mr-1 h-4 w-4\" />\n                Success Rate\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Enhanced floating elements with more musical symbols */}\n      <div className=\"absolute top-20 left-20 opacity-20 animate-float\">\n        <div className=\"text-6xl\">🎸</div>\n      </div>\n      <div className=\"absolute bottom-20 left-32 opacity-20 animate-float\" style={{\n        animationDelay: '1.5s'\n      }}>\n        <div className=\"text-5xl\">♪</div>\n      </div>\n      <div className=\"absolute top-32 right-20 opacity-15 animate-float\" style={{\n        animationDelay: '3s'\n      }}>\n        <div className=\"text-4xl\">🎹</div>\n      </div>\n      <div className=\"absolute bottom-32 right-32 opacity-20 animate-float\" style={{\n        animationDelay: '0.5s'\n      }}>\n        <div className=\"text-5xl\">♫</div>\n      </div>\n    </section>;\n};","size_bytes":5031},"client/src/components/LoadingSkeletons.tsx":{"content":"import { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\nexport const CourseCardSkeleton = () => (\n  <Card className=\"h-full\">\n    <CardHeader>\n      <div className=\"flex items-center justify-between mb-2\">\n        <Skeleton className=\"h-5 w-20\" />\n        <div className=\"flex items-center gap-1\">\n          <Skeleton className=\"h-4 w-4\" />\n          <Skeleton className=\"h-4 w-8\" />\n        </div>\n      </div>\n      <Skeleton className=\"h-6 w-3/4 mb-2\" />\n      <Skeleton className=\"h-4 w-full mb-1\" />\n      <Skeleton className=\"h-4 w-2/3\" />\n    </CardHeader>\n    <CardContent>\n      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n        <div className=\"flex items-center gap-1\">\n          <Skeleton className=\"h-4 w-4\" />\n          <Skeleton className=\"h-4 w-12\" />\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <Skeleton className=\"h-4 w-4\" />\n          <Skeleton className=\"h-4 w-16\" />\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <Skeleton className=\"h-4 w-4\" />\n          <Skeleton className=\"h-4 w-14\" />\n        </div>\n      </div>\n      <div className=\"mb-4\">\n        <Skeleton className=\"h-4 w-20 mb-2\" />\n        <div className=\"flex flex-wrap gap-1\">\n          <Skeleton className=\"h-6 w-16\" />\n          <Skeleton className=\"h-6 w-20\" />\n          <Skeleton className=\"h-6 w-14\" />\n        </div>\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <Skeleton className=\"h-6 w-16\" />\n        <Skeleton className=\"h-9 w-24\" />\n      </div>\n    </CardContent>\n  </Card>\n);\n\nexport const MentorCardSkeleton = () => (\n  <Card className=\"h-full\">\n    <div className=\"p-6\">\n      <div className=\"flex items-start gap-4 mb-4\">\n        <Skeleton className=\"h-16 w-16 rounded-full\" />\n        <div className=\"flex-1\">\n          <Skeleton className=\"h-6 w-32 mb-2\" />\n          <div className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-4 w-4\" />\n            <Skeleton className=\"h-4 w-8\" />\n            <Skeleton className=\"h-4 w-20\" />\n          </div>\n        </div>\n      </div>\n      <div className=\"mb-4\">\n        <div className=\"flex flex-wrap gap-1 mb-2\">\n          <Skeleton className=\"h-5 w-16\" />\n          <Skeleton className=\"h-5 w-12\" />\n        </div>\n      </div>\n      <Skeleton className=\"h-16 w-full mb-4\" />\n      <div className=\"flex items-center justify-between pt-4 border-t\">\n        <Skeleton className=\"h-6 w-16\" />\n        <div className=\"flex gap-2\">\n          <Skeleton className=\"h-8 w-8\" />\n          <Skeleton className=\"h-8 w-24\" />\n        </div>\n      </div>\n    </div>\n  </Card>\n);\n\nexport const LiveSessionSkeleton = () => (\n  <Card className=\"p-6\">\n    <div className=\"flex items-start justify-between mb-4\">\n      <div className=\"flex-1\">\n        <Skeleton className=\"h-6 w-48 mb-2\" />\n        <Skeleton className=\"h-4 w-32 mb-2\" />\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-1\">\n            <Skeleton className=\"h-4 w-4\" />\n            <Skeleton className=\"h-4 w-16\" />\n          </div>\n          <div className=\"flex items-center space-x-1\">\n            <Skeleton className=\"h-4 w-4\" />\n            <Skeleton className=\"h-4 w-12\" />\n          </div>\n        </div>\n      </div>\n      <Skeleton className=\"h-6 w-16\" />\n    </div>\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex items-center space-x-2\">\n        <Skeleton className=\"h-4 w-4\" />\n        <Skeleton className=\"h-4 w-24\" />\n      </div>\n      <Skeleton className=\"h-9 w-24\" />\n    </div>\n  </Card>\n);\n\nexport const LoadingGrid = ({ \n  children, \n  count = 6, \n  className = \"grid md:grid-cols-2 lg:grid-cols-3 gap-8\" \n}: { \n  children: React.ReactNode; \n  count?: number; \n  className?: string;\n}) => (\n  <div className={className}>\n    {Array.from({ length: count }, (_, i) => (\n      <div key={i}>{children}</div>\n    ))}\n  </div>\n);","size_bytes":4013},"client/src/components/MentorSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Music, Guitar, Piano, Mic, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { MentorProfile } from \"@shared/schema\";\nimport { MentorCardSkeleton } from \"@/components/LoadingSkeletons\";\n\nexport const MentorSection = () => {\n  const { data: mentors, isLoading } = useQuery<MentorProfile[]>({\n    queryKey: ['/api/mentors'],\n  });\n\n  // Show top 3 mentors for homepage\n  const featuredMentors = mentors?.slice(0, 3) || [];\n\n  const mentorBenefits = [\n  {\n    title: \"Personalized Learning\",\n    description: \"Get customized lessons tailored to your skill level and musical goals\"\n  },\n  {\n    title: \"Real-time Feedback\", \n    description: \"Receive immediate guidance and corrections during live practice sessions\"\n  },\n  {\n    title: \"Professional Network\",\n    description: \"Connect with industry professionals and expand your musical connections\"\n  },\n  {\n    title: \"Flexible Scheduling\",\n    description: \"Book sessions that fit your schedule with mentors in different time zones\"\n  }\n];\n\n  return (\n    <section className=\"py-20 bg-muted/20\">\n      <div className=\"container mx-auto px-4\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold mb-4 bg-gradient-hero bg-clip-text text-transparent\">\n            Learn from Expert Mentors\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Connect with professional musicians and experienced teachers who will guide you \n            on your musical journey with personalized instruction and expert feedback.\n          </p>\n        </div>\n\n        {/* Featured Mentors */}\n        <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          {isLoading ? (\n            Array.from({ length: 3 }, (_, i) => (\n              <MentorCardSkeleton key={i} />\n            ))\n          ) : featuredMentors.length > 0 ? (\n            featuredMentors.map((mentor, index) => (\n              <Card key={index} className=\"group hover:shadow-musical transition-all duration-300 hover:-translate-y-1\">\n                <CardHeader className=\"text-center\">\n                  <Avatar className=\"w-20 h-20 mx-auto mb-4\">\n                    <AvatarFallback className=\"text-lg\">\n                      {mentor.firstName?.[0]}{mentor.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <CardTitle className=\"text-xl\">{mentor.firstName} {mentor.lastName}</CardTitle>\n                  <CardDescription className=\"flex items-center justify-center gap-2\">\n                    <Music className=\"h-4 w-4\" />\n                    Music Mentor\n                  </CardDescription>\n                  \n                  <div className=\"flex items-center justify-center gap-1 mt-2\">\n                    <Star className=\"h-4 w-4 fill-secondary text-secondary\" />\n                    <span className=\"text-sm font-medium\">{mentor.rating || 'New'}</span>\n                    <span className=\"text-sm text-muted-foreground\">({mentor.totalStudents || 0} students)</span>\n                  </div>\n                </CardHeader>\n                \n                <CardContent>\n                  {mentor.bio && (\n                    <p className=\"text-sm text-muted-foreground mb-4 text-center\">\n                      {mentor.bio}\n                    </p>\n                  )}\n                  \n                  <div className=\"flex flex-wrap gap-2 justify-center mb-4\">\n                    {mentor.specializations && mentor.specializations.length > 0 ? (\n                      mentor.specializations.map((specialty, idx) => (\n                        <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                          {specialty}\n                        </Badge>\n                      ))\n                    ) : (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        Music Teacher\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <div className=\"text-center text-sm text-muted-foreground\">\n                    <div>${mentor.hourlyRate || 50}/hour</div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <div className=\"col-span-3 text-center py-8\">\n              <p className=\"text-muted-foreground\">\n                Amazing mentors are joining our platform. Check back soon!\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Mentor Benefits */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n          {mentorBenefits.map((benefit, index) => (\n            <Card key={index} className=\"text-center border-accent/20 bg-gradient-to-b from-accent/5 to-transparent\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-2 text-accent\">{benefit.title}</h3>\n                <p className=\"text-sm text-muted-foreground\">{benefit.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* CTA */}\n        <div className=\"text-center\">\n          <Button size=\"lg\" className=\"shadow-musical hover:shadow-glow transition-all\" asChild>\n            <Link to=\"/mentors\">\n              Find Your Perfect Mentor\n              <ArrowRight className=\"ml-2 h-5 w-5\" />\n            </Link>\n          </Button>\n          <p className=\"text-sm text-muted-foreground mt-4\">\n            Over 500+ verified mentors • Free consultation available\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":5971},"client/src/components/MusicalBackground.tsx":{"content":"import { FC } from \"react\";\n\ninterface MusicalBackgroundProps {\n  density?: \"light\" | \"medium\" | \"heavy\";\n  variant?: \"notes\" | \"instruments\" | \"mixed\";\n}\n\nexport const MusicalBackground: FC<MusicalBackgroundProps> = ({ \n  density = \"medium\", \n  variant = \"mixed\" \n}) => {\n  const noteElements = [\"♪\", \"♫\", \"♬\", \"♩\", \"♭\", \"♯\"];\n  const instrumentElements = [\"🎸\", \"🎹\", \"🥁\", \"🎺\", \"🎻\", \"🎤\", \"🎧\", \"🎷\"];\n  \n  const getElements = () => {\n    switch (variant) {\n      case \"notes\":\n        return noteElements;\n      case \"instruments\":\n        return instrumentElements;\n      case \"mixed\":\n        return [...noteElements, ...instrumentElements];\n      default:\n        return [...noteElements, ...instrumentElements];\n    }\n  };\n\n  const getElementCount = () => {\n    switch (density) {\n      case \"light\":\n        return 12;\n      case \"medium\":\n        return 20;\n      case \"heavy\":\n        return 30;\n      default:\n        return 20;\n    }\n  };\n\n  const elements = getElements();\n  const elementCount = getElementCount();\n\n  // Fixed positions for musical elements with better left-right distribution\n  const fixedPositions = [\n    { left: \"3%\", top: \"8%\" },\n    { left: \"8%\", top: \"25%\" },\n    { left: \"12%\", top: \"45%\" },\n    { left: \"6%\", top: \"80%\" },\n    { left: \"18%\", top: \"65%\" },\n    { left: \"22%\", top: \"12%\" },\n    { left: \"15%\", top: \"88%\" },\n    { left: \"28%\", top: \"35%\" },\n    { left: \"10%\", top: \"55%\" },\n    { left: \"35%\", top: \"70%\" },\n    { left: \"5%\", top: \"18%\" },\n    { left: \"42%\", top: \"92%\" },\n    { left: \"45%\", top: \"15%\" },\n    { left: \"38%\", top: \"75%\" },\n    { left: \"25%\", top: \"38%\" },\n    { left: \"55%\", top: \"85%\" },\n    { left: \"32%\", top: \"22%\" },\n    { left: \"62%\", top: \"58%\" },\n    { left: \"20%\", top: \"95%\" },\n    { left: \"68%\", top: \"42%\" },\n    { left: \"15%\", top: \"5%\" },\n    { left: \"75%\", top: \"60%\" },\n    { left: \"30%\", top: \"28%\" },\n    { left: \"82%\", top: \"82%\" },\n    { left: \"25%\", top: \"10%\" },\n    { left: \"88%\", top: \"48%\" },\n    { left: \"40%\", top: \"72%\" },\n    { left: \"92%\", top: \"32%\" },\n    { left: \"35%\", top: \"78%\" },\n    { left: \"97%\", top: \"52%\" }\n  ];\n\n  return (\n    <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n      {Array.from({ length: elementCount }).map((_, index) => {\n        const element = elements[index % elements.length];\n        const position = fixedPositions[index % fixedPositions.length];\n        const isEmoji = element.length > 1;\n        const size = isEmoji ? \"text-2xl md:text-3xl lg:text-4xl\" : \"text-3xl md:text-4xl lg:text-5xl\";\n        const opacity = density === \"light\" ? \"opacity-40\" : density === \"medium\" ? \"opacity-50\" : \"opacity-60\";\n        \n        return (\n          <div\n            key={index}\n            className={`absolute ${size} ${opacity} text-primary/70 select-none`}\n            style={{\n              left: position.left,\n              top: position.top,\n            }}\n          >\n            {element}\n          </div>\n        );\n      })}\n      \n      {/* Fixed decorative dots */}\n      {Array.from({ length: Math.floor(elementCount / 3) }).map((_, index) => {\n        const position = fixedPositions[(index + 6) % fixedPositions.length];\n        return (\n          <div\n            key={`dot-${index}`}\n            className=\"absolute w-1 h-1 bg-primary/40 rounded-full\"\n            style={{\n              left: position.left,\n              top: position.top,\n              transform: `translate(${20 + index * 10}px, ${10 + index * 5}px)`\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n};","size_bytes":3589},"client/src/components/PracticeTools.tsx":{"content":"import { Timer, Volume2, Music2, Zap, Target, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\nexport const PracticeTools = () => {\n  const tools = [\n    {\n      icon: Timer,\n      name: \"Metronome\",\n      description: \"Keep perfect time with our advanced metronome\",\n      features: [\"Variable BPM\", \"Time Signatures\", \"Accent Patterns\"],\n      color: \"text-blue-500\"\n    },\n    {\n      icon: Volume2,\n      name: \"Tuner\",\n      description: \"Precise tuning for all instruments\",\n      features: [\"Auto-detection\", \"Custom Tunings\", \"Visual Feedback\"],\n      color: \"text-green-500\"\n    },\n    {\n      icon: Music2,\n      name: \"Scale Trainer\",\n      description: \"Master scales and arpeggios\",\n      features: [\"All Modes\", \"Custom Exercises\", \"Progress Tracking\"],\n      color: \"text-purple-500\"\n    },\n    {\n      icon: Zap,\n      name: \"Rhythm Trainer\",\n      description: \"Develop your rhythmic skills\",\n      features: [\"Pattern Recognition\", \"Tap Exercises\", \"Difficulty Levels\"],\n      color: \"text-yellow-500\"\n    },\n    {\n      icon: Target,\n      name: \"Practice Planner\",\n      description: \"Organize effective practice sessions\",\n      features: [\"Session Goals\", \"Time Tracking\", \"Progress Reports\"],\n      color: \"text-red-500\"\n    },\n    {\n      icon: TrendingUp,\n      name: \"Progress Analytics\",\n      description: \"Track your musical growth\",\n      features: [\"Performance Metrics\", \"Goal Setting\", \"Achievement Badges\"],\n      color: \"text-indigo-500\"\n    }\n  ];\n\n  return (\n    <section className=\"py-20 bg-gradient-subtle\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n            Professional Practice Tools\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Enhance your practice sessions with our comprehensive suite of tools \n            designed to accelerate your musical development\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {tools.map((tool, index) => (\n            <Card key={tool.name} className=\"p-6 group hover:shadow-musical transition-all duration-300 hover:scale-105\">\n              <div className=\"flex items-center mb-4\">\n                <div className={`p-3 rounded-lg bg-muted/50 ${tool.color} mr-4`}>\n                  <tool.icon className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">{tool.name}</h3>\n              </div>\n              \n              <p className=\"text-muted-foreground mb-4\">{tool.description}</p>\n              \n              <ul className=\"space-y-2 mb-6\">\n                {tool.features.map((feature) => (\n                  <li key={feature} className=\"flex items-center text-sm\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full mr-3\"></div>\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n\n              <Button \n                variant=\"outline\" \n                className=\"w-full group-hover:bg-primary group-hover:text-primary-foreground transition-all duration-300\"\n              >\n                Try {tool.name}\n              </Button>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"text-center mt-12\">\n          <Button variant=\"hero\" size=\"lg\">\n            Access All Practice Tools\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":3583},"client/src/components/ProtectedRoute.tsx":{"content":"import { ReactNode, useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { getCurrentUser, isAuthenticated, User, isMaster } from \"@/lib/auth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, AlertTriangle, Home, LogIn } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  requiredRole?: 'student' | 'mentor' | 'admin';\n  requireAuth?: boolean;\n  allowedRoles?: ('student' | 'mentor' | 'admin')[];\n  redirectTo?: string;\n}\n\nexport const ProtectedRoute = ({ \n  children, \n  requiredRole, \n  requireAuth = true, \n  allowedRoles,\n  redirectTo = \"/\" \n}: ProtectedRouteProps) => {\n  const [, setLocation] = useLocation();\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const checkAuth = () => {\n      const currentUser = getCurrentUser();\n      setUser(currentUser);\n      \n      // If authentication is required but user is not authenticated\n      if (requireAuth && !currentUser) {\n        setError(\"authentication_required\");\n        setIsLoading(false);\n        return;\n      }\n\n      // If specific role is required\n      if (requiredRole && (!currentUser || currentUser.role !== requiredRole)) {\n        setError(\"insufficient_permissions\");\n        setIsLoading(false);\n        return;\n      }\n\n      // If user role must be in allowed roles list\n      if (allowedRoles && (!currentUser || !allowedRoles.includes(currentUser.role))) {\n        setError(\"insufficient_permissions\");\n        setIsLoading(false);\n        return;\n      }\n\n      // All checks passed\n      setError(null);\n      setIsLoading(false);\n    };\n\n    checkAuth();\n\n    // Listen for auth state changes\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'currentUser') {\n        checkAuth();\n      }\n    };\n\n    const handleAuthStateChange = () => {\n      checkAuth();\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    window.addEventListener('user-login', handleAuthStateChange);\n    window.addEventListener('user-logout', handleAuthStateChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('user-login', handleAuthStateChange);\n      window.removeEventListener('user-logout', handleAuthStateChange);\n    };\n  }, [requireAuth, requiredRole, allowedRoles]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <Shield className=\"h-12 w-12 mx-auto mb-4 text-primary animate-pulse\" />\n              <p className=\"text-muted-foreground\">Verifying access permissions...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error === \"authentication_required\") {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"text-center p-8\">\n            <AlertTriangle className=\"h-16 w-16 mx-auto mb-4 text-yellow-500\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Authentication Required</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              You need to sign in to access this page.\n            </p>\n            <div className=\"flex gap-3 justify-center\">\n              <Button onClick={() => setLocation(\"/get-started\")} className=\"gap-2\">\n                <LogIn className=\"h-4 w-4\" />\n                Sign In\n              </Button>\n              <Button variant=\"outline\" onClick={() => setLocation(\"/\")} className=\"gap-2\">\n                <Home className=\"h-4 w-4\" />\n                Home\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error === \"insufficient_permissions\") {\n    const userRoleText = user?.role ? ` as ${user.role}` : '';\n    const requiredText = requiredRole \n      ? `This page requires ${requiredRole} access.`\n      : allowedRoles \n        ? `This page requires one of the following roles: ${allowedRoles.join(', ')}.`\n        : 'You do not have permission to access this page.';\n\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"text-center p-8\">\n            <Shield className=\"h-16 w-16 mx-auto mb-4 text-red-500\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Access Denied</h2>\n            <p className=\"text-muted-foreground mb-2\">\n              You are currently signed in{userRoleText}.\n            </p>\n            <p className=\"text-muted-foreground mb-6\">\n              {requiredText}\n            </p>\n            <div className=\"flex gap-3 justify-center\">\n              <Button onClick={() => setLocation(redirectTo)} className=\"gap-2\">\n                <Home className=\"h-4 w-4\" />\n                Go Back\n              </Button>\n              {user?.role === 'student' && (\n                <Button variant=\"outline\" onClick={() => setLocation(\"/student-dashboard\")}>\n                  Student Dashboard\n                </Button>\n              )}\n              {user?.role === 'mentor' && (\n                <Button variant=\"outline\" onClick={() => setLocation(\"/mentor-dashboard\")}>\n                  Mentor Dashboard\n                </Button>\n              )}\n              {user?.role === 'admin' && (\n                <Button variant=\"outline\" onClick={() => setLocation(\"/admin\")}>\n                  Admin Panel\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // All checks passed, render the protected content\n  return <>{children}</>;\n};\n\n// Convenience components for specific roles\nexport const StudentRoute = ({ children, ...props }: Omit<ProtectedRouteProps, 'requiredRole'>) => (\n  <ProtectedRoute requiredRole=\"student\" redirectTo=\"/student-dashboard\" {...props}>\n    {children}\n  </ProtectedRoute>\n);\n\nexport const MentorRoute = ({ children, ...props }: Omit<ProtectedRouteProps, 'requiredRole'>) => (\n  <ProtectedRoute requiredRole=\"mentor\" redirectTo=\"/mentor-dashboard\" {...props}>\n    {children}\n  </ProtectedRoute>\n);\n\nexport const AdminRoute = ({ children, ...props }: Omit<ProtectedRouteProps, 'requiredRole'>) => {\n  const user = getCurrentUser();\n  \n  // If no user or not admin, redirect to admin sign-in\n  if (!user || user.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"text-center p-8\">\n            <Shield className=\"h-16 w-16 mx-auto mb-4 text-red-500\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Admin Access Required</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              You need to sign in as an administrator to access this panel.\n            </p>\n            <div className=\"flex gap-3 justify-center\">\n              <Button onClick={() => window.location.href = \"/admin-signin\"} className=\"gap-2 bg-gradient-to-r from-red-500 to-orange-600 hover:from-red-600 hover:to-orange-700\">\n                <Shield className=\"h-4 w-4\" />\n                Admin Sign In\n              </Button>\n              <Button variant=\"outline\" onClick={() => window.location.href = \"/\"} className=\"gap-2\">\n                <Home className=\"h-4 w-4\" />\n                Home\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"admin\" redirectTo=\"/admin-signin\" {...props}>\n      {children}\n    </ProtectedRoute>\n  );\n};\n\nexport const AuthenticatedRoute = ({ children, ...props }: Omit<ProtectedRouteProps, 'requireAuth'>) => (\n  <ProtectedRoute requireAuth={true} {...props}>\n    {children}\n  </ProtectedRoute>\n);\n\n// Master route for mentors with master status\nexport const MasterRoute = ({ children, ...props }: Omit<ProtectedRouteProps, 'requiredRole'>) => {\n  const user = getCurrentUser();\n  \n  // Check if user is authenticated and has mentor role with master status\n  if (!user || user.role !== 'mentor' || !isMaster()) {\n    return (\n      <ProtectedRoute \n        requiredRole=\"mentor\" \n        redirectTo=\"/mentor-dashboard\"\n        {...props}\n      >\n        <div className=\"min-h-screen bg-background flex items-center justify-center\">\n          <Card className=\"w-96\">\n            <CardContent className=\"text-center p-8\">\n              <Shield className=\"h-16 w-16 mx-auto mb-4 text-yellow-500\" />\n              <h2 className=\"text-2xl font-bold mb-2\">Master Access Required</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                This feature is only available to mentors with master status. Please apply for master role from your mentor dashboard.\n              </p>\n              <Button onClick={() => window.location.href = \"/mentor-dashboard\"} className=\"gap-2\">\n                <Home className=\"h-4 w-4\" />\n                Back to Mentor Dashboard\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </ProtectedRoute>\n    );\n  }\n\n  return (\n    <ProtectedRoute requiredRole=\"mentor\" redirectTo=\"/mentor-dashboard\" {...props}>\n      {children}\n    </ProtectedRoute>\n  );\n};","size_bytes":9605},"client/src/components/ResignationRequestForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { LogOut, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\nconst resignationFormSchema = z.object({\n  mentorId: z.number(),\n  classroomId: z.number(),\n  reason: z.string().min(10, \"Please provide a detailed reason (at least 10 characters)\"),\n});\n\ntype ResignationFormData = z.infer<typeof resignationFormSchema>;\n\ninterface ResignationRequestFormProps {\n  mentorId: number;\n  classroomId: number;\n  classroomTitle: string;\n}\n\nexport default function ResignationRequestForm({ mentorId, classroomId, classroomTitle }: ResignationRequestFormProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ResignationFormData>({\n    resolver: zodResolver(resignationFormSchema),\n    defaultValues: {\n      mentorId,\n      classroomId,\n      reason: \"\",\n    },\n  });\n\n  const resignationMutation = useMutation({\n    mutationFn: (data: ResignationFormData) =>\n      apiRequest(\"/api/resignation-requests\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Resignation Request Submitted\",\n        description: \"Your resignation request has been sent to the master teacher for review.\",\n      });\n      setOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/mentors\", mentorId, \"resignation-requests\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit resignation request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ResignationFormData) => {\n    resignationMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" className=\"border-red-200 text-red-700 hover:bg-red-50\">\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Request Resignation\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n            Request Resignation from {classroomTitle}\n          </DialogTitle>\n          <DialogDescription>\n            This will send a resignation request to the master teacher. Once approved, you'll be removed from the classroom staff and can join another academy.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Alert>\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <strong>Important:</strong> After resignation is approved, you'll lose access to all classroom materials and student interactions. This action cannot be undone.\n          </AlertDescription>\n        </Alert>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"reason\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Reason for Resignation</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Please explain why you wish to resign from this classroom. This will help the master teacher understand your decision.\"\n                      className=\"min-h-[100px]\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                disabled={resignationMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"destructive\"\n                disabled={resignationMutation.isPending}\n              >\n                {resignationMutation.isPending ? \"Submitting...\" : \"Submit Resignation Request\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5105},"client/src/components/ResignationRequestManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { CheckCircle, XCircle, Clock, User, MessageSquare, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ResignationRequest {\n  id: number;\n  mentorId: number;\n  classroomId: number;\n  reason: string;\n  status: string;\n  reviewedBy: number | null;\n  reviewedAt: string | null;\n  masterNotes: string | null;\n  createdAt: string;\n}\n\ninterface ResignationRequestManagerProps {\n  classroomId: number;\n  masterId: number;\n}\n\nexport default function ResignationRequestManager({ classroomId, masterId }: ResignationRequestManagerProps) {\n  const [selectedRequest, setSelectedRequest] = useState<ResignationRequest | null>(null);\n  const [reviewNotes, setReviewNotes] = useState(\"\");\n  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: resignationRequests = [], isLoading } = useQuery({\n    queryKey: [\"/api/resignation-requests\", { classroomId }],\n    queryFn: () => apiRequest(`/api/resignation-requests?classroomId=${classroomId}`),\n  });\n\n  const { data: mentors = [] } = useQuery({\n    queryKey: [\"/api/users\", { role: \"mentor\" }],\n    queryFn: () => apiRequest(\"/api/users?role=mentor\"),\n  });\n\n  const reviewMutation = useMutation({\n    mutationFn: ({ requestId, status, masterNotes }: { requestId: number; status: string; masterNotes?: string }) =>\n      apiRequest(`/api/resignation-requests/${requestId}/status`, {\n        method: \"PATCH\",\n        body: JSON.stringify({\n          status,\n          masterNotes,\n          reviewedBy: masterId,\n        }),\n      }),\n    onSuccess: (_, { status }) => {\n      toast({\n        title: \"Resignation Request Reviewed\",\n        description: `The resignation request has been ${status}.`,\n      });\n      setReviewDialogOpen(false);\n      setReviewNotes(\"\");\n      setSelectedRequest(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/resignation-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classroom-memberships\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to review resignation request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getMentorName = (mentorId: number) => {\n    const mentor = mentors.find((m: any) => m.id === mentorId);\n    return mentor ? `${mentor.firstName} ${mentor.lastName}` : \"Unknown Mentor\";\n  };\n\n  const handleReview = (request: ResignationRequest) => {\n    setSelectedRequest(request);\n    setReviewNotes(\"\");\n    setReviewDialogOpen(true);\n  };\n\n  const submitReview = (status: \"approved\" | \"rejected\") => {\n    if (!selectedRequest) return;\n    \n    reviewMutation.mutate({\n      requestId: selectedRequest.id,\n      status,\n      masterNotes: reviewNotes.trim() !== \"\" ? reviewNotes : undefined,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"outline\" className=\"border-yellow-300 text-yellow-700 bg-yellow-50\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case \"approved\":\n        return <Badge variant=\"outline\" className=\"border-green-300 text-green-700 bg-green-50\"><CheckCircle className=\"h-3 w-3 mr-1\" />Approved</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"outline\" className=\"border-red-300 text-red-700 bg-red-50\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Staff Resignation Requests</CardTitle>\n          <CardDescription>Loading resignation requests...</CardDescription>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  const pendingRequests = resignationRequests.filter((r: ResignationRequest) => r.status === \"pending\");\n  const reviewedRequests = resignationRequests.filter((r: ResignationRequest) => r.status !== \"pending\");\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Pending Requests */}\n      {pendingRequests.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n              Pending Resignation Requests ({pendingRequests.length})\n            </CardTitle>\n            <CardDescription>\n              Staff members requesting to leave your academy\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {pendingRequests.map((request: ResignationRequest) => (\n              <div key={request.id} className=\"border rounded-lg p-4 bg-amber-50/50 border-amber-200\">\n                <div className=\"flex justify-between items-start mb-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <User className=\"h-4 w-4 text-gray-500\" />\n                    <span className=\"font-medium\">{getMentorName(request.mentorId)}</span>\n                    {getStatusBadge(request.status)}\n                  </div>\n                  <span className=\"text-sm text-gray-500\">\n                    {new Date(request.createdAt).toLocaleDateString()}\n                  </span>\n                </div>\n                \n                <div className=\"mb-3\">\n                  <label className=\"text-sm font-medium text-gray-700 mb-1 block\">\n                    Reason for Resignation:\n                  </label>\n                  <p className=\"text-sm text-gray-600 bg-white p-3 rounded border\">\n                    {request.reason}\n                  </p>\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    onClick={() => handleReview(request)}\n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                  >\n                    Review Request\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Reviewed Requests History */}\n      {reviewedRequests.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Resignation Request History</CardTitle>\n            <CardDescription>Previously reviewed resignation requests</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {reviewedRequests.map((request: ResignationRequest) => (\n              <div key={request.id} className=\"border rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <User className=\"h-4 w-4 text-gray-500\" />\n                    <span className=\"font-medium\">{getMentorName(request.mentorId)}</span>\n                    {getStatusBadge(request.status)}\n                  </div>\n                  <div className=\"text-right text-sm text-gray-500\">\n                    <div>Submitted: {new Date(request.createdAt).toLocaleDateString()}</div>\n                    {request.reviewedAt && (\n                      <div>Reviewed: {new Date(request.reviewedAt).toLocaleDateString()}</div>\n                    )}\n                  </div>\n                </div>\n                {request.masterNotes && (\n                  <div className=\"mt-2 p-2 bg-gray-50 rounded text-sm\">\n                    <strong>Master Notes:</strong> {request.masterNotes}\n                  </div>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {resignationRequests.length === 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Staff Resignation Requests</CardTitle>\n            <CardDescription>No resignation requests for your academy</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-center text-gray-500 py-8\">\n              All your staff members are happy and engaged! No resignation requests at this time.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Review Dialog */}\n      <Dialog open={reviewDialogOpen} onOpenChange={setReviewDialogOpen}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Review Resignation Request</DialogTitle>\n            <DialogDescription>\n              {selectedRequest && (\n                <>Review resignation request from {getMentorName(selectedRequest.mentorId)}</>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedRequest && (\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Resignation Reason:</label>\n                <div className=\"p-3 bg-gray-50 rounded border text-sm\">\n                  {selectedRequest.reason}\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Master Notes (Optional):</label>\n                <Textarea\n                  placeholder=\"Add notes about your decision (optional)...\"\n                  value={reviewNotes}\n                  onChange={(e) => setReviewNotes(e.target.value)}\n                  className=\"min-h-[80px]\"\n                />\n              </div>\n\n              <Alert>\n                <AlertTriangle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>Approving</strong> this request will immediately remove the mentor from your academy staff. \n                  They can then apply to join other academies.\n                </AlertDescription>\n              </Alert>\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setReviewDialogOpen(false)}\n                  disabled={reviewMutation.isPending}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => submitReview(\"rejected\")}\n                  disabled={reviewMutation.isPending}\n                >\n                  {reviewMutation.isPending ? \"Processing...\" : \"Reject\"}\n                </Button>\n                <Button\n                  onClick={() => submitReview(\"approved\")}\n                  disabled={reviewMutation.isPending}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  {reviewMutation.isPending ? \"Processing...\" : \"Approve Resignation\"}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":11374},"client/src/components/ResignationRequestStatus.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, XCircle, Clock, AlertTriangle } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ResignationRequest {\n  id: number;\n  mentorId: number;\n  classroomId: number;\n  reason: string;\n  status: string;\n  reviewedBy: number | null;\n  reviewedAt: string | null;\n  masterNotes: string | null;\n  createdAt: string;\n}\n\ninterface ResignationRequestStatusProps {\n  mentorId: number;\n}\n\nexport default function ResignationRequestStatus({ mentorId }: ResignationRequestStatusProps) {\n  const { data: resignationRequests = [], isLoading } = useQuery({\n    queryKey: [\"/api/mentors\", mentorId, \"resignation-requests\"],\n    queryFn: () => apiRequest(`/api/mentors/${mentorId}/resignation-requests`),\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Badge variant=\"outline\" className=\"border-yellow-300 text-yellow-700 bg-yellow-50\"><Clock className=\"h-3 w-3 mr-1\" />Pending Review</Badge>;\n      case \"approved\":\n        return <Badge variant=\"outline\" className=\"border-green-300 text-green-700 bg-green-50\"><CheckCircle className=\"h-3 w-3 mr-1\" />Approved</Badge>;\n      case \"rejected\":\n        return <Badge variant=\"outline\" className=\"border-red-300 text-red-700 bg-red-50\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getStatusMessage = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"Your resignation request is being reviewed by the master teacher.\";\n      case \"approved\":\n        return \"Your resignation has been approved. You have been removed from the academy.\";\n      case \"rejected\":\n        return \"Your resignation request was not approved. Please contact the master teacher for more information.\";\n      default:\n        return \"\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Resignation Status</CardTitle>\n          <CardDescription>Loading resignation request status...</CardDescription>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  if (resignationRequests.length === 0) {\n    return null; // Don't show anything if there are no resignation requests\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n          Resignation Request Status\n        </CardTitle>\n        <CardDescription>\n          Track the status of your resignation requests\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {resignationRequests.map((request: ResignationRequest) => (\n          <div key={request.id} className=\"border rounded-lg p-4\">\n            <div className=\"flex justify-between items-start mb-3\">\n              <div className=\"flex items-center gap-2\">\n                {getStatusBadge(request.status)}\n              </div>\n              <div className=\"text-right text-sm text-gray-500\">\n                <div>Submitted: {new Date(request.createdAt).toLocaleDateString()}</div>\n                {request.reviewedAt && (\n                  <div>Reviewed: {new Date(request.reviewedAt).toLocaleDateString()}</div>\n                )}\n              </div>\n            </div>\n            \n            <p className=\"text-sm text-gray-600 mb-2\">\n              {getStatusMessage(request.status)}\n            </p>\n            \n            {request.masterNotes && (\n              <div className=\"mt-3 p-3 bg-blue-50 rounded border-l-4 border-blue-400\">\n                <p className=\"text-sm font-medium text-blue-900 mb-1\">Master Teacher Notes:</p>\n                <p className=\"text-sm text-blue-800\">{request.masterNotes}</p>\n              </div>\n            )}\n            \n            {request.status === \"pending\" && (\n              <div className=\"mt-3 p-3 bg-yellow-50 rounded border-l-4 border-yellow-400\">\n                <p className=\"text-sm text-yellow-800\">\n                  Please wait for the master teacher to review your request. You will be notified once a decision is made.\n                </p>\n              </div>\n            )}\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4467},"client/src/components/StatsSection.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\nconst stats = [\n  {\n    number: \"50,000+\",\n    label: \"Active Students\",\n    description: \"Musicians learning daily\",\n  },\n  {\n    number: \"500+\",\n    label: \"Expert Mentors\",\n    description: \"Professional instructors\",\n  },\n  {\n    number: \"1,000+\", \n    label: \"Courses Available\",\n    description: \"Across all instruments\",\n  },\n  {\n    number: \"98%\",\n    label: \"Success Rate\",\n    description: \"Students achieve their goals\",\n  },\n];\n\nexport const StatsSection = () => {\n  return (\n    <section className=\"py-20 bg-primary/5\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold mb-4\">Join Our Growing Community</h2>\n          <p className=\"text-xl text-muted-foreground\">\n            See why musicians worldwide choose HarmonyLearn for their musical journey\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n          {stats.map((stat, index) => (\n            <Card key={index} className=\"text-center border-none bg-transparent\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-4xl md:text-5xl font-bold text-primary mb-2 animate-pulse-glow\">\n                  {stat.number}\n                </div>\n                <h3 className=\"text-lg font-semibold mb-1\">{stat.label}</h3>\n                <p className=\"text-sm text-muted-foreground\">{stat.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};","size_bytes":1607},"client/src/components/TestimonialSection.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Star } from \"lucide-react\";\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from \"@/components/ui/carousel\";\n\nconst testimonials = [\n  {\n    name: \"Sarah Johnson\",\n    role: \"Piano Student\",\n    avatar: \"/placeholder.svg\",\n    rating: 5,\n    text: \"HarmonyLearn transformed my piano skills. The interactive lessons and mentor support helped me progress faster than I ever imagined!\",\n  },\n  {\n    name: \"Mike Chen\",\n    role: \"Guitar Enthusiast\",\n    avatar: \"/placeholder.svg\", \n    rating: 5,\n    text: \"The live sessions are incredible. Playing with other musicians online feels just like being in a real jam session.\",\n  },\n  {\n    name: \"Emily Davis\",\n    role: \"Voice Coach\",\n    avatar: \"/placeholder.svg\",\n    rating: 5,\n    text: \"As a mentor on this platform, I love how easy it is to connect with students and track their progress. The tools are fantastic!\",\n  },\n];\n\nexport const TestimonialSection = () => {\n  return (\n    <section className=\"py-20 bg-gradient-subtle\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold mb-4\">What Our Musicians Say</h2>\n          <p className=\"text-xl text-muted-foreground\">\n            Join thousands of musicians who have transformed their skills with HarmonyLearn\n          </p>\n        </div>\n        \n        <Carousel\n          opts={{\n            align: \"start\",\n            loop: true,\n          }}\n          className=\"w-full max-w-6xl mx-auto\"\n        >\n          <CarouselContent>\n            {testimonials.map((testimonial, index) => (\n              <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\n                <div className=\"p-1\">\n                  <Card className=\"bg-card/80 backdrop-blur border-border/50 hover:shadow-warm transition-all duration-300 h-full\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center mb-4\">\n                        {[...Array(testimonial.rating)].map((_, i) => (\n                          <Star key={i} className=\"h-4 w-4 fill-secondary text-secondary\" />\n                        ))}\n                      </div>\n                      \n                      <p className=\"text-foreground mb-6 italic\">\n                        \"{testimonial.text}\"\n                      </p>\n                      \n                      <div className=\"flex items-center\">\n                        <Avatar className=\"h-10 w-10 mr-3\">\n                          <AvatarImage src={testimonial.avatar} alt={testimonial.name} />\n                          <AvatarFallback>{testimonial.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-semibold text-foreground\">{testimonial.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">{testimonial.role}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n          <CarouselPrevious />\n          <CarouselNext />\n        </Carousel>\n      </div>\n    </section>\n  );\n};","size_bytes":3434},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useEffect, useState } from \"react\";\n\nexport const ThemeToggle = () => {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return null;\n  }\n\n  const isDark = theme === \"dark\";\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Sun className=\"h-4 w-4 text-muted-foreground\" />\n      <Switch\n        checked={isDark}\n        onCheckedChange={(checked) => setTheme(checked ? \"dark\" : \"light\")}\n        aria-label=\"Toggle dark mode\"\n      />\n      <Moon className=\"h-4 w-4 text-muted-foreground\" />\n    </div>\n  );\n};","size_bytes":787},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"// Centralized authentication utilities\n\nexport interface User {\n  id: string;\n  username: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  role: 'student' | 'mentor' | 'admin';\n  isMaster?: boolean;\n}\n\n// Get current user from localStorage\nexport const getCurrentUser = (): User | null => {\n  try {\n    const userStr = localStorage.getItem('currentUser');\n    if (!userStr) return null;\n    \n    const user = JSON.parse(userStr);\n    // Validate that user object has required fields\n    if (!user.id || !user.role) return null;\n    \n    return user;\n  } catch (error) {\n    console.error('Error parsing user from localStorage:', error);\n    return null;\n  }\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = (): boolean => {\n  return getCurrentUser() !== null;\n};\n\n// Logout user and clear all auth data\nexport const logout = (): void => {\n  localStorage.removeItem('currentUser');\n  localStorage.removeItem('authToken'); // If we have tokens\n  localStorage.removeItem('userSession'); // Any other session data\n  \n  // Dispatch a custom event to notify all components of logout\n  window.dispatchEvent(new CustomEvent('user-logout'));\n  \n  // Redirect to home page\n  window.location.href = '/';\n};\n\n// Login user and store auth data\nexport const login = (user: User): void => {\n  localStorage.setItem('currentUser', JSON.stringify(user));\n  \n  // Dispatch a custom event to notify all components of login\n  window.dispatchEvent(new CustomEvent('user-login', { detail: user }));\n};\n\n// Check user role\nexport const hasRole = (role: string): boolean => {\n  const user = getCurrentUser();\n  return user?.role === role;\n};\n\n// Check if user has any of the specified roles\nexport const hasAnyRole = (roles: string[]): boolean => {\n  const user = getCurrentUser();\n  return user ? roles.includes(user.role) : false;\n};\n\nexport const isMaster = (): boolean => {\n  const user = getCurrentUser();\n  return user?.role === 'mentor' && user?.isMaster === true;\n};\n\nexport const canCreateClassrooms = (): boolean => {\n  const user = getCurrentUser();\n  return user?.role === 'admin' || (user?.role === 'mentor' && user?.isMaster === true);\n};\n\n// Validate user session and check if it's still valid\nexport const validateSession = (): boolean => {\n  const user = getCurrentUser();\n  if (!user) return false;\n  \n  // Additional validation can be added here\n  // For example, check token expiration, session timeout, etc.\n  return true;\n};\n\n// Check if user is authorized to access a specific resource\nexport const isAuthorized = (requiredRole?: string, allowedRoles?: string[]): boolean => {\n  if (!isAuthenticated()) return false;\n  \n  const user = getCurrentUser();\n  if (!user) return false;\n  \n  if (requiredRole && user.role !== requiredRole) return false;\n  if (allowedRoles && !allowedRoles.includes(user.role)) return false;\n  \n  return true;\n};\n\n// Check if current path is within user's designated portal\nexport const isInCorrectPortal = (): boolean => {\n  const user = getCurrentUser();\n  if (!user) return true; // Allow unauthenticated users on public pages\n  \n  const currentPath = window.location.pathname;\n  \n  switch (user.role) {\n    case 'student':\n      return currentPath.startsWith('/student-') || \n             currentPath.startsWith('/tools/') ||\n             currentPath === '/courses' ||\n             currentPath.startsWith('/courses/') ||\n             currentPath === '/community' ||\n             currentPath === '/learning-paths' ||\n             currentPath === '/live-sessions' ||\n             currentPath === '/academy-discovery' ||\n             currentPath === '/my-academies' ||\n             currentPath === '/mentor-interactions' ||\n             currentPath.startsWith('/academy/'); // Allow academy landing pages\n    case 'mentor':\n      return currentPath.startsWith('/mentor-') ||\n             currentPath.startsWith('/classroom/') ||\n             currentPath === '/classroom-staff' ||\n             currentPath === '/classroom-browser' ||\n             currentPath === '/classroom-discovery' ||\n             currentPath === '/staff-classroom' ||\n             currentPath.startsWith('/master-') ||\n             currentPath.startsWith('/classroom-management/') ||\n             currentPath === '/courses' ||\n             currentPath.startsWith('/courses/') ||\n             currentPath.startsWith('/academy/'); // Allow academy landing pages\n    case 'admin':\n      return currentPath.startsWith('/admin') ||\n             currentPath === '/courses' ||\n             currentPath.startsWith('/courses/') ||\n             currentPath.startsWith('/academy/'); // Allow academy landing pages\n    default:\n      return false;\n  }\n};\n\n// Automatic logout when navigating outside designated portal\nexport const checkPortalNavigation = (): void => {\n  const user = getCurrentUser();\n  if (!user) return;\n  \n  if (!isInCorrectPortal()) {\n    console.log('User navigated outside their portal area, logging out automatically');\n    logout();\n  }\n};\n\n// Refresh user data from server and update localStorage\nexport const refreshUserData = async (): Promise<User | null> => {\n  try {\n    const currentUser = getCurrentUser();\n    if (!currentUser || !currentUser.id) return null;\n\n    const response = await fetch(`/api/users/${currentUser.id}`);\n    if (!response.ok) {\n      console.error('Failed to refresh user data:', response.statusText);\n      return null;\n    }\n\n    const updatedUser = await response.json();\n    \n    // Update user data in localStorage\n    const refreshedUserData = {\n      id: updatedUser.id.toString(),\n      username: updatedUser.username,\n      firstName: updatedUser.firstName,\n      lastName: updatedUser.lastName,\n      email: updatedUser.email,\n      role: updatedUser.role,\n      isMaster: updatedUser.isMaster || false\n    };\n\n    localStorage.setItem('currentUser', JSON.stringify(refreshedUserData));\n    \n    // Dispatch update event for other components\n    window.dispatchEvent(new CustomEvent('user-updated', { detail: refreshedUserData }));\n    \n    return refreshedUserData;\n  } catch (error) {\n    console.error('Error refreshing user data:', error);\n    return null;\n  }\n};\n\n// Listen for auth state changes\nexport const onAuthStateChange = (callback: (user: User | null) => void): (() => void) => {\n  const handleLogin = (event: CustomEvent) => {\n    callback(event.detail);\n  };\n  \n  const handleLogout = () => {\n    callback(null);\n  };\n\n  const handleUserUpdate = (event: CustomEvent) => {\n    callback(event.detail);\n  };\n  \n  window.addEventListener('user-login', handleLogin as EventListener);\n  window.addEventListener('user-logout', handleLogout);\n  window.addEventListener('user-updated', handleUserUpdate as EventListener);\n  \n  // Return cleanup function\n  return () => {\n    window.removeEventListener('user-login', handleLogin as EventListener);\n    window.removeEventListener('user-logout', handleLogout);\n    window.removeEventListener('user-updated', handleUserUpdate as EventListener);\n  };\n};","size_bytes":6996},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from \"@tanstack/react-query\";\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: async ({ queryKey }) => {\n        const url = Array.isArray(queryKey) ? queryKey[0] : queryKey;\n        const response = await fetch(url as string);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      },\n      retry: 1,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n    },\n  },\n});\n\nexport async function apiRequest(url: string, options?: RequestInit) {\n  const response = await fetch(url, {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options?.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    let errorText = '';\n    try {\n      errorText = await response.text();\n    } catch (e) {\n      errorText = 'Unable to read error response';\n    }\n    console.error('API request failed:', {\n      url,\n      status: response.status,\n      statusText: response.statusText,\n      body: errorText\n    });\n    throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);\n  }\n\n  try {\n    return await response.json();\n  } catch (error) {\n    console.error('Failed to parse JSON response:', {\n      url,\n      error: error instanceof Error ? error.message : String(error)\n    });\n    throw new Error(`Invalid JSON response: ${error instanceof Error ? error.message : String(error)}`);\n  }\n}","size_bytes":1469},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/About.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Music, Users, Award, Star, Play, BookOpen } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport teamCollaboration from \"@/assets/team-collaboration.jpg\";\nimport teamMember1 from \"@/assets/team-member-1.jpg\";\nimport teamMember2 from \"@/assets/team-member-2.jpg\";\nimport teamMember3 from \"@/assets/team-member-3.jpg\";\n\nconst About = () => {\n  const stats = [\n    { icon: Users, value: \"50,000+\", label: \"Happy Students\" },\n    { icon: BookOpen, value: \"1,200+\", label: \"Courses Available\" },\n    { icon: Award, value: \"800+\", label: \"Expert Instructors\" },\n    { icon: Star, value: \"4.9/5\", label: \"Average Rating\" }\n  ];\n\n  const team = [\n    {\n      name: \"Sarah Johnson\",\n      role: \"Founder & CEO\",\n      description: \"Former Berklee graduate with 15+ years in music education\",\n      image: teamMember1\n    },\n    {\n      name: \"Marcus Rodriguez\",\n      role: \"Head of Curriculum\",\n      description: \"Grammy-nominated musician and pedagogy expert\",\n      image: teamMember2\n    },\n    {\n      name: \"Elena Chen\",\n      role: \"Technology Director\",\n      description: \"EdTech innovator passionate about accessible learning\",\n      image: teamMember3\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-subtle\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6\">\n            About <span className=\"bg-gradient-hero bg-clip-text text-transparent\">HarmonyLearn</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto mb-8\">\n            Founded in 2018, HarmonyLearn has revolutionized music education by making \n            world-class instruction accessible to everyone, anywhere in the world.\n          </p>\n          <Button variant=\"hero\" size=\"lg\" asChild>\n            <Link to=\"/courses\">\n              <Play className=\"mr-2 h-5 w-5\" />\n              Start Your Journey\n            </Link>\n          </Button>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"p-4 rounded-lg bg-primary/10 mb-4 mx-auto w-fit\">\n                  <stat.icon className=\"h-8 w-8 text-primary\" />\n                </div>\n                <div className=\"text-3xl font-bold text-primary mb-2\">{stat.value}</div>\n                <div className=\"text-muted-foreground\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Story Section with Image */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold mb-8\">Our Story</h2>\n              <div className=\"prose prose-lg text-muted-foreground\">\n                <p className=\"text-lg leading-relaxed mb-6\">\n                  HarmonyLearn was born from a simple belief: everyone deserves access to quality music education, \n                  regardless of their location, schedule, or budget. Our founder, Sarah Johnson, experienced \n                  firsthand the transformative power of music education but also witnessed the barriers that \n                  prevented many from accessing it.\n                </p>\n                <p className=\"text-lg leading-relaxed mb-6\">\n                  What started as a small online platform with just 10 courses has grown into a global \n                  community of over 50,000 students and 800+ expert instructors. We've maintained our \n                  commitment to quality while continuously innovating to make learning more engaging, \n                  effective, and accessible.\n                </p>\n                <p className=\"text-lg leading-relaxed\">\n                  Today, HarmonyLearn offers everything from beginner-friendly tutorials to masterclasses \n                  with Grammy-winning artists. Our mission remains unchanged: to nurture musical talent \n                  and help every student find their unique voice.\n                </p>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <img \n                src={teamCollaboration} \n                alt=\"Team collaboration at HarmonyLearn\" \n                className=\"rounded-xl shadow-musical w-full h-auto\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-primary/20 to-transparent rounded-xl\"></div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center mb-12\">Meet Our Team</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {team.map((member, index) => (\n              <div key={index} className=\"text-center p-6 bg-card rounded-xl shadow-musical\">\n                <div className=\"w-32 h-32 bg-muted rounded-full mx-auto mb-4 overflow-hidden\">\n                  <img \n                    src={member.image} \n                    alt={member.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">{member.name}</h3>\n                <p className=\"text-primary font-medium mb-3\">{member.role}</p>\n                <p className=\"text-muted-foreground\">{member.description}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default About;","size_bytes":6102},"client/src/pages/AcademyDiscovery.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Search, Filter, MapPin, Users, Star, Clock, BookOpen, Music, \n  GraduationCap, Award, Heart, ExternalLink, ChevronRight, \n  Piano, Guitar, Drum, Mic, Video, Calendar, Crown, Shield,\n  TrendingUp, Sparkles, Target, Trophy, MessageSquare, Eye,\n  CheckCircle\n} from \"lucide-react\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Academy {\n  id: number;\n  title: string;\n  academyName: string;\n  description: string;\n  about: string;\n  masterName: string;\n  masterId: number;\n  subject: string;\n  level: string;\n  instruments: string[];\n  features: string[];\n  heroImage: string;\n  logoImage: string;\n  primaryColor: string;\n  secondaryColor: string;\n  currentStudents: number;\n  maxStudents: number;\n  rating: number;\n  totalReviews: number;\n  contactEmail: string;\n  contactPhone: string;\n  website: string;\n  address: string;\n  pricing: string;\n  customSlug: string;\n  slug: string;\n  isPublic: boolean;\n  staffCount: number;\n  sessionCount: number;\n  graduationRate: number;\n}\n\nexport default function AcademyDiscovery() {\n  const [user, setUser] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedInstrument, setSelectedInstrument] = useState(\"all\");\n  const [selectedLevel, setSelectedLevel] = useState(\"all\");\n  const [selectedLocation, setSelectedLocation] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"featured\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [selectedAcademy, setSelectedAcademy] = useState<Academy | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const currentUser = getCurrentUser();\n    setUser(currentUser);\n  }, []);\n\n  // Fetch public academies\n  const { data: academies = [], isLoading: academiesLoading } = useQuery({\n    queryKey: [\"/api/classrooms\", \"public\"],\n    queryFn: () => apiRequest(\"/api/classrooms?public=true\"),\n  });\n\n  // Fetch user's academy memberships to show joined status\n  const { data: userMemberships = [] } = useQuery({\n    queryKey: [\"/api/classroom-memberships\", user?.id],\n    queryFn: () => apiRequest(`/api/classroom-memberships?userId=${user?.id}`),\n    enabled: !!user?.id,\n  });\n\n  // Join academy mutation\n  const joinAcademyMutation = useMutation({\n    mutationFn: (academyId: number) => \n      apiRequest(`/api/classrooms/${academyId}/join`, {\n        method: \"POST\",\n        body: JSON.stringify({ \n          userId: user?.id,\n          message: \"Requesting to join this academy as a student\",\n          experience: \"Beginner to intermediate level\"\n        })\n      }),\n    onSuccess: () => {\n      toast({ \n        title: \"Join Request Submitted!\", \n        description: \"Your request to join this academy has been sent to the master for review. You'll be notified once it's approved.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classroom-memberships\"] });\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to send join request\", \n        description: \"There was an error submitting your request. Please try again.\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Filter and sort academies\n  const filteredAcademies = academies\n    .filter((academy: Academy) => {\n      const matchesSearch = academy.academyName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           academy.masterName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           academy.subject?.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesInstrument = selectedInstrument === \"all\" || \n                               academy.instruments?.includes(selectedInstrument);\n      const matchesLevel = selectedLevel === \"all\" || academy.level === selectedLevel;\n      return matchesSearch && matchesInstrument && matchesLevel;\n    })\n    .sort((a: Academy, b: Academy) => {\n      switch (sortBy) {\n        case \"rating\":\n          return (b.rating || 0) - (a.rating || 0);\n        case \"students\":\n          return (b.currentStudents || 0) - (a.currentStudents || 0);\n        case \"newest\":\n          return (b.id || 0) - (a.id || 0);\n        default:\n          return 0;\n      }\n    });\n\n  const getInstrumentIcon = (instrument: string) => {\n    switch (instrument.toLowerCase()) {\n      case 'piano': return <Piano className=\"h-4 w-4\" />;\n      case 'guitar': return <Guitar className=\"h-4 w-4\" />;\n      case 'drums': return <Drum className=\"h-4 w-4\" />;\n      case 'vocals': return <Mic className=\"h-4 w-4\" />;\n      default: return <Music className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getLevelColor = (level: string) => {\n    switch (level.toLowerCase()) {\n      case 'beginner': return 'bg-green-100 text-green-800';\n      case 'intermediate': return 'bg-yellow-100 text-yellow-800';\n      case 'advanced': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getUserMembershipStatus = (academyId: number) => {\n    const membership = userMemberships.find((m: any) => m.classroomId === academyId);\n    return membership?.status || null;\n  };\n\n  const isUserJoined = (academyId: number) => {\n    return getUserMembershipStatus(academyId) === \"active\";\n  };\n\n  const hasUserRequested = (academyId: number) => {\n    return getUserMembershipStatus(academyId) === \"pending\";\n  };\n\n  if (academiesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p>Discovering amazing academies...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">Discover Music Academies</h1>\n              <p className=\"text-muted-foreground\">\n                Find the perfect music academy to enhance your learning journey\n              </p>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button \n                variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"grid\")}\n              >\n                Grid\n              </Button>\n              <Button \n                variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setViewMode(\"list\")}\n              >\n                List\n              </Button>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex flex-wrap gap-4 mb-6\">\n            <div className=\"relative flex-1 min-w-64\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search academies, masters, or instruments...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Select value={selectedInstrument} onValueChange={setSelectedInstrument}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Select instrument\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Instruments</SelectItem>\n                <SelectItem value=\"Piano\">Piano</SelectItem>\n                <SelectItem value=\"Guitar\">Guitar</SelectItem>\n                <SelectItem value=\"Drums\">Drums</SelectItem>\n                <SelectItem value=\"Vocals\">Vocals</SelectItem>\n                <SelectItem value=\"Violin\">Violin</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={selectedLevel} onValueChange={setSelectedLevel}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Level\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Levels</SelectItem>\n                <SelectItem value=\"beginner\">Beginner</SelectItem>\n                <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                <SelectItem value=\"advanced\">Advanced</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"featured\">Featured</SelectItem>\n                <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                <SelectItem value=\"students\">Most Students</SelectItem>\n                <SelectItem value=\"newest\">Newest</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{filteredAcademies.length}</div>\n                <div className=\"text-sm text-muted-foreground\">Academies Available</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {filteredAcademies.reduce((sum: number, a: Academy) => sum + (a.currentStudents || 0), 0)}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Active Students</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {filteredAcademies.filter((a: Academy) => a.rating >= 4.5).length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Top Rated</div>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-orange-600\">\n                  {new Set(filteredAcademies.flatMap((a: Academy) => a.instruments || [])).size}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Instruments Taught</div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Academies Grid/List */}\n        {filteredAcademies.length > 0 ? (\n          <div className={`grid gap-6 ${viewMode === \"grid\" ? \"grid-cols-1 lg:grid-cols-2 xl:grid-cols-3\" : \"grid-cols-1\"}`}>\n            {filteredAcademies.map((academy: Academy) => (\n              <Card key={academy.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                {/* Academy Image/Header */}\n                <div \n                  className=\"h-48 bg-gradient-to-r from-blue-500 to-purple-600 relative\"\n                  style={{ \n                    background: academy.heroImage ? `url(${academy.heroImage})` : \n                               `linear-gradient(to right, ${academy.primaryColor || '#3B82F6'}, ${academy.secondaryColor || '#8B5CF6'})`\n                  }}\n                >\n                  <div className=\"absolute inset-0 bg-black/20\" />\n                  <div className=\"absolute top-4 left-4 right-4 flex justify-between items-start\">\n                    <div className=\"flex items-center gap-2\">\n                      {academy.logoImage ? (\n                        <img src={academy.logoImage} alt=\"Logo\" className=\"w-10 h-10 rounded-full bg-white p-1\" />\n                      ) : (\n                        <div className=\"w-10 h-10 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center\">\n                          <Music className=\"h-5 w-5 text-white\" />\n                        </div>\n                      )}\n                      <Badge variant=\"secondary\" className=\"bg-white/20 text-white border-white/30\">\n                        <Crown className=\"h-3 w-3 mr-1\" />\n                        Master Academy\n                      </Badge>\n                    </div>\n                    <Badge className={getLevelColor(academy.level)}>\n                      {academy.level}\n                    </Badge>\n                  </div>\n                  <div className=\"absolute bottom-4 left-4 right-4\">\n                    <h3 className=\"text-xl font-bold text-white mb-1\">\n                      {academy.academyName || academy.title}\n                    </h3>\n                    <p className=\"text-white/80 text-sm\">\n                      by {academy.masterName}\n                    </p>\n                  </div>\n                </div>\n\n                <CardContent className=\"p-6\">\n                  {/* Academy Info */}\n                  <div className=\"space-y-4\">\n                    <p className=\"text-muted-foreground text-sm line-clamp-2\">\n                      {academy.about || academy.description}\n                    </p>\n\n                    {/* Instruments */}\n                    <div className=\"flex flex-wrap gap-2\">\n                      {academy.instruments?.slice(0, 3).map((instrument, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {getInstrumentIcon(instrument)}\n                          <span className=\"ml-1\">{instrument}</span>\n                        </Badge>\n                      ))}\n                      {academy.instruments?.length > 3 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{academy.instruments.length - 3} more\n                        </Badge>\n                      )}\n                    </div>\n\n                    {/* Stats */}\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      <div>\n                        <div className=\"flex items-center justify-center gap-1 text-sm font-medium\">\n                          <Users className=\"h-4 w-4\" />\n                          {academy.currentStudents || 0}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Students</div>\n                      </div>\n                      <div>\n                        <div className=\"flex items-center justify-center gap-1 text-sm font-medium\">\n                          <Star className=\"h-4 w-4 text-yellow-500\" />\n                          {academy.rating || 0}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Rating</div>\n                      </div>\n                      <div>\n                        <div className=\"flex items-center justify-center gap-1 text-sm font-medium\">\n                          <Shield className=\"h-4 w-4\" />\n                          {academy.staffCount || 0}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Staff</div>\n                      </div>\n                    </div>\n\n                    {/* Progress Bar for Capacity */}\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Capacity</span>\n                        <span>{academy.currentStudents || 0}/{academy.maxStudents || 50}</span>\n                      </div>\n                      <Progress \n                        value={((academy.currentStudents || 0) / (academy.maxStudents || 50)) * 100} \n                        className=\"h-2\"\n                      />\n                    </div>\n\n                    {/* Features */}\n                    {academy.features?.length > 0 && (\n                      <div className=\"space-y-2\">\n                        <h4 className=\"text-sm font-medium\">Key Features:</h4>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {academy.features.slice(0, 2).map((feature, index) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {feature}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Actions */}\n                    <div className=\"flex gap-2 pt-4\">\n                      {isUserJoined(academy.id) ? (\n                        <Button disabled className=\"flex-1 bg-green-100 text-green-800 hover:bg-green-100\">\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Member\n                        </Button>\n                      ) : hasUserRequested(academy.id) ? (\n                        <Button disabled className=\"flex-1 bg-yellow-100 text-yellow-800 hover:bg-yellow-100\">\n                          <Clock className=\"h-4 w-4 mr-2\" />\n                          Request Pending\n                        </Button>\n                      ) : (\n                        <Button \n                          onClick={() => joinAcademyMutation.mutate(academy.id)}\n                          disabled={joinAcademyMutation.isPending}\n                          className=\"flex-1\"\n                        >\n                          <Users className=\"h-4 w-4 mr-2\" />\n                          Request to Join\n                        </Button>\n                      )}\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => window.open(`/academy/${academy.customSlug || academy.academyName?.toLowerCase().replace(/\\s+/g, '-')}`, '_blank')}\n                        title=\"View Landing Page\"\n                      >\n                        <ExternalLink className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => setSelectedAcademy(academy)}\n                        title=\"View Details\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12\">\n            <Music className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No Academies Found</h3>\n            <p className=\"text-muted-foreground\">Try adjusting your search filters to find more academies.</p>\n          </div>\n        )}\n\n        {/* Academy Detail Modal */}\n        {selectedAcademy && (\n          <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n            <Card className=\"max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <CardTitle className=\"text-2xl\">\n                      {selectedAcademy.academyName || selectedAcademy.title}\n                    </CardTitle>\n                    <CardDescription>\n                      Master: {selectedAcademy.masterName}\n                    </CardDescription>\n                  </div>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => setSelectedAcademy(null)}\n                  >\n                    ×\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n                  <TabsList>\n                    <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                    <TabsTrigger value=\"curriculum\">Curriculum</TabsTrigger>\n                    <TabsTrigger value=\"staff\">Staff</TabsTrigger>\n                    <TabsTrigger value=\"contact\">Contact</TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"overview\" className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"font-semibold mb-2\">About the Academy</h3>\n                      <p className=\"text-muted-foreground\">\n                        {selectedAcademy.about || selectedAcademy.description}\n                      </p>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <h4 className=\"font-medium mb-1\">Level</h4>\n                        <Badge className={getLevelColor(selectedAcademy.level)}>\n                          {selectedAcademy.level}\n                        </Badge>\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium mb-1\">Subject</h4>\n                        <p className=\"text-sm\">{selectedAcademy.subject}</p>\n                      </div>\n                    </div>\n\n                    {selectedAcademy.features?.length > 0 && (\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Features</h4>\n                        <div className=\"grid grid-cols-2 gap-2\">\n                          {selectedAcademy.features.map((feature, index) => (\n                            <div key={index} className=\"flex items-center gap-2 text-sm\">\n                              <Sparkles className=\"h-4 w-4 text-yellow-500\" />\n                              {feature}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </TabsContent>\n\n                  <TabsContent value=\"curriculum\">\n                    <div>\n                      <h3 className=\"font-semibold mb-2\">Instruments Taught</h3>\n                      <div className=\"grid grid-cols-2 gap-2 mb-4\">\n                        {selectedAcademy.instruments?.map((instrument, index) => (\n                          <div key={index} className=\"flex items-center gap-2 p-2 border rounded\">\n                            {getInstrumentIcon(instrument)}\n                            <span>{instrument}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"staff\">\n                    <div className=\"text-center py-8\">\n                      <Shield className=\"h-12 w-12 mx-auto mb-2 text-muted-foreground\" />\n                      <p className=\"text-muted-foreground\">Staff information will be available after joining.</p>\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"contact\">\n                    <div className=\"space-y-4\">\n                      {selectedAcademy.contactEmail && (\n                        <div>\n                          <h4 className=\"font-medium mb-1\">Email</h4>\n                          <p className=\"text-sm\">{selectedAcademy.contactEmail}</p>\n                        </div>\n                      )}\n                      {selectedAcademy.contactPhone && (\n                        <div>\n                          <h4 className=\"font-medium mb-1\">Phone</h4>\n                          <p className=\"text-sm\">{selectedAcademy.contactPhone}</p>\n                        </div>\n                      )}\n                      {selectedAcademy.address && (\n                        <div>\n                          <h4 className=\"font-medium mb-1\">Address</h4>\n                          <p className=\"text-sm\">{selectedAcademy.address}</p>\n                        </div>\n                      )}\n                      {selectedAcademy.website && (\n                        <div>\n                          <h4 className=\"font-medium mb-1\">Website</h4>\n                          <a \n                            href={selectedAcademy.website} \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\"\n                            className=\"text-sm text-blue-600 hover:underline\"\n                          >\n                            {selectedAcademy.website}\n                          </a>\n                        </div>\n                      )}\n                    </div>\n                  </TabsContent>\n                </Tabs>\n\n                <div className=\"flex gap-2 pt-4 border-t\">\n                  {isUserJoined(selectedAcademy.id) ? (\n                    <Button disabled className=\"flex-1\">\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      Already Joined\n                    </Button>\n                  ) : (\n                    <Button \n                      onClick={() => {\n                        joinAcademyMutation.mutate(selectedAcademy.id);\n                        setSelectedAcademy(null);\n                      }}\n                      disabled={joinAcademyMutation.isPending}\n                      className=\"flex-1\"\n                    >\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      Join This Academy\n                    </Button>\n                  )}\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setSelectedAcademy(null)}\n                  >\n                    Close\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":26702},"client/src/pages/AdminPanel.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Users, BookOpen, Video, Settings, BarChart3, Shield, \n  Edit, Trash2, Plus, Eye, AlertCircle, TrendingUp,\n  Calendar, MessageCircle, Award, Star, Database,\n  FileText, CreditCard, Globe, Mail, Lock, Server, GraduationCap, Crown\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Header } from \"@/components/Header\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { UserManagement } from \"@/components/admin/UserManagement\";\nimport { ContentModeration } from \"@/components/admin/ContentModeration\";\nimport { SystemSettings } from \"@/components/admin/SystemSettings\";\nimport { AnalyticsDashboard } from \"@/components/admin/AnalyticsDashboard\";\nimport { CourseManagement } from \"@/components/admin/CourseManagement\";\nimport { PaymentManagement } from \"@/components/admin/PaymentManagement\";\nimport { LiveSessionsManagement } from \"@/components/admin/LiveSessionsManagement\";\nimport { MentorApplicationManagement } from \"@/components/admin/MentorApplicationManagement\";\nimport MasterRoleRequestManager from \"@/components/admin/MasterRoleRequestManager\";\n\nexport const AdminPanel = () => {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const handleQuickAction = (action: string) => {\n    const actionMap: { [key: string]: string } = {\n      'users': 'users',\n      'courses': 'courses',\n      'livesessions': 'livesessions',\n      'payments': 'payments',\n      'community': 'moderation',\n      'database': 'system'\n    };\n    \n    const tabValue = actionMap[action] || action;\n    setActiveTab(tabValue);\n    \n    toast({\n      title: \"Navigation\",\n      description: `Switched to ${action.charAt(0).toUpperCase() + action.slice(1)} management.`,\n    });\n  };\n\n  const handleHeaderAction = (action: string) => {\n    if (action === 'settings') {\n      setActiveTab('settings');\n    } else if (action === 'reports') {\n      setActiveTab('analytics');\n    }\n    \n    toast({\n      title: action === 'settings' ? \"Quick Settings\" : \"Reports\",\n      description: `Opened ${action === 'settings' ? 'system settings' : 'analytics dashboard'}.`,\n    });\n  };\n  const dashboardStats = [\n    { label: \"Total Students\", value: \"52,847\", change: \"+12%\", icon: Users, color: \"text-blue-500\" },\n    { label: \"Active Mentors\", value: \"1,240\", change: \"+8%\", icon: Award, color: \"text-green-500\" },\n    { label: \"Total Courses\", value: \"3,156\", change: \"+15%\", icon: BookOpen, color: \"text-purple-500\" },\n    { label: \"Live Sessions\", value: \"89\", change: \"+23%\", icon: Video, color: \"text-red-500\" },\n    { label: \"Monthly Revenue\", value: \"$89,450\", change: \"+18%\", icon: TrendingUp, color: \"text-yellow-500\" },\n    { label: \"Community Posts\", value: \"12,456\", change: \"+6%\", icon: MessageCircle, color: \"text-indigo-500\" }\n  ];\n\n  const recentUsers = [\n    { id: 1, name: \"John Doe\", email: \"john@example.com\", role: \"Student\", joinDate: \"2024-12-20\", status: \"Active\" },\n    { id: 2, name: \"Sarah Johnson\", email: \"sarah@example.com\", role: \"Mentor\", joinDate: \"2024-12-19\", status: \"Pending\" },\n    { id: 3, name: \"Mike Chen\", email: \"mike@example.com\", role: \"Student\", joinDate: \"2024-12-18\", status: \"Active\" },\n    { id: 4, name: \"Elena Rodriguez\", email: \"elena@example.com\", role: \"Mentor\", joinDate: \"2024-12-17\", status: \"Active\" }\n  ];\n\n  const recentCourses = [\n    { id: 1, title: \"Advanced Jazz Piano\", instructor: \"Marcus Johnson\", students: 145, rating: 4.9, status: \"Published\" },\n    { id: 2, title: \"Guitar for Beginners\", instructor: \"Sarah Chen\", students: 892, rating: 4.8, status: \"Published\" },\n    { id: 3, title: \"Violin Masterclass\", instructor: \"Elena Volkov\", students: 67, rating: 4.7, status: \"Draft\" },\n    { id: 4, title: \"Drum Fundamentals\", instructor: \"Alex Rodriguez\", students: 234, rating: 4.6, status: \"Review\" }\n  ];\n\n  const systemAlerts = [\n    { id: 1, type: \"warning\", message: \"High server load detected\", time: \"2 hours ago\" },\n    { id: 2, type: \"info\", message: \"Scheduled maintenance tomorrow\", time: \"5 hours ago\" },\n    { id: 3, type: \"success\", message: \"Payment system updated successfully\", time: \"1 day ago\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold flex items-center\">\n              <Shield className=\"mr-3 h-8 w-8 text-primary\" />\n              Admin Dashboard\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Complete platform management and control center\n            </p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" onClick={() => handleHeaderAction('settings')}>\n              <Settings className=\"mr-2 h-4 w-4\" />\n              Quick Settings\n            </Button>\n            <Button variant=\"hero\" onClick={() => handleHeaderAction('reports')}>\n              <TrendingUp className=\"mr-2 h-4 w-4\" />\n              View Reports\n            </Button>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 lg:grid-cols-11\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Overview</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"flex items-center space-x-2\">\n              <Users className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Users</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"mentor-applications\" className=\"flex items-center space-x-2\">\n              <GraduationCap className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Mentors</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"master-requests\" className=\"flex items-center space-x-2\">\n              <Crown className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Masters</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"moderation\" className=\"flex items-center space-x-2\">\n              <Shield className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Moderation</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"analytics\" className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"flex items-center space-x-2\">\n              <Settings className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Settings</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"courses\" className=\"flex items-center space-x-2\">\n              <BookOpen className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Courses</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"livesessions\" className=\"flex items-center space-x-2\">\n              <Video className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Live</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"payments\" className=\"flex items-center space-x-2\">\n              <CreditCard className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">Payments</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"system\" className=\"flex items-center space-x-2\">\n              <Server className=\"h-4 w-4\" />\n              <span className=\"hidden sm:inline\">System</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Stats Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {dashboardStats.map((stat) => (\n                <Card key={stat.label} className=\"p-6 hover:shadow-musical transition-shadow duration-300\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">{stat.label}</p>\n                      <p className=\"text-2xl font-bold\">{stat.value}</p>\n                      <p className=\"text-sm text-green-600\">{stat.change} from last month</p>\n                    </div>\n                    <stat.icon className={`h-8 w-8 ${stat.color}`} />\n                  </div>\n                </Card>\n              ))}\n            </div>\n\n            {/* System Alerts */}\n            <Card className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4 flex items-center\">\n                <AlertCircle className=\"mr-2 h-5 w-5 text-yellow-500\" />\n                System Alerts\n              </h3>\n              <div className=\"space-y-3\">\n                {systemAlerts.map((alert) => (\n                  <div key={alert.id} className={`p-3 rounded-lg border-l-4 ${\n                    alert.type === 'warning' ? 'bg-yellow-50 border-yellow-400' :\n                    alert.type === 'info' ? 'bg-blue-50 border-blue-400' :\n                    'bg-green-50 border-green-400'\n                  }`}>\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-sm font-medium\">{alert.message}</p>\n                      <span className=\"text-xs text-muted-foreground\">{alert.time}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </Card>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n              {/* Recent Users */}\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-xl font-semibold\">Recent Users</h3>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add User\n                  </Button>\n                </div>\n                \n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Name</TableHead>\n                      <TableHead>Role</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {recentUsers.map((user) => (\n                      <TableRow key={user.id}>\n                        <TableCell>\n                          <div>\n                            <p className=\"font-medium\">{user.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={user.role === 'Mentor' ? 'default' : 'secondary'}>\n                            {user.role}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={user.status === 'Active' ? 'default' : 'secondary'}>\n                            {user.status}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button size=\"sm\" variant=\"ghost\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"ghost\">\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button size=\"sm\" variant=\"ghost\">\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </Card>\n\n              {/* Recent Courses */}\n              <Card className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-xl font-semibold\">Course Management</h3>\n                  <Button size=\"sm\" variant=\"outline\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add Course\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  {recentCourses.map((course) => (\n                    <div key={course.id} className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\">{course.title}</h4>\n                        <p className=\"text-sm text-muted-foreground\">by {course.instructor}</p>\n                        <div className=\"flex items-center space-x-4 mt-2 text-xs text-muted-foreground\">\n                          <span>{course.students} students</span>\n                          <div className=\"flex items-center space-x-1\">\n                            <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                            <span>{course.rating}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant={\n                          course.status === 'Published' ? 'default' :\n                          course.status === 'Draft' ? 'secondary' : 'outline'\n                        }>\n                          {course.status}\n                        </Badge>\n                        <Button size=\"sm\" variant=\"ghost\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </Card>\n            </div>\n\n            {/* Admin Quick Actions */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                onClick={() => handleQuickAction('users')}\n              >\n                <Users className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Manage Users</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                onClick={() => handleQuickAction('courses')}\n              >\n                <BookOpen className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Course Library</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                onClick={() => handleQuickAction('livesessions')}\n              >\n                <Video className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Live Sessions</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                onClick={() => handleQuickAction('community')}\n              >\n                <MessageCircle className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Community</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                onClick={() => handleQuickAction('payments')}\n              >\n                <CreditCard className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Payments</span>\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"h-20 flex-col space-y-2\"\n                onClick={() => handleQuickAction('database')}\n              >\n                <Database className=\"h-6 w-6\" />\n                <span className=\"text-sm\">Database</span>\n              </Button>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"users\">\n            <UserManagement />\n          </TabsContent>\n\n          <TabsContent value=\"mentor-applications\">\n            <MentorApplicationManagement />\n          </TabsContent>\n\n          <TabsContent value=\"master-requests\">\n            <MasterRoleRequestManager />\n          </TabsContent>\n\n          <TabsContent value=\"courses\">\n            <CourseManagement />\n          </TabsContent>\n\n          <TabsContent value=\"livesessions\">\n            <LiveSessionsManagement />\n          </TabsContent>\n\n          <TabsContent value=\"payments\">\n            <PaymentManagement />\n          </TabsContent>\n\n          <TabsContent value=\"moderation\">\n            <ContentModeration />\n          </TabsContent>\n\n          <TabsContent value=\"analytics\">\n            <AnalyticsDashboard />\n          </TabsContent>\n\n          <TabsContent value=\"settings\">\n            <SystemSettings />\n          </TabsContent>\n\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <Database className=\"h-8 w-8 text-blue-500\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Database Management</h3>\n                    <p className=\"text-sm text-muted-foreground\">Backup, restore, and optimize</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    Create Backup\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    View Logs\n                  </Button>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <Server className=\"h-8 w-8 text-green-500\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Server Status</h3>\n                    <p className=\"text-sm text-muted-foreground\">Monitor performance</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">CPU Usage</span>\n                    <Badge variant=\"default\">45%</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm\">Memory</span>\n                    <Badge variant=\"secondary\">62%</Badge>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <Lock className=\"h-8 w-8 text-red-500\" />\n                  <div>\n                    <h3 className=\"font-semibold\">Security Center</h3>\n                    <p className=\"text-sm text-muted-foreground\">Security monitoring</p>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    Security Scan\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                    Access Logs\n                  </Button>\n                </div>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};","size_bytes":20236},"client/src/pages/AdminSignIn.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Shield, Eye, EyeOff, Lock } from \"lucide-react\";\n\nconst signInSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype SignInFormData = z.infer<typeof signInSchema>;\n\nconst AdminSignIn = () => {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<SignInFormData>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SignInFormData) => {\n    setIsLoading(true);\n    \n    try {\n      // Check default admin credentials\n      if (data.username === \"admin\" && data.password === \"admin@123\") {\n        // Create admin user object\n        const adminUser = {\n          id: \"1\",\n          email: \"admin@harmonylearn.com\",\n          firstName: \"Admin\",\n          lastName: \"User\",\n          role: \"admin\" as const,\n          isActive: true,\n        };\n\n        // Store admin session\n        localStorage.setItem('currentUser', JSON.stringify(adminUser));\n        localStorage.setItem('userRole', 'admin');\n        \n        // Dispatch login event\n        window.dispatchEvent(new CustomEvent('user-login', { detail: adminUser }));\n        \n        toast({\n          title: \"Welcome Admin\",\n          description: \"Successfully signed in to admin panel.\",\n        });\n        \n        // Redirect to admin panel\n        setLocation(\"/admin\");\n      } else {\n        toast({\n          title: \"Invalid Credentials\",\n          description: \"Please check your username and password.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      console.error('Admin sign in error:', error);\n      toast({\n        title: \"Sign In Failed\",\n        description: \"An error occurred during sign in. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-md mx-auto\">\n          <Card className=\"border-2\">\n            <CardHeader className=\"text-center space-y-4\">\n              <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-red-500 to-orange-600 rounded-full flex items-center justify-center\">\n                <Shield className=\"w-8 h-8 text-white\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold\">Admin Access</CardTitle>\n              <CardDescription className=\"text-lg\">\n                Sign in to access the administration panel\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter admin username\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Enter admin password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3\"\n                              onClick={() => setShowPassword(!showPassword)}\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-gradient-to-r from-red-500 to-orange-600 hover:from-red-600 hover:to-orange-700\"\n                    disabled={isLoading}\n                  >\n                    {isLoading ? (\n                      <>\n                        <Lock className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Signing In...\n                      </>\n                    ) : (\n                      <>\n                        <Shield className=\"mr-2 h-4 w-4\" />\n                        Sign In as Admin\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n\n              <div className=\"mt-6 p-4 bg-muted/50 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground text-center\">\n                  <strong>Default Credentials:</strong><br />\n                  Username: admin<br />\n                  Password: admin@123\n                </p>\n              </div>\n\n              <div className=\"mt-6 text-center\">\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => setLocation(\"/\")}\n                  className=\"text-sm\"\n                >\n                  ← Back to Home\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default AdminSignIn;","size_bytes":7074},"client/src/pages/Classroom.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { RoleSelector } from \"@/components/classroom/RoleSelector\";\nimport { ClassroomList } from \"@/components/classroom/ClassroomList\";\nimport { CreateClassroomButton } from \"@/components/classroom/CreateClassroomButton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, BookOpen, Clock, Star } from \"lucide-react\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\nconst Classroom = () => {\n  const [currentRole, setCurrentRole] = useState<Role>(\"student\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        {/* Role Selector */}\n        <div className=\"mb-8\">\n          <RoleSelector currentRole={currentRole} onRoleChange={setCurrentRole} />\n        </div>\n\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-4xl font-bold bg-gradient-hero bg-clip-text text-transparent\">\n                Classroom Hub\n              </h1>\n              <p className=\"text-muted-foreground mt-2\">\n                {currentRole === \"master\" && \"Manage your classrooms and track student progress\"}\n                {currentRole === \"staff\" && \"Assist in classroom management and content delivery\"}\n                {currentRole === \"student\" && \"Join classrooms and continue your learning journey\"}\n              </p>\n            </div>\n            \n            {(currentRole === \"master\" || currentRole === \"staff\") && (\n              <CreateClassroomButton role={currentRole} />\n            )}\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            <div className=\"bg-card rounded-lg p-6 border\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <Users className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">12</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {currentRole === \"student\" ? \"Enrolled\" : \"Students\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-card rounded-lg p-6 border\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-secondary/10 rounded-lg\">\n                  <BookOpen className=\"h-5 w-5 text-secondary\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">8</div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {currentRole === \"student\" ? \"Courses\" : \"Classrooms\"}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-card rounded-lg p-6 border\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-accent/10 rounded-lg\">\n                  <Clock className=\"h-5 w-5 text-accent\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">24</div>\n                  <div className=\"text-sm text-muted-foreground\">Hours Learned</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-card rounded-lg p-6 border\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-primary/10 rounded-lg\">\n                  <Star className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold\">850</div>\n                  <div className=\"text-sm text-muted-foreground\">XP Points</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Classroom List */}\n        <ClassroomList role={currentRole} />\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default Classroom;","size_bytes":4193},"client/src/pages/ClassroomDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { ClassroomSidebar } from \"@/components/classroom/ClassroomSidebar\";\nimport { ClassroomContent } from \"@/components/classroom/ClassroomContent\";\nimport { RoleSelector } from \"@/components/classroom/RoleSelector\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\nconst ClassroomDashboard = () => {\n  const { id } = useParams();\n  const [currentRole, setCurrentRole] = useState<Role>(\"student\");\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-6\">\n        {/* Role Selector */}\n        <div className=\"mb-6\">\n          <RoleSelector currentRole={currentRole} onRoleChange={setCurrentRole} />\n        </div>\n\n        <div className=\"flex gap-6\">\n          {/* Sidebar */}\n          <ClassroomSidebar \n            role={currentRole} \n            activeTab={activeTab} \n            onTabChange={setActiveTab}\n            classroomId={id || \"\"}\n          />\n\n          {/* Main Content */}\n          <div className=\"flex-1\">\n            <ClassroomContent \n              role={currentRole} \n              activeTab={activeTab}\n              classroomId={id || \"\"}\n            />\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default ClassroomDashboard;","size_bytes":1498},"client/src/pages/ClassroomDiscovery.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Music, \n  Users, \n  Star, \n  ExternalLink,\n  Search,\n  Filter,\n  MapPin,\n  Calendar,\n  Heart,\n  Send,\n  BookOpen,\n  Clock,\n  CheckCircle,\n  X,\n  UserPlus\n} from \"lucide-react\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { MentorNavigation } from \"@/components/mentor/MentorNavigation\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertStaffRequestSchema, type Classroom, type StaffRequest } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst apiRequest = async (url: string, options?: { method: string; body?: string }) => {\n  const response = await fetch(url, {\n    method: options?.method || \"GET\",\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: options?.body,\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\nconst staffRequestFormSchema = insertStaffRequestSchema.extend({\n  message: z.string().min(10, \"Please provide a brief message\").max(500, \"Message too long\"),\n});\n\ntype StaffRequestFormData = z.infer<typeof staffRequestFormSchema>;\n\nexport default function ClassroomDiscovery() {\n  const [user, setUser] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedInstrument, setSelectedInstrument] = useState<string>(\"all\");\n  const [selectedClassroom, setSelectedClassroom] = useState<Classroom | null>(null);\n  const [requestDialogOpen, setRequestDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const currentUser = getCurrentUser();\n    setUser(currentUser);\n  }, []);\n\n  const form = useForm<StaffRequestFormData>({\n    resolver: zodResolver(staffRequestFormSchema),\n    defaultValues: {\n      mentorId: 0,\n      classroomId: 0,\n      message: \"\",\n    },\n  });\n\n  // Update mentorId when user is available\n  useEffect(() => {\n    if (user?.id) {\n      form.setValue(\"mentorId\", user.id);\n    }\n  }, [user, form]);\n\n  // Fetch all public classrooms for discovery\n  const { data: publicClassrooms, isLoading: publicLoading } = useQuery({\n    queryKey: [\"/api/classrooms/public\"],\n  });\n\n  // Fetch all classrooms for staff applications\n  const { data: allClassrooms, isLoading: allLoading } = useQuery({\n    queryKey: [\"/api/classrooms\"],\n  });\n\n  // Fetch mentor's staff requests\n  const { data: staffRequests, isLoading: requestsLoading } = useQuery({\n    queryKey: [\"/api/mentors\", user?.id, \"staff-requests\"],\n    queryFn: () => apiRequest(`/api/mentors/${user?.id}/staff-requests`),\n    enabled: !!user?.id,\n  });\n\n  // Submit staff request mutation\n  const submitRequestMutation = useMutation({\n    mutationFn: (data: StaffRequestFormData) =>\n      apiRequest(\"/api/staff-requests\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mentors\", user?.id, \"staff-requests\"] });\n      setRequestDialogOpen(false);\n      setSelectedClassroom(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Staff request submitted successfully!\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Staff request error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Get unique instruments for filtering\n  const allInstruments = Array.isArray(publicClassrooms) \n    ? publicClassrooms.reduce((acc: string[], classroom: Classroom) => {\n        if (classroom.instruments) {\n          classroom.instruments.forEach((instrument: string) => {\n            if (!acc.includes(instrument)) {\n              acc.push(instrument);\n            }\n          });\n        }\n        return acc;\n      }, []) \n    : [];\n\n  // Filter classrooms based on search and instrument\n  const filterClassrooms = (classrooms: Classroom[]) => {\n    return classrooms.filter((classroom: Classroom) => {\n      const matchesSearch = classroom.academyName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           classroom.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           classroom.description?.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesInstrument = selectedInstrument === \"all\" || \n                               classroom.instruments?.includes(selectedInstrument);\n      return matchesSearch && matchesInstrument;\n    });\n  };\n\n  const filteredPublicClassrooms = Array.isArray(publicClassrooms) ? filterClassrooms(publicClassrooms) : [];\n  const filteredAllClassrooms = Array.isArray(allClassrooms) ? filterClassrooms(allClassrooms) : [];\n\n  const handleStaffRequest = (classroom: Classroom) => {\n    setSelectedClassroom(classroom);\n    form.setValue(\"classroomId\", classroom.id);\n    setRequestDialogOpen(true);\n  };\n\n  const onSubmit = (data: StaffRequestFormData) => {\n    if (selectedClassroom) {\n      const requestData = {\n        ...data,\n        mentorId: user?.id || 0,\n        classroomId: selectedClassroom.id,\n      };\n      \n      console.log('Submitting staff request data:', requestData);\n      console.log('Current user:', user);\n      console.log('Selected classroom:', selectedClassroom);\n      \n      submitRequestMutation.mutate(requestData);\n    }\n  };\n\n  const getRequestStatus = (classroomId: number) => {\n    const requests = staffRequests as StaffRequest[] || [];\n    return requests.find(r => r.classroomId === classroomId);\n  };\n\n  const renderClassroomCard = (classroom: Classroom, showStaffOption: boolean = false) => {\n    const existingRequest = getRequestStatus(classroom.id);\n    \n    return (\n      <Card key={classroom.id} className=\"group hover:shadow-lg transition-all duration-200\">\n        <CardContent className=\"p-0\">\n          {/* Hero Section */}\n          <div \n            className=\"h-40 relative rounded-t-lg\"\n            style={{\n              backgroundColor: classroom.primaryColor || '#3B82F6',\n              backgroundImage: classroom.heroImage ? `url(${classroom.heroImage})` : \n                'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n              backgroundSize: 'cover',\n              backgroundPosition: 'center',\n            }}\n          >\n            <div className=\"absolute inset-0 bg-black/20 rounded-t-lg\" />\n            <div className=\"absolute bottom-4 left-4 right-4\">\n              <div className=\"flex items-center gap-3\">\n                {classroom.logoImage && (\n                  <Avatar className=\"h-10 w-10 border-2 border-white\">\n                    <AvatarImage src={classroom.logoImage} alt={classroom.academyName || classroom.title} />\n                    <AvatarFallback className=\"text-xs\">\n                      {(classroom.academyName || classroom.title)?.charAt(0)}\n                    </AvatarFallback>\n                  </Avatar>\n                )}\n                <div className=\"flex-1 min-w-0\">\n                  <h3 className=\"font-semibold text-white truncate\">\n                    {classroom.academyName || classroom.title}\n                  </h3>\n                  <p className=\"text-xs text-white/90 truncate\">\n                    {classroom.description}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4\">\n            {/* About */}\n            <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n              {classroom.about || classroom.description || \"Discover your musical potential with expert guidance and personalized instruction.\"}\n            </p>\n\n            {/* Instruments & Subject */}\n            <div className=\"flex flex-wrap gap-1 mb-4\">\n              {classroom.subject && (\n                <Badge variant=\"default\" className=\"text-xs\">\n                  {classroom.subject}\n                </Badge>\n              )}\n              {classroom.instruments?.slice(0, 2).map((instrument: string, index: number) => (\n                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                  {instrument}\n                </Badge>\n              ))}\n              {classroom.instruments && classroom.instruments.length > 2 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{classroom.instruments.length - 2} more\n                </Badge>\n              )}\n            </div>\n\n            {/* Stats */}\n            <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-4\">\n              <div className=\"flex items-center gap-1\">\n                <Users className=\"h-3 w-3\" />\n                <span>Max {classroom.maxStudents}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"h-3 w-3\" />\n                <span>{classroom.isActive ? \"Active\" : \"Inactive\"}</span>\n              </div>\n              {classroom.level && (\n                <div className=\"text-xs\">\n                  Level: {classroom.level}\n                </div>\n              )}\n            </div>\n\n            {/* Location */}\n            {classroom.address && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground mb-4\">\n                <MapPin className=\"h-3 w-3\" />\n                <span className=\"truncate\">{classroom.address}</span>\n              </div>\n            )}\n\n            {/* Actions */}\n            <div className=\"flex gap-2\">\n              <Button asChild size=\"sm\" className=\"flex-1\">\n                <Link href={`/academy/${classroom.customSlug || classroom.id}`}>\n                  <ExternalLink className=\"h-3 w-3 mr-1\" />\n                  Visit Academy\n                </Link>\n              </Button>\n              \n              {showStaffOption && (\n                <>\n                  {existingRequest ? (\n                    <Badge \n                      variant={\n                        existingRequest.status === 'approved' ? 'default' : \n                        existingRequest.status === 'rejected' ? 'destructive' : 'secondary'\n                      }\n                      className=\"px-3 py-1 text-xs\"\n                    >\n                      {existingRequest.status === 'approved' && <CheckCircle className=\"h-3 w-3 mr-1\" />}\n                      {existingRequest.status === 'rejected' && <X className=\"h-3 w-3 mr-1\" />}\n                      {existingRequest.status === 'pending' && <Clock className=\"h-3 w-3 mr-1\" />}\n                      {existingRequest.status}\n                    </Badge>\n                  ) : (\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleStaffRequest(classroom)}\n                      disabled={!classroom.isActive}\n                    >\n                      <UserPlus className=\"h-3 w-3 mr-1\" />\n                      Join Staff\n                    </Button>\n                  )}\n                </>\n              )}\n              \n              <Button variant=\"outline\" size=\"sm\">\n                <Heart className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <MentorNavigation currentUser={user} />\n        \n        <main className=\"flex-1 min-w-0 p-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"mb-6\">\n              <h1 className=\"text-3xl font-bold mb-2\">Discover Music Academies</h1>\n              <p className=\"text-muted-foreground\">\n                Explore amazing music academies - visit as a guest or apply to join as staff\n              </p>\n            </div>\n\n            {/* Filters */}\n            <div className=\"mb-6\">\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search academies...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n                <div className=\"w-full md:w-48\">\n                  <Select value={selectedInstrument} onValueChange={setSelectedInstrument}>\n                    <SelectTrigger>\n                      <Filter className=\"h-4 w-4 mr-2\" />\n                      <SelectValue placeholder=\"Filter by instrument\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Instruments</SelectItem>\n                      {allInstruments.map((instrument: string) => (\n                        <SelectItem key={instrument} value={instrument}>\n                          {instrument}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n\n            <Tabs defaultValue=\"discover\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"discover\" className=\"text-sm font-medium\">Discover Academies</TabsTrigger>\n                <TabsTrigger value=\"staff\" className=\"text-sm font-medium\">Staff Opportunities</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"discover\" className=\"space-y-6 mt-0\">\n                {/* Loading State */}\n                {publicLoading && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {[...Array(6)].map((_, i) => (\n                      <Card key={i} className=\"animate-pulse\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                          <div className=\"h-20 bg-muted rounded mb-4\"></div>\n                          <div className=\"flex gap-2 mb-4\">\n                            <div className=\"h-6 bg-muted rounded w-16\"></div>\n                            <div className=\"h-6 bg-muted rounded w-20\"></div>\n                          </div>\n                          <div className=\"h-8 bg-muted rounded\"></div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n\n                {/* Academies Grid */}\n                {!publicLoading && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {filteredPublicClassrooms.map((classroom: Classroom) => \n                      renderClassroomCard(classroom, false)\n                    )}\n                  </div>\n                )}\n\n                {/* Empty State */}\n                {!publicLoading && filteredPublicClassrooms.length === 0 && (\n                  <Card className=\"text-center py-12\">\n                    <CardContent>\n                      <Music className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">No Academies Found</h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        {searchTerm || selectedInstrument !== \"all\" \n                          ? \"Try adjusting your search filters\" \n                          : \"Be the first to create an academy!\"}\n                      </p>\n                      {searchTerm || selectedInstrument !== \"all\" ? (\n                        <Button \n                          variant=\"outline\" \n                          onClick={() => {\n                            setSearchTerm(\"\");\n                            setSelectedInstrument(\"all\");\n                          }}\n                        >\n                          Clear Filters\n                        </Button>\n                      ) : null}\n                    </CardContent>\n                  </Card>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"staff\" className=\"space-y-6 mt-0\">\n                {/* Current Requests Section */}\n                {staffRequests && (staffRequests as StaffRequest[]).length > 0 && (\n                  <div>\n                    <h2 className=\"text-xl font-semibold mb-4\">Your Staff Requests</h2>\n                    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3 mb-8\">\n                      {(staffRequests as StaffRequest[]).map((request: StaffRequest) => {\n                        const classroom = (allClassrooms as Classroom[])?.find(c => c.id === request.classroomId);\n                        return (\n                          <Card key={request.id} className=\"border-l-4 border-l-blue-500\">\n                            <CardHeader className=\"pb-3\">\n                              <CardTitle className=\"text-lg flex items-center justify-between\">\n                                {classroom?.title}\n                                <Badge \n                                  variant={\n                                    request.status === 'approved' ? 'default' : \n                                    request.status === 'rejected' ? 'destructive' : 'secondary'\n                                  }\n                                >\n                                  {request.status === 'approved' && <CheckCircle className=\"h-3 w-3 mr-1\" />}\n                                  {request.status === 'rejected' && <X className=\"h-3 w-3 mr-1\" />}\n                                  {request.status === 'pending' && <Clock className=\"h-3 w-3 mr-1\" />}\n                                  {request.status}\n                                </Badge>\n                              </CardTitle>\n                              <CardDescription>\n                                Submitted: {request.createdAt ? new Date(request.createdAt).toLocaleDateString() : \"Unknown\"}\n                              </CardDescription>\n                            </CardHeader>\n                            {request.adminNotes && (\n                              <CardContent>\n                                <div className=\"text-sm bg-muted p-3 rounded-md\">\n                                  <strong>Notes: </strong>{request.adminNotes}\n                                </div>\n                              </CardContent>\n                            )}\n                          </Card>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n\n                {/* Staff Opportunities */}\n                <div>\n                  <h2 className=\"text-xl font-semibold mb-4\">Staff Opportunities</h2>\n                  \n                  {allLoading && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {[...Array(6)].map((_, i) => (\n                        <Card key={i} className=\"animate-pulse\">\n                          <CardContent className=\"p-6\">\n                            <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                            <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                            <div className=\"h-20 bg-muted rounded mb-4\"></div>\n                            <div className=\"h-8 bg-muted rounded\"></div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n\n                  {!allLoading && (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                      {filteredAllClassrooms.map((classroom: Classroom) => \n                        renderClassroomCard(classroom, true)\n                      )}\n                    </div>\n                  )}\n\n                  {!allLoading && filteredAllClassrooms.length === 0 && (\n                    <Card className=\"text-center py-12\">\n                      <CardContent>\n                        <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                        <h3 className=\"text-lg font-semibold mb-2\">No Staff Opportunities Found</h3>\n                        <p className=\"text-muted-foreground mb-4\">\n                          {searchTerm || selectedInstrument !== \"all\" \n                            ? \"Try adjusting your search filters\" \n                            : \"There are currently no classrooms accepting staff requests\"}\n                        </p>\n                        {searchTerm || selectedInstrument !== \"all\" ? (\n                          <Button \n                            variant=\"outline\" \n                            onClick={() => {\n                              setSearchTerm(\"\");\n                              setSelectedInstrument(\"all\");\n                            }}\n                          >\n                            Clear Filters\n                          </Button>\n                        ) : null}\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            {/* Request Dialog */}\n            <Dialog open={requestDialogOpen} onOpenChange={setRequestDialogOpen}>\n              <DialogContent className=\"sm:max-w-[425px]\">\n                <DialogHeader>\n                  <DialogTitle>Request to Join Staff</DialogTitle>\n                  <DialogDescription>\n                    Send a request to join \"{selectedClassroom?.title}\" as a staff member\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"message\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Message to Master</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Please explain why you'd like to join this classroom as staff and what you can contribute...\"\n                              {...field} \n                              rows={4}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setRequestDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button type=\"submit\" disabled={submitRequestMutation.isPending}>\n                        {submitRequestMutation.isPending ? \"Submitting...\" : \"Submit Request\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":24773},"client/src/pages/ClassroomLanding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from \"@/components/ui/carousel\";\nimport { \n  Star, \n  Users, \n  Clock, \n  Award, \n  Music, \n  Phone, \n  Mail, \n  Globe, \n  MapPin, \n  Share2,\n  Heart,\n  CheckCircle,\n  PlayCircle,\n  Calendar,\n  DollarSign,\n  Play,\n  Edit,\n  Eye,\n  Settings,\n  TrendingUp,\n  BookOpen,\n  Video,\n  Trophy,\n  Instagram,\n  Facebook,\n  Twitter,\n  Youtube,\n  Linkedin,\n  Quote,\n  Shield,\n  Sparkles,\n  GraduationCap,\n  Headphones,\n  Image as ImageIcon\n} from \"lucide-react\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Classroom } from \"@shared/schema\";\nimport { AcademyEditor } from \"@/components/classroom/AcademyEditor\";\n\nconst joinRequestSchema = z.object({\n  message: z.string().min(10, \"Please provide a brief message about why you'd like to join\"),\n  experience: z.string().optional(),\n});\n\ntype JoinRequestFormData = z.infer<typeof joinRequestSchema>;\n\nexport default function ClassroomLanding() {\n  const { slug } = useParams<{ slug: string }>();\n  const [user, setUser] = useState<any>(null);\n  const [joinDialogOpen, setJoinDialogOpen] = useState(false);\n  const [editMode, setEditMode] = useState(false);\n  const [editorOpen, setEditorOpen] = useState(false);\n  const [previewMode, setPreviewMode] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const currentUser = getCurrentUser();\n    setUser(currentUser);\n  }, []);\n\n  const form = useForm<JoinRequestFormData>({\n    resolver: zodResolver(joinRequestSchema),\n    defaultValues: {\n      message: \"\",\n      experience: \"\",\n    },\n  });\n\n  // Fetch classroom by slug\n  const { data: classroom, isLoading: classroomLoading } = useQuery({\n    queryKey: [\"/api/classrooms/slug\", slug],\n    queryFn: () => apiRequest(`/api/classrooms/slug/${slug}`),\n    enabled: !!slug,\n  });\n\n  // Check if edit mode is requested via URL parameter when classroom data is loaded\n  useEffect(() => {\n    if (classroom && user) {\n      const urlParams = new URLSearchParams(window.location.search);\n      const editParam = urlParams.get('edit');\n      const isMaster = parseInt(user.id) === classroom.masterId;\n      \n      if (editParam === 'true' && isMaster) {\n        setEditorOpen(true);\n        // Remove the edit parameter from URL to clean up\n        window.history.replaceState({}, '', window.location.pathname);\n      }\n    }\n  }, [classroom, user]);\n\n  // Fetch master profile\n  const { data: masterProfile } = useQuery({\n    queryKey: [\"/api/users\", classroom?.masterId],\n    queryFn: () => apiRequest(`/api/users/${classroom?.masterId}`),\n    enabled: !!classroom?.masterId,\n  });\n\n  // Join classroom mutation\n  const joinClassroomMutation = useMutation({\n    mutationFn: (data: JoinRequestFormData) => \n      apiRequest(`/api/classrooms/${classroom?.id}/join`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          userId: user?.id,\n          message: data.message,\n          experience: data.experience,\n        }),\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Join Request Sent!\",\n        description: \"Your request to join this academy has been sent to the master for review.\",\n      });\n      setJoinDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send join request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleJoinSubmit = (data: JoinRequestFormData) => {\n    joinClassroomMutation.mutate(data);\n  };\n\n  const handleShare = () => {\n    const url = window.location.href;\n    navigator.clipboard.writeText(url).then(() => {\n      toast({\n        title: \"Link Copied!\",\n        description: \"Classroom link has been copied to your clipboard.\",\n      });\n    });\n  };\n\n  if (classroomLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Music className=\"h-12 w-12 mx-auto mb-4 text-primary animate-pulse\" />\n          <p className=\"text-muted-foreground\">Loading academy...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!classroom) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"text-center p-8\">\n            <Music className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Academy Not Found</h3>\n            <p className=\"text-muted-foreground\">The academy you're looking for doesn't exist or has been removed.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Safe JSON parsing with comprehensive error handling\n  const safeJsonParse = (jsonString: string | null | undefined, fallback: any) => {\n    if (!jsonString || jsonString.trim() === '' || jsonString === 'null' || jsonString === 'undefined') {\n      return fallback;\n    }\n    \n    // Check for malformed JSON patterns\n    if (jsonString.includes('<!DOCTYPE') || jsonString.includes('<html')) {\n      console.warn('Received HTML instead of JSON:', jsonString.substring(0, 100));\n      return fallback;\n    }\n    \n    try {\n      const parsed = JSON.parse(jsonString);\n      return parsed;\n    } catch (error) {\n      console.warn('Failed to parse JSON:', {\n        input: jsonString.substring(0, 200) + (jsonString.length > 200 ? '...' : ''),\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return fallback;\n    }\n  };\n\n  const parsedSocialLinks = safeJsonParse(classroom?.socialLinks, {});\n  const parsedTestimonials = safeJsonParse(classroom?.testimonials, []);\n  const parsedPricing = safeJsonParse(classroom?.pricing, []);\n  const parsedSchedule = safeJsonParse(classroom?.schedule, []);\n\n  // Check if current user is the master of this academy\n  const isMaster = user?.id && classroom?.masterId && parseInt(user.id) === classroom.masterId;\n\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      {/* Master Controls */}\n      {isMaster && !previewMode && (\n        <div className=\"fixed top-4 right-4 z-50 flex gap-2\">\n          <Button\n            onClick={() => setPreviewMode(true)}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"shadow-lg bg-background/80 backdrop-blur\"\n          >\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Preview\n          </Button>\n          <Button\n            onClick={() => setEditorOpen(true)}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"shadow-lg bg-background/80 backdrop-blur\"\n          >\n            <Edit className=\"h-4 w-4 mr-2\" />\n            Edit Page\n          </Button>\n        </div>\n      )}\n\n      {/* Preview Mode Banner */}\n      {isMaster && previewMode && (\n        <div className=\"fixed top-0 left-0 right-0 z-50 bg-primary text-primary-foreground px-4 py-2\">\n          <div className=\"flex items-center justify-between container mx-auto\">\n            <div className=\"flex items-center gap-2\">\n              <Eye className=\"h-4 w-4\" />\n              <span className=\"text-sm font-medium\">Preview Mode - This is how visitors see your academy</span>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => setEditorOpen(true)}\n                variant=\"secondary\"\n                size=\"sm\"\n              >\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Edit\n              </Button>\n              <Button\n                onClick={() => setPreviewMode(false)}\n                variant=\"secondary\"\n                size=\"sm\"\n              >\n                Exit Preview\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Academy Editor Dialog */}\n      {classroom && isMaster && (\n        <AcademyEditor\n          classroom={classroom}\n          isOpen={editorOpen}\n          onClose={() => setEditorOpen(false)}\n        />\n      )}\n\n      {/* Navigation Header */}\n      <header className={`border-b bg-background/95 backdrop-blur sticky z-40 ${previewMode ? 'top-12' : 'top-0'}`}>\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              {classroom.logoImage && (\n                <Avatar className=\"h-10 w-10\">\n                  <AvatarImage src={classroom.logoImage} alt={classroom.academyName} />\n                  <AvatarFallback>{classroom.academyName.charAt(0)}</AvatarFallback>\n                </Avatar>\n              )}\n              <div>\n                <h2 className=\"font-semibold text-lg\">{classroom.academyName}</h2>\n                <p className=\"text-sm text-muted-foreground\">{classroom.subject} Academy</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleShare}>\n                <Share2 className=\"h-4 w-4 mr-2\" />\n                Share\n              </Button>\n              {(!isMaster || previewMode) && (\n                <Dialog open={joinDialogOpen} onOpenChange={setJoinDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button size=\"sm\">\n                      <Heart className=\"h-4 w-4 mr-2\" />\n                      Join Academy\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Join {classroom.academyName}</DialogTitle>\n                      <DialogDescription>\n                        Send a request to join this academy. The master will review your application.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(handleJoinSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"message\"\n                          render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Why would you like to join?</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Tell us about your musical goals and why you're interested in this academy...\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"experience\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Musical Experience (Optional)</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"e.g., Beginner, 2 years piano, etc.\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex gap-2\">\n                        <Button type=\"submit\" disabled={joinClassroomMutation.isPending}>\n                          {joinClassroomMutation.isPending ? \"Sending...\" : \"Send Request\"}\n                        </Button>\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setJoinDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section \n        className=\"relative min-h-[85vh] flex items-center overflow-hidden\"\n        style={{\n          background: classroom.heroImage \n            ? `linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.3)), url(${classroom.heroImage})`\n            : `linear-gradient(135deg, ${classroom.primaryColor || '#3B82F6'}, ${classroom.secondaryColor || '#10B981'})`\n        }}\n      >\n        {/* Background Image */}\n        {classroom.heroImage && (\n          <div className=\"absolute inset-0\">\n            <img \n              src={classroom.heroImage} \n              alt=\"Academy Hero\" \n              className=\"w-full h-full object-cover\"\n            />\n            <div \n              className=\"absolute inset-0\"\n              style={{\n                background: `linear-gradient(135deg, ${classroom.primaryColor || '#3B82F6'}60, ${classroom.secondaryColor || '#10B981'}60)`\n              }}\n            />\n          </div>\n        )}\n\n        {/* Content */}\n        <div className=\"relative z-10 container mx-auto px-4 py-20 text-center text-white\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Academy Logo */}\n            {classroom.logoImage && (\n              <div className=\"mb-8\">\n                <Avatar className=\"h-24 w-24 mx-auto border-4 border-white/20 shadow-2xl\">\n                  <AvatarImage src={classroom.logoImage} alt={classroom.academyName} />\n                  <AvatarFallback className=\"text-3xl bg-white/20 text-white backdrop-blur\">\n                    {(classroom.academyName || classroom.title).charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n              </div>\n            )}\n\n            <Badge \n              variant=\"outline\" \n              className=\"mb-6 text-sm border-white/30 bg-white/10 text-white backdrop-blur\"\n            >\n              {classroom.level} • {classroom.subject} Academy\n            </Badge>\n\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 drop-shadow-lg animate-slide-up\">\n              {classroom.academyName || classroom.title}\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-white/90 mb-8 max-w-3xl mx-auto drop-shadow animate-slide-up\">\n              {classroom.description || `Master ${classroom.subject} with expert guidance and personalized instruction`}\n            </p>\n\n            {/* Instruments Display */}\n            {classroom.instruments && classroom.instruments.length > 0 && (\n              <div className=\"flex flex-wrap justify-center gap-3 mb-12 animate-slide-up\">\n                {classroom.instruments.map((instrument: string, index: number) => (\n                  <Badge \n                    key={index} \n                    variant=\"secondary\" \n                    className=\"text-base py-2 px-4 bg-white/20 text-white border-white/20 backdrop-blur\"\n                  >\n                    {instrument}\n                  </Badge>\n                ))}\n              </div>\n            )}\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center animate-slide-up\">\n              {(!isMaster || previewMode) && (\n                <Dialog open={joinDialogOpen} onOpenChange={setJoinDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button \n                      size=\"lg\" \n                      className=\"text-lg px-8 py-6 shadow-2xl transition-transform hover:scale-105\"\n                      style={{ backgroundColor: classroom.secondaryColor || '#10B981' }}\n                    >\n                      <Sparkles className=\"mr-2 h-5 w-5\" />\n                      Start Your Musical Journey\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Join {classroom.academyName || classroom.title}</DialogTitle>\n                      <DialogDescription>\n                        Send a request to join this academy. The master will review your application.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(handleJoinSubmit)} className=\"space-y-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"message\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Why would you like to join?</FormLabel>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"Tell us about your musical goals and why you're interested in this academy...\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"experience\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Musical Experience (Optional)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"e.g., Beginner, 2 years piano, etc.\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button type=\"submit\" disabled={joinClassroomMutation.isPending}>\n                            {joinClassroomMutation.isPending ? \"Sending...\" : \"Send Request\"}\n                          </Button>\n                          <Button type=\"button\" variant=\"outline\" onClick={() => setJoinDialogOpen(false)}>\n                            Cancel\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              )}\n              <Button variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-4\" onClick={handleShare}>\n                <Share2 className=\"mr-2 h-5 w-5\" />\n                Share Academy\n              </Button>\n              {isMaster && !previewMode && (\n                <Link to=\"/master-dashboard\">\n                  <Button variant=\"outline\" size=\"lg\" className=\"text-lg px-8 py-4\">\n                    <Settings className=\"mr-2 h-5 w-5\" />\n                    Manage Academy\n                  </Button>\n                </Link>\n              )}\n            </div>\n\n            {/* Stats */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 animate-slide-up\">\n              <div className=\"text-center p-4 bg-card/80 backdrop-blur rounded-lg shadow-lg\">\n                <div className=\"text-2xl font-bold text-primary mb-1\">{classroom.maxStudents || 50}</div>\n                <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                  <Users className=\"mr-1 h-4 w-4\" />\n                  Max Students\n                </div>\n              </div>\n              <div className=\"text-center p-4 bg-card/80 backdrop-blur rounded-lg shadow-lg\">\n                <div className=\"text-2xl font-bold text-primary mb-1\">{classroom.instruments?.length || 0}</div>\n                <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                  <Music className=\"mr-1 h-4 w-4\" />\n                  Instruments\n                </div>\n              </div>\n              <div className=\"text-center p-4 bg-card/80 backdrop-blur rounded-lg shadow-lg\">\n                <div className=\"text-2xl font-bold text-primary mb-1\">{classroom.level || 'All'}</div>\n                <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                  <Award className=\"mr-1 h-4 w-4\" />\n                  Level\n                </div>\n              </div>\n              <div className=\"text-center p-4 bg-card/80 backdrop-blur rounded-lg shadow-lg\">\n                <div className=\"text-2xl font-bold text-primary mb-1\">{new Date(classroom.createdAt).getFullYear()}</div>\n                <div className=\"text-sm text-muted-foreground flex items-center justify-center\">\n                  <Calendar className=\"mr-1 h-4 w-4\" />\n                  Established\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-purple-600 bg-clip-text text-transparent\">\n              {classroom.features && classroom.features.length > 0 ? \n                `Everything You Need to Master ${classroom.subject}` : \n                \"Your Academy Features\"\n              }\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              {classroom.features && classroom.features.length > 0 ? \n                \"Our academy provides all the tools and support you need for your musical journey\" :\n                \"Highlight what makes your academy special. Add features in the editor to showcase your offerings.\"\n              }\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {classroom.features && classroom.features.length > 0 ? (\n              classroom.features.map((feature: string, index: number) => {\n                const icons = [BookOpen, Users, Video, Music, Trophy, Star, Headphones, GraduationCap];\n                const Icon = icons[index % icons.length];\n                return (\n                  <Card key={index} className=\"group hover:shadow-lg transition-all duration-300 hover:-translate-y-1\">\n                    <CardHeader>\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-primary/10 rounded-lg\">\n                          <Icon className=\"h-6 w-6 text-primary\" />\n                        </div>\n                        <CardTitle className=\"text-lg\">{feature}</CardTitle>\n                      </div>\n                    </CardHeader>\n                  </Card>\n                );\n              })\n            ) : (\n              // Placeholder features\n              [\n                { name: \"One-on-One Instruction\", icon: Users },\n                { name: \"Group Classes\", icon: BookOpen },\n                { name: \"Performance Opportunities\", icon: Trophy },\n                { name: \"Music Theory Integration\", icon: Music },\n                { name: \"Online Learning Support\", icon: Video },\n                { name: \"Professional Equipment\", icon: Headphones }\n              ].map((feature, index) => (\n                <Card key={index} className=\"group hover:shadow-lg transition-all duration-300 hover:-translate-y-1 opacity-60\">\n                  <CardHeader>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-primary/10 rounded-lg\">\n                        <feature.icon className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <CardTitle className=\"text-lg text-muted-foreground\">{feature.name}</CardTitle>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground italic mt-2\">\n                      Add your academy features in the editor\n                    </p>\n                  </CardHeader>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold mb-6\">\n                About {classroom.academyName || (\n                  <span className=\"text-muted-foreground italic\">Your Academy Name</span>\n                )}\n              </h2>\n              <p className=\"text-lg text-muted-foreground mb-6\">\n                {classroom.about || classroom.description || (\n                  <span className=\"italic\">\n                    Add your academy's story here. Tell students about your mission, teaching philosophy, and what makes your academy special. Click \"Edit Page\" to customize this content.\n                  </span>\n                )}\n              </p>\n              {classroom.curriculum ? (\n                <div className=\"mb-6\">\n                  <h3 className=\"text-xl font-semibold mb-3\">Our Curriculum</h3>\n                  <p className=\"text-muted-foreground\">{classroom.curriculum}</p>\n                </div>\n              ) : (\n                <div className=\"mb-6\">\n                  <h3 className=\"text-xl font-semibold mb-3 text-muted-foreground\">Your Curriculum</h3>\n                  <p className=\"text-muted-foreground italic\">\n                    Describe your teaching approach, curriculum structure, and learning outcomes here.\n                  </p>\n                </div>\n              )}\n              \n              {/* Academy Founder */}\n              <div className=\"flex items-center gap-4 mb-6\">\n                {masterProfile && (\n                  <>\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarImage src={masterProfile.avatar} />\n                      <AvatarFallback>\n                        {masterProfile.firstName?.charAt(0)}{masterProfile.lastName?.charAt(0)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <p className=\"font-medium\">{masterProfile.firstName} {masterProfile.lastName}</p>\n                      <p className=\"text-sm text-muted-foreground\">Academy Founder</p>\n                    </div>\n                  </>\n                )}\n              </div>\n\n              {/* Academy Staff Section */}\n              <div>\n                <h3 className=\"text-xl font-semibold mb-4\">Our Teaching Staff</h3>\n                <div className=\"p-4 bg-muted/50 rounded-lg text-center\">\n                  <Users className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                  <p className=\"text-sm text-muted-foreground italic\">\n                    Your academy teaching staff will be displayed here when mentors join your team.\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"relative\">\n              {classroom.aboutImage ? (\n                <img \n                  src={classroom.aboutImage} \n                  alt=\"About our academy\" \n                  className=\"rounded-lg shadow-2xl w-full h-96 object-cover\"\n                />\n              ) : (\n                <div className=\"bg-gradient-to-br from-primary/20 to-purple-600/20 rounded-lg h-96 flex flex-col items-center justify-center text-center p-6\">\n                  <ImageIcon className=\"h-16 w-16 text-primary/40 mb-4\" />\n                  <p className=\"text-muted-foreground italic\">\n                    Add an image showcasing your academy, studio, or teaching environment here\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-gradient-to-r from-muted/50 to-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">\n              {parsedTestimonials.length > 0 ? \"What Our Students Say\" : \"Student Testimonials\"}\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              {parsedTestimonials.length > 0 ? \n                \"Join the musicians who have transformed their skills with us\" :\n                \"Student testimonials will appear here. Add them in the editor to showcase your success stories.\"\n              }\n            </p>\n          </div>\n          \n          {parsedTestimonials.length > 0 ? (\n            <Carousel\n              opts={{\n                align: \"start\",\n                loop: true,\n              }}\n              className=\"w-full max-w-6xl mx-auto\"\n            >\n              <CarouselContent>\n                {parsedTestimonials.map((testimonial: any, index: number) => (\n                  <CarouselItem key={index} className=\"md:basis-1/2 lg:basis-1/3\">\n                    <div className=\"p-1\">\n                      <Card className=\"bg-card/80 backdrop-blur border-border/50 hover:shadow-lg transition-all duration-300 h-full\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-center mb-4\">\n                            {[...Array(testimonial.rating || 5)].map((_, i) => (\n                              <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                            ))}\n                          </div>\n                          <Quote className=\"h-8 w-8 text-primary/20 mb-4\" />\n                          <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                            {testimonial.text}\n                          </p>\n                          <div className=\"flex items-center gap-3\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarImage src={testimonial.avatar} />\n                              <AvatarFallback>\n                                {testimonial.name.split(' ').map((n: string) => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium\">{testimonial.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{testimonial.role || 'Student'}</p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </CarouselItem>\n                ))}\n              </CarouselContent>\n              <CarouselPrevious />\n              <CarouselNext />\n            </Carousel>\n          ) : (\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[1, 2, 3].map((index) => (\n                  <Card key={index} className=\"bg-card/80 backdrop-blur border-border/50 opacity-60\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center mb-4\">\n                        {[...Array(5)].map((_, i) => (\n                          <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                        ))}\n                      </div>\n                      <Quote className=\"h-8 w-8 text-primary/20 mb-4\" />\n                      <p className=\"text-muted-foreground mb-6 leading-relaxed italic\">\n                        \"Add student testimonials here to showcase success stories and build trust with potential students.\"\n                      </p>\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarFallback>?</AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium text-muted-foreground\">Student Name</p>\n                          <p className=\"text-sm text-muted-foreground\">Student Role</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Contact and Pricing Section */}\n      <section className=\"py-20 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* Contact Information */}\n            <Card className=\"shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">Contact Information</CardTitle>\n                <CardDescription>Get in touch with our academy</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {classroom.contactEmail && (\n                  <div className=\"flex items-center gap-4 p-4 bg-muted/50 rounded-lg\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                      <Mail className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Email</p>\n                      <a href={`mailto:${classroom.contactEmail}`} className=\"text-primary hover:underline text-lg\">\n                        {classroom.contactEmail}\n                      </a>\n                    </div>\n                  </div>\n                )}\n                {classroom.contactPhone && (\n                  <div className=\"flex items-center gap-4 p-4 bg-muted/50 rounded-lg\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                      <Phone className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Phone</p>\n                      <a href={`tel:${classroom.contactPhone}`} className=\"text-primary hover:underline text-lg\">\n                        {classroom.contactPhone}\n                      </a>\n                    </div>\n                  </div>\n                )}\n                {classroom.website && (\n                  <div className=\"flex items-center gap-4 p-4 bg-muted/50 rounded-lg\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                      <Globe className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Website</p>\n                      <a href={classroom.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary hover:underline text-lg\">\n                        Visit Website\n                      </a>\n                    </div>\n                  </div>\n                )}\n                {classroom.address && (\n                  <div className=\"flex items-center gap-4 p-4 bg-muted/50 rounded-lg\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                      <MapPin className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Location</p>\n                      <p className=\"text-muted-foreground\">{classroom.address}</p>\n                    </div>\n                  </div>\n                )}\n\n                {/* Social Links */}\n                {Object.keys(parsedSocialLinks).length > 0 && (\n                  <div className=\"pt-6 border-t\">\n                    <p className=\"font-medium mb-4\">Follow Us</p>\n                    <div className=\"flex gap-3\">\n                      {parsedSocialLinks.instagram && (\n                        <a href={parsedSocialLinks.instagram} target=\"_blank\" rel=\"noopener noreferrer\" className=\"p-2 bg-primary/10 rounded-lg hover:bg-primary/20 transition-colors\">\n                          <Instagram className=\"h-5 w-5 text-primary\" />\n                        </a>\n                      )}\n                      {parsedSocialLinks.facebook && (\n                        <a href={parsedSocialLinks.facebook} target=\"_blank\" rel=\"noopener noreferrer\" className=\"p-2 bg-primary/10 rounded-lg hover:bg-primary/20 transition-colors\">\n                          <Facebook className=\"h-5 w-5 text-primary\" />\n                        </a>\n                      )}\n                      {parsedSocialLinks.twitter && (\n                        <a href={parsedSocialLinks.twitter} target=\"_blank\" rel=\"noopener noreferrer\" className=\"p-2 bg-primary/10 rounded-lg hover:bg-primary/20 transition-colors\">\n                          <Twitter className=\"h-5 w-5 text-primary\" />\n                        </a>\n                      )}\n                      {parsedSocialLinks.youtube && (\n                        <a href={parsedSocialLinks.youtube} target=\"_blank\" rel=\"noopener noreferrer\" className=\"p-2 bg-primary/10 rounded-lg hover:bg-primary/20 transition-colors\">\n                          <Youtube className=\"h-5 w-5 text-primary\" />\n                        </a>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Pricing */}\n            <Card className=\"shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl flex items-center gap-2\">\n                  <DollarSign className=\"h-6 w-6\" />\n                  Pricing Plans\n                </CardTitle>\n                <CardDescription>Choose the best plan for your musical journey</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {parsedPricing.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {parsedPricing.map((price: any, index: number) => (\n                      <div key={index} className=\"border rounded-xl p-6 hover:shadow-lg transition-all duration-300\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"text-xl font-semibold\">{price.name}</h3>\n                            <p className=\"text-muted-foreground\">{price.description}</p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-lg px-3 py-1\">{price.price}</Badge>\n                        </div>\n                        {price.features && (\n                          <ul className=\"space-y-2 mt-4\">\n                            {price.features.map((feature: string, featureIndex: number) => (\n                              <li key={featureIndex} className=\"flex items-center gap-2 text-sm\">\n                                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                                {feature}\n                              </li>\n                            ))}\n                          </ul>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {[\n                      { name: \"Basic Plan\", price: \"$XX/month\", description: \"Perfect for beginners\" },\n                      { name: \"Premium Plan\", price: \"$XX/month\", description: \"For serious students\" },\n                      { name: \"Professional Plan\", price: \"$XX/month\", description: \"Advanced instruction\" }\n                    ].map((plan, index) => (\n                      <div key={index} className=\"border rounded-xl p-6 opacity-60\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"text-xl font-semibold text-muted-foreground\">{plan.name}</h3>\n                            <p className=\"text-muted-foreground italic\">{plan.description}</p>\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-lg px-3 py-1 text-muted-foreground\">{plan.price}</Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground italic mt-4\">\n                          Add your pricing plans in the editor to show students your lesson options and rates.\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-primary to-purple-600 text-white\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-bold mb-6\">Ready to Start Your Musical Journey?</h2>\n          <p className=\"text-xl mb-8 text-white/90 max-w-2xl mx-auto\">\n            Join {classroom.academyName} today and transform your musical skills with personalized instruction from expert masters.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            {!isMaster && (\n              <Dialog open={joinDialogOpen} onOpenChange={setJoinDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"lg\" variant=\"secondary\" className=\"text-lg px-8 py-4\">\n                    <Heart className=\"mr-2 h-5 w-5\" />\n                    Join Academy Now\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Join {classroom.academyName}</DialogTitle>\n                    <DialogDescription>\n                      Send a request to join this academy. The master will review your application.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(handleJoinSubmit)} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"message\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Why would you like to join?</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Tell us about your musical goals and why you're interested in this academy...\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"experience\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Musical Experience (Optional)</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"e.g., Beginner, 2 years piano, etc.\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex gap-2\">\n                        <Button type=\"submit\" disabled={joinClassroomMutation.isPending}>\n                          {joinClassroomMutation.isPending ? \"Sending...\" : \"Send Request\"}\n                        </Button>\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setJoinDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            )}\n            <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-4 border-white/30 text-white hover:bg-white/10\" onClick={handleShare}>\n              <Share2 className=\"mr-2 h-5 w-5\" />\n              Share Academy\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-background border-t py-12\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center gap-3 mb-4\">\n              {classroom.logoImage && (\n                <Avatar className=\"h-12 w-12\">\n                  <AvatarImage src={classroom.logoImage} alt={classroom.academyName} />\n                  <AvatarFallback>{classroom.academyName.charAt(0)}</AvatarFallback>\n                </Avatar>\n              )}\n              <div>\n                <h3 className=\"text-xl font-semibold\">{classroom.academyName}</h3>\n                <p className=\"text-muted-foreground\">{classroom.subject} Academy</p>\n              </div>\n            </div>\n            <p className=\"text-muted-foreground mb-6 max-w-2xl mx-auto\">\n              {classroom.description || `Empowering musicians to reach their full potential through expert guidance and personalized instruction.`}\n            </p>\n            <div className=\"flex justify-center items-center gap-6 text-sm text-muted-foreground\">\n              <p>© {new Date().getFullYear()} {classroom.academyName}. All rights reserved.</p>\n              <div className=\"flex items-center gap-1\">\n                <Shield className=\"h-4 w-4\" />\n                <span>Powered by HarmonyLearn</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":46805},"client/src/pages/ClassroomManage.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { RoleSelector } from \"@/components/classroom/RoleSelector\";\nimport { ManagementTabs } from \"@/components/classroom/ManagementTabs\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\nconst ClassroomManage = () => {\n  const [currentRole, setCurrentRole] = useState<Role>(\"master\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        {/* Role Selector */}\n        <div className=\"mb-8\">\n          <RoleSelector currentRole={currentRole} onRoleChange={setCurrentRole} />\n        </div>\n\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold bg-gradient-hero bg-clip-text text-transparent\">\n            Classroom Management\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Manage classrooms, students, content, and analytics\n          </p>\n        </div>\n\n        {/* Management Interface */}\n        <ManagementTabs role={currentRole} />\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default ClassroomManage;","size_bytes":1218},"client/src/pages/ClassroomManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  Crown, Users, Calendar, BookOpen, Settings, \n  BarChart3, MessageSquare, Plus, Edit, Trash2,\n  Clock, Award, Target, Video, FileText,\n  UserPlus, CalendarPlus, GraduationCap, \n  Upload, Download, Bell, Search, Filter,\n  CheckCircle, AlertCircle, Star, TrendingUp\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Dialog, DialogContent, DialogDescription, \n  DialogHeader, DialogTitle, DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { \n  Table, TableBody, TableCell, TableHead, \n  TableHeader, TableRow \n} from \"@/components/ui/table\";\nimport { \n  Select, SelectContent, SelectItem, \n  SelectTrigger, SelectValue \n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport TimetableManager from \"@/components/classroom/TimetableManager\";\n\ninterface Classroom {\n  id: number;\n  title: string;\n  academyName: string;\n  description: string;\n  subject: string;\n  level: string;\n  maxStudents: number;\n  masterId: number;\n  isActive: boolean;\n  customSlug: string;\n  primaryColor: string;\n  secondaryColor: string;\n  instruments: string[];\n  features: string[];\n  createdAt: string;\n}\n\ninterface StaffMember {\n  id: number;\n  userId: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  specialization: string;\n  experience: string;\n  role: string;\n  status: string;\n  joinedAt: string;\n  assignedSubjects: string[];\n  totalSessions: number;\n  rating: number;\n}\n\ninterface Student {\n  id: number;\n  userId: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  enrolledAt: string;\n  progress: number;\n  level: string;\n  lastActivity: string;\n  totalSessions: number;\n  achievements: number;\n}\n\ninterface Session {\n  id: number;\n  title: string;\n  description: string;\n  scheduledAt: string;\n  duration: number;\n  instructorId: number;\n  instructorName: string;\n  maxParticipants: number;\n  currentParticipants: number;\n  status: string;\n  type: string;\n}\n\nexport default function ClassroomManagement() {\n  const { classroomId } = useParams();\n  const [user, setUser] = useState<any>(null);\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const currentUser = getCurrentUser();\n    setUser(currentUser);\n  }, []);\n\n  // Fetch classroom details\n  const { data: classroom, isLoading: classroomLoading } = useQuery({\n    queryKey: [\"/api/classrooms\", classroomId],\n    queryFn: () => apiRequest(`/api/classrooms/${classroomId}`),\n    enabled: !!classroomId,\n  });\n\n  // Fetch staff members\n  const { data: staffMembers = [], isLoading: staffLoading } = useQuery({\n    queryKey: [\"/api/classroom-memberships\", classroomId, \"staff\"],\n    queryFn: () => apiRequest(`/api/classroom-memberships?classroomId=${classroomId}&role=staff`),\n    enabled: !!classroomId,\n  });\n\n  // Fetch students\n  const { data: students = [], isLoading: studentsLoading } = useQuery({\n    queryKey: [\"/api/classroom-memberships\", classroomId, \"students\"],\n    queryFn: () => apiRequest(`/api/classroom-memberships?classroomId=${classroomId}&role=student`),\n    enabled: !!classroomId,\n  });\n\n  // Fetch sessions\n  const { data: sessions = [], isLoading: sessionsLoading } = useQuery({\n    queryKey: [\"/api/live-sessions\", classroomId],\n    queryFn: () => apiRequest(`/api/live-sessions?classroomId=${classroomId}`),\n    enabled: !!classroomId,\n  });\n\n  if (classroomLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p>Loading classroom management...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!classroom) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <AlertCircle className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-semibold mb-2\">Classroom Not Found</h1>\n            <p className=\"text-muted-foreground\">\n              The classroom you're looking for doesn't exist or you don't have access to it.\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const renderOverviewTab = () => (\n    <div className=\"space-y-6\">\n      {/* Classroom Header Info */}\n      <Card \n        className=\"relative overflow-hidden\"\n        style={{ \n          background: `linear-gradient(135deg, ${classroom.primaryColor || '#3B82F6'} 0%, ${classroom.secondaryColor || '#10B981'} 100%)` \n        }}\n      >\n        <div className=\"absolute inset-0 bg-black/20\" />\n        <CardContent className=\"relative p-6 text-white\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-2\">{classroom.academyName}</h2>\n              <p className=\"text-lg opacity-90 mb-4\">{classroom.description}</p>\n              <div className=\"flex items-center gap-4\">\n                <Badge variant=\"secondary\" className=\"bg-white/20 text-white border-white/30\">\n                  {classroom.subject}\n                </Badge>\n                <Badge variant=\"secondary\" className=\"bg-white/20 text-white border-white/30\">\n                  {classroom.level}\n                </Badge>\n                <div className=\"flex items-center gap-1 text-sm\">\n                  <Users className=\"h-4 w-4\" />\n                  {students.length}/{classroom.maxStudents} Students\n                </div>\n              </div>\n            </div>\n            <Crown className=\"h-16 w-16 text-yellow-300\" />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Users className=\"h-8 w-8 text-blue-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{students.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Active Students</p>\n              </div>\n            </div>\n            <Progress value={(students.length / classroom.maxStudents) * 100} className=\"mt-3\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <GraduationCap className=\"h-8 w-8 text-green-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{staffMembers.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Staff Members</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Video className=\"h-8 w-8 text-purple-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{sessions.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Scheduled Sessions</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <TrendingUp className=\"h-8 w-8 text-orange-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">95%</p>\n                <p className=\"text-sm text-muted-foreground\">Avg Progress</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity & Upcoming Sessions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-5 w-5\" />\n              Recent Activity\n            </CardTitle>\n            <CardDescription>Latest updates in your classroom</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback>JS</AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">John Smith joined the class</p>\n                  <p className=\"text-xs text-muted-foreground\">2 hours ago</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback>MJ</AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Mary Johnson completed Assignment 3</p>\n                  <p className=\"text-xs text-muted-foreground\">5 hours ago</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Upcoming Sessions\n            </CardTitle>\n            <CardDescription>Next scheduled classes</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {sessions.slice(0, 3).map((session: Session) => (\n                <div key={session.id} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">{session.title}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(session.scheduledAt).toLocaleDateString()} at{' '}\n                      {new Date(session.scheduledAt).toLocaleTimeString([], { \n                        hour: '2-digit', \n                        minute: '2-digit' \n                      })}\n                    </p>\n                  </div>\n                  <Badge variant=\"outline\">{session.status}</Badge>\n                </div>\n              ))}\n              {sessions.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Calendar className=\"h-12 w-12 mx-auto mb-2\" />\n                  <p>No upcoming sessions</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const renderStaffTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold\">Staff Management</h2>\n          <p className=\"text-muted-foreground\">Manage your teaching staff and their assignments</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button>\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Invite Staff\n          </Button>\n          <Button variant=\"outline\">\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Bulk Import\n          </Button>\n        </div>\n      </div>\n\n      {/* Staff Members Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Teaching Staff ({staffMembers.length})</CardTitle>\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Search staff...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-64\"\n              />\n              <Button variant=\"outline\" size=\"icon\">\n                <Filter className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Staff Member</TableHead>\n                <TableHead>Specialization</TableHead>\n                <TableHead>Experience</TableHead>\n                <TableHead>Assigned Subjects</TableHead>\n                <TableHead>Sessions</TableHead>\n                <TableHead>Rating</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {staffMembers.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-12\">\n                    <GraduationCap className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">No staff members yet</p>\n                    <p className=\"text-sm text-muted-foreground\">Invite mentors to join your teaching team</p>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                staffMembers.map((staff: StaffMember) => (\n                  <TableRow key={staff.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarFallback>\n                            {staff.firstName?.[0]}{staff.lastName?.[0]}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium\">{staff.firstName} {staff.lastName}</p>\n                          <p className=\"text-sm text-muted-foreground\">{staff.email}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>{staff.specialization}</TableCell>\n                    <TableCell>{staff.experience}</TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {staff.assignedSubjects?.map((subject, idx) => (\n                          <Badge key={idx} variant=\"secondary\" className=\"text-xs\">\n                            {subject}\n                          </Badge>\n                        ))}\n                      </div>\n                    </TableCell>\n                    <TableCell>{staff.totalSessions || 0}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"h-4 w-4 text-yellow-500\" />\n                        <span>{staff.rating || 'N/A'}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={staff.status === 'active' ? 'default' : 'secondary'}>\n                        {staff.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Settings className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderStudentsTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold\">Student Management</h2>\n          <p className=\"text-muted-foreground\">Track student progress and manage enrollments</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button>\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Enroll Student\n          </Button>\n          <Button variant=\"outline\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Data\n          </Button>\n        </div>\n      </div>\n\n      {/* Students Table */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Enrolled Students ({students.length})</CardTitle>\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Search students...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-64\"\n              />\n              <Select>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue placeholder=\"Level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"beginner\">Beginner</SelectItem>\n                  <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                  <SelectItem value=\"advanced\">Advanced</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Student</TableHead>\n                <TableHead>Level</TableHead>\n                <TableHead>Progress</TableHead>\n                <TableHead>Sessions</TableHead>\n                <TableHead>Achievements</TableHead>\n                <TableHead>Last Activity</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {students.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={8} className=\"text-center py-12\">\n                    <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">No students enrolled yet</p>\n                    <p className=\"text-sm text-muted-foreground\">Share your academy link to attract students</p>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                students.map((student: Student) => (\n                  <TableRow key={student.id}>\n                    <TableCell>\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarFallback>\n                            {student.firstName?.[0]}{student.lastName?.[0]}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium\">{student.firstName} {student.lastName}</p>\n                          <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{student.level}</Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        <Progress value={student.progress || 0} className=\"w-16\" />\n                        <span className=\"text-sm\">{student.progress || 0}%</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>{student.totalSessions || 0}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Award className=\"h-4 w-4 text-yellow-500\" />\n                        <span>{student.achievements || 0}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {student.lastActivity ? new Date(student.lastActivity).toLocaleDateString() : 'Never'}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"default\">Active</Badge>\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MessageSquare className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <BarChart3 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderScheduleTab = () => (\n    <div className=\"space-y-6\">\n      <TimetableManager classroomId={parseInt(classroomId)} />\n    </div>\n  );\n\n  const renderLegacyScheduleTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold\">Schedule Management</h2>\n          <p className=\"text-muted-foreground\">Manage class schedules and live sessions</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button>\n            <CalendarPlus className=\"h-4 w-4 mr-2\" />\n            Schedule Session\n          </Button>\n          <Button variant=\"outline\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            View Calendar\n          </Button>\n        </div>\n      </div>\n\n      {/* Sessions Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Sessions</CardTitle>\n            <CardDescription>Next scheduled classes and meetings</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {sessions.map((session: Session) => (\n                <div key={session.id} className=\"p-4 border rounded-lg\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <h4 className=\"font-medium\">{session.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{session.description}</p>\n                    </div>\n                    <Badge variant={session.status === 'scheduled' ? 'default' : 'secondary'}>\n                      {session.status}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"h-4 w-4\" />\n                      {new Date(session.scheduledAt).toLocaleString()}\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Users className=\"h-4 w-4\" />\n                      {session.currentParticipants}/{session.maxParticipants}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2 mt-3\">\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Edit className=\"h-4 w-4 mr-1\" />\n                      Edit\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Video className=\"h-4 w-4 mr-1\" />\n                      Start\n                    </Button>\n                  </div>\n                </div>\n              ))}\n              {sessions.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Calendar className=\"h-12 w-12 mx-auto mb-2\" />\n                  <p>No sessions scheduled</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Schedule</CardTitle>\n            <CardDescription>Schedule a new session quickly</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Input placeholder=\"Session title\" />\n            <Textarea placeholder=\"Session description\" rows={3} />\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Input type=\"datetime-local\" />\n              <Input placeholder=\"Duration (minutes)\" type=\"number\" />\n            </div>\n            <Select>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Assign instructor\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"master\">You (Master)</SelectItem>\n                {staffMembers.map((staff: StaffMember) => (\n                  <SelectItem key={staff.id} value={staff.id.toString()}>\n                    {staff.firstName} {staff.lastName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Button className=\"w-full\">\n              <CalendarPlus className=\"h-4 w-4 mr-2\" />\n              Create Session\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const renderCurriculumTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold\">Curriculum Management</h2>\n          <p className=\"text-muted-foreground\">Design and organize your course content</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button>\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Module\n          </Button>\n          <Button variant=\"outline\">\n            <Upload className=\"h-4 w-4 mr-2\" />\n            Upload Materials\n          </Button>\n        </div>\n      </div>\n\n      {/* Curriculum Structure */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Course Modules</CardTitle>\n              <CardDescription>Organize your curriculum into structured modules</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((module) => (\n                  <div key={module} className=\"p-4 border rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">Module {module}: Fundamentals</h4>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-3\">\n                      Introduction to basic techniques and theory\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4 text-sm\">\n                        <span className=\"flex items-center gap-1\">\n                          <BookOpen className=\"h-4 w-4\" />\n                          5 lessons\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          2.5 hours\n                        </span>\n                      </div>\n                      <Badge variant=\"outline\">Active</Badge>\n                    </div>\n                  </div>\n                ))}\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add New Module\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle>Resources</CardTitle>\n              <CardDescription>Manage course materials</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <h5 className=\"font-medium\">Video Lessons</h5>\n                <div className=\"text-sm text-muted-foreground\">12 videos, 8.5 hours</div>\n              </div>\n              <div className=\"space-y-2\">\n                <h5 className=\"font-medium\">Practice Sheets</h5>\n                <div className=\"text-sm text-muted-foreground\">25 PDF files</div>\n              </div>\n              <div className=\"space-y-2\">\n                <h5 className=\"font-medium\">Audio Examples</h5>\n                <div className=\"text-sm text-muted-foreground\">18 audio files</div>\n              </div>\n              <Button variant=\"outline\" className=\"w-full\">\n                <Upload className=\"h-4 w-4 mr-2\" />\n                Upload Resource\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Assignments</CardTitle>\n              <CardDescription>Track student assignments</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Scale Practice</span>\n                  <Badge variant=\"secondary\">8 submitted</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Chord Progression</span>\n                  <Badge variant=\"secondary\">5 submitted</Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Final Performance</span>\n                  <Badge variant=\"outline\">Pending</Badge>\n                </div>\n              </div>\n              <Button variant=\"outline\" className=\"w-full mt-4\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Assignment\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderAnalyticsTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold\">Analytics & Reports</h2>\n          <p className=\"text-muted-foreground\">Track performance and engagement metrics</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Analytics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Users className=\"h-8 w-8 text-blue-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{students.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Total Students</p>\n              </div>\n            </div>\n            <div className=\"mt-3 text-sm text-green-600\">\n              +12% from last month\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Video className=\"h-8 w-8 text-purple-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{sessions.length}</p>\n                <p className=\"text-sm text-muted-foreground\">Sessions This Month</p>\n              </div>\n            </div>\n            <div className=\"mt-3 text-sm text-green-600\">\n              +8% from last month\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Target className=\"h-8 w-8 text-orange-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">87%</p>\n                <p className=\"text-sm text-muted-foreground\">Completion Rate</p>\n              </div>\n            </div>\n            <div className=\"mt-3 text-sm text-green-600\">\n              +5% from last month\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <Star className=\"h-8 w-8 text-yellow-500\" />\n              <div>\n                <p className=\"text-2xl font-bold\">4.8</p>\n                <p className=\"text-sm text-muted-foreground\">Average Rating</p>\n              </div>\n            </div>\n            <div className=\"mt-3 text-sm text-green-600\">\n              +0.2 from last month\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts and detailed analytics would go here */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Student Progress Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <BarChart3 className=\"h-12 w-12 mx-auto mb-2\" />\n              <p>Progress charts will be displayed here</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Engagement Metrics</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <TrendingUp className=\"h-12 w-12 mx-auto mb-2\" />\n              <p>Engagement analytics will be displayed here</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <Crown className=\"h-8 w-8 text-yellow-500\" />\n            <h1 className=\"text-3xl font-bold\">Classroom Management</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Complete management suite for {classroom.academyName}\n          </p>\n        </div>\n\n        {/* Main Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"staff\">Staff ({staffMembers.length})</TabsTrigger>\n            <TabsTrigger value=\"students\">Students ({students.length})</TabsTrigger>\n            <TabsTrigger value=\"schedule\">Schedule</TabsTrigger>\n            <TabsTrigger value=\"curriculum\">Curriculum</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\">{renderOverviewTab()}</TabsContent>\n          <TabsContent value=\"staff\">{renderStaffTab()}</TabsContent>\n          <TabsContent value=\"students\">{renderStudentsTab()}</TabsContent>\n          <TabsContent value=\"schedule\">{renderScheduleTab()}</TabsContent>\n          <TabsContent value=\"curriculum\">{renderCurriculumTab()}</TabsContent>\n          <TabsContent value=\"analytics\">{renderAnalyticsTab()}</TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":36613},"client/src/pages/Community.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { AuthDialog } from \"@/components/AuthDialog\";\nimport { getCurrentUser, isAuthenticated, onAuthStateChange } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Heart, \n  MessageCircle, \n  Share2, \n  Music, \n  Users, \n  Calendar, \n  Trophy,\n  Search,\n  Plus,\n  Play,\n  Download,\n  Star,\n  Clock,\n  MapPin,\n  Volume2\n} from \"lucide-react\";\n\nconst Community = () => {\n  const [activeTab, setActiveTab] = useState(\"feed\");\n  const [authDialogOpen, setAuthDialogOpen] = useState(false);\n  const [selectedFeature, setSelectedFeature] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState(getCurrentUser());\n\n  // Listen for auth state changes\n  useEffect(() => {\n    const cleanup = onAuthStateChange((user) => {\n      setCurrentUser(user);\n    });\n    \n    return cleanup;\n  }, []);\n\n  const handleInteraction = (action: string) => {\n    // Always show sign-in dialog for demo - even if user is somehow authenticated on main pages\n    setSelectedFeature(action);\n    setAuthDialogOpen(true);\n  };\n\n  const posts = [\n    {\n      id: 1,\n      author: \"Sarah Chen\",\n      avatar: \"SC\",\n      instrument: \"Piano\",\n      time: \"2 hours ago\",\n      content: \"Just nailed Chopin's Nocturne in E-flat major after weeks of practice! The key was breaking down the ornaments slowly. Here's my performance:\",\n      audioFile: \"nocturne_performance.mp3\",\n      likes: 42,\n      comments: 8,\n      shares: 3,\n      tags: [\"classical\", \"piano\", \"chopin\"]\n    },\n    {\n      id: 2,\n      author: \"Mike Rodriguez\",\n      avatar: \"MR\",\n      instrument: \"Guitar\",\n      time: \"4 hours ago\",\n      content: \"Looking for a bassist to jam with this weekend! I'm working on some funk grooves. Anyone in downtown area interested?\",\n      likes: 15,\n      comments: 12,\n      shares: 2,\n      tags: [\"jam-session\", \"funk\", \"guitar\", \"collaboration\"]\n    },\n    {\n      id: 3,\n      author: \"Emily Watson\",\n      avatar: \"EW\",\n      instrument: \"Violin\",\n      time: \"1 day ago\",\n      content: \"Quick tip for fellow violinists: Use a pencil eraser to clean rosin buildup from strings. Works like magic! 🎻✨\",\n      likes: 68,\n      comments: 15,\n      shares: 22,\n      tags: [\"tips\", \"violin\", \"maintenance\"]\n    }\n  ];\n\n  const practiceGroups = [\n    {\n      id: 1,\n      name: \"Jazz Improv Circle\",\n      members: 24,\n      instrument: \"Mixed\",\n      nextSession: \"Tomorrow, 7:00 PM\",\n      description: \"Weekly jazz improvisation sessions for intermediate to advanced players.\",\n      image: \"🎷\"\n    },\n    {\n      id: 2,\n      name: \"Classical Piano Study Group\",\n      members: 18,\n      instrument: \"Piano\",\n      nextSession: \"Sunday, 3:00 PM\",\n      description: \"Focused study of classical piano repertoire with peer feedback.\",\n      image: \"🎹\"\n    },\n    {\n      id: 3,\n      name: \"Singer-Songwriter Circle\",\n      members: 31,\n      instrument: \"Voice/Guitar\",\n      nextSession: \"Friday, 6:30 PM\",\n      description: \"Share original songs and get constructive feedback from fellow songwriters.\",\n      image: \"🎤\"\n    }\n  ];\n\n  const forums = [\n    {\n      category: \"Instruments\",\n      topics: [\n        { name: \"Guitar\", posts: 1242, icon: \"🎸\" },\n        { name: \"Piano\", posts: 987, icon: \"🎹\" },\n        { name: \"Violin\", posts: 543, icon: \"🎻\" },\n        { name: \"Drums\", posts: 678, icon: \"🥁\" },\n        { name: \"Voice\", posts: 432, icon: \"🎤\" }\n      ]\n    },\n    {\n      category: \"Genres\",\n      topics: [\n        { name: \"Classical\", posts: 765, icon: \"🎼\" },\n        { name: \"Jazz\", posts: 543, icon: \"🎷\" },\n        { name: \"Rock\", posts: 892, icon: \"🤘\" },\n        { name: \"Folk\", posts: 234, icon: \"🪕\" },\n        { name: \"Electronic\", posts: 456, icon: \"🎧\" }\n      ]\n    }\n  ];\n\n  const events = [\n    {\n      id: 1,\n      title: \"Virtual Open Mic Night\",\n      date: \"March 15, 2024\",\n      time: \"8:00 PM EST\",\n      participants: 45,\n      type: \"Virtual\",\n      description: \"Join us for a monthly open mic where musicians of all levels can perform and connect.\"\n    },\n    {\n      id: 2,\n      title: \"Guitar Workshop: Fingerpicking Techniques\",\n      date: \"March 18, 2024\",\n      time: \"2:00 PM PST\",\n      participants: 28,\n      type: \"Workshop\",\n      description: \"Master the art of fingerpicking with expert guitarist Maria Santos.\"\n    },\n    {\n      id: 3,\n      title: \"Local Jam Session - NYC\",\n      date: \"March 20, 2024\",\n      time: \"7:00 PM EST\",\n      participants: 12,\n      type: \"In-Person\",\n      location: \"Brooklyn Music Studio\",\n      description: \"In-person jam session for intermediate musicians in New York City area.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        \n\n        {/* Welcome Banner */}\n        <div className=\"mb-8\">\n          <Card className=\"border-2 border-primary/20 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-pink-500/5\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center gap-2 mb-3\">\n                <Users className=\"h-6 w-6 text-primary\" />\n                <h3 className=\"text-xl font-semibold bg-gradient-hero bg-clip-text text-transparent\">\n                  Welcome to HarmonyLearn Community\n                </h3>\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                Discover our vibrant music community where musicians share, learn, and grow together. Join thousands of passionate learners on their musical journey.\n              </p>\n              <Button onClick={() => handleInteraction(\"join community\")} className=\"bg-gradient-hero hover:opacity-90\">\n                Get Started\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Community Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Users className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold\">12,547</div>\n              <div className=\"text-sm text-muted-foreground\">Active Members</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <MessageCircle className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold\">8,392</div>\n              <div className=\"text-sm text-muted-foreground\">Posts This Month</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Music className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold\">1,245</div>\n              <div className=\"text-sm text-muted-foreground\">Shared Recordings</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Calendar className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold\">89</div>\n              <div className=\"text-sm text-muted-foreground\">Upcoming Events</div>\n            </CardContent>\n          </Card>\n        </div>\n\n\n\n        {/* Main Content Tabs with Overlay */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-t from-background/95 via-background/20 to-transparent z-10 pointer-events-none\" />\n          <div className=\"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-background via-background/80 to-transparent z-20 pointer-events-none\" />\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6 relative\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"feed\">Community Feed</TabsTrigger>\n            <TabsTrigger value=\"groups\">Practice Groups</TabsTrigger>\n            <TabsTrigger value=\"forums\">Forums</TabsTrigger>\n            <TabsTrigger value=\"events\">Events</TabsTrigger>\n          </TabsList>\n\n          {/* Community Feed */}\n          <TabsContent value=\"feed\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Main Feed */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                {/* Create Post */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Plus className=\"h-5 w-5\" />\n                      Share Your Musical Journey\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <Textarea placeholder=\"What are you practicing today? Share your progress, ask questions, or start a discussion...\" />\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Volume2 className=\"h-4 w-4 mr-2\" />\n                          Add Audio\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Music className=\"h-4 w-4 mr-2\" />\n                          Add Tags\n                        </Button>\n                      </div>\n                      <Button variant=\"hero\" onClick={() => handleInteraction(\"post creation\")}>Post</Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Posts */}\n                {posts.map((post) => (\n                  <Card key={post.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start gap-4\">\n                        <Avatar>\n                          <AvatarFallback>{post.avatar}</AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <h4 className=\"font-semibold\">{post.author}</h4>\n                            <Badge variant=\"secondary\">{post.instrument}</Badge>\n                            <span className=\"text-sm text-muted-foreground\">{post.time}</span>\n                          </div>\n                          <p className=\"text-foreground mb-3\">{post.content}</p>\n                          \n                          {post.audioFile && (\n                            <div className=\"bg-muted p-3 rounded-lg mb-3 flex items-center gap-3\">\n                              <Button size=\"icon\" variant=\"outline\">\n                                <Play className=\"h-4 w-4\" />\n                              </Button>\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium\">{post.audioFile}</div>\n                                <div className=\"text-sm text-muted-foreground\">Audio Recording • 2:43</div>\n                              </div>\n                              <Button size=\"icon\" variant=\"ghost\">\n                                <Download className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          )}\n\n                          <div className=\"flex flex-wrap gap-2 mb-3\">\n                            {post.tags.map((tag) => (\n                              <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n                                #{tag}\n                              </Badge>\n                            ))}\n                          </div>\n\n                          <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n                            <button \n                              className=\"flex items-center gap-2 hover:text-primary transition-colors\"\n                              onClick={() => handleInteraction(\"like post\")}\n                            >\n                              <Heart className=\"h-4 w-4\" />\n                              {post.likes}\n                            </button>\n                            <button \n                              className=\"flex items-center gap-2 hover:text-primary transition-colors\"\n                              onClick={() => handleInteraction(\"comment on post\")}\n                            >\n                              <MessageCircle className=\"h-4 w-4\" />\n                              {post.comments}\n                            </button>\n                            <button \n                              className=\"flex items-center gap-2 hover:text-primary transition-colors\"\n                              onClick={() => handleInteraction(\"share post\")}\n                            >\n                              <Share2 className=\"h-4 w-4\" />\n                              {post.shares}\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Sidebar */}\n              <div className=\"space-y-6\">\n                {/* Popular Tags */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Trending Topics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {[\"#piano\", \"#guitar\", \"#practice-tips\", \"#jazz\", \"#classical\", \"#beginner\", \"#performance\"].map((tag) => (\n                        <Badge \n                          key={tag} \n                          variant=\"secondary\" \n                          className=\"cursor-pointer hover:bg-primary hover:text-primary-foreground transition-colors\"\n                          onClick={() => handleInteraction(\"explore tag\")}\n                        >\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Featured Members */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Featured Members</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {[\n                      { name: \"Alex Chen\", instrument: \"Jazz Piano\", followers: \"2.3k\" },\n                      { name: \"Maria Santos\", instrument: \"Classical Guitar\", followers: \"1.8k\" },\n                      { name: \"David Kim\", instrument: \"Violin\", followers: \"1.5k\" }\n                    ].map((member, index) => (\n                      <div \n                        key={index} \n                        className=\"flex items-center gap-3 cursor-pointer hover:bg-muted/50 p-2 rounded-lg transition-colors\"\n                        onClick={() => handleInteraction(\"view member profile\")}\n                      >\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarFallback>{member.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                        </Avatar>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{member.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{member.instrument}</div>\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">{member.followers}</div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Practice Groups */}\n          <TabsContent value=\"groups\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold\">Practice Groups</h2>\n              <Button variant=\"hero\" onClick={() => handleInteraction(\"create practice group\")}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Group\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {practiceGroups.map((group) => (\n                <Card key={group.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"text-4xl mb-4 text-center\">{group.image}</div>\n                    <h3 className=\"text-xl font-semibold mb-2\">{group.name}</h3>\n                    <p className=\"text-muted-foreground text-sm mb-4\">{group.description}</p>\n                    \n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Users className=\"h-4 w-4\" />\n                        {group.members} members\n                      </div>\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Music className=\"h-4 w-4\" />\n                        {group.instrument}\n                      </div>\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Clock className=\"h-4 w-4\" />\n                        {group.nextSession}\n                      </div>\n                    </div>\n\n                    <Button className=\"w-full\" variant=\"outline\" onClick={() => handleInteraction(\"join practice group\")}>Join Group</Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Forums */}\n          <TabsContent value=\"forums\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-2xl font-bold\">Discussion Forums</h2>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input \n                    placeholder=\"Search forums...\" \n                    className=\"pl-10 w-64\" \n                    onFocus={() => handleInteraction(\"search forums\")}\n                  />\n                </div>\n                <Button variant=\"hero\" onClick={() => handleInteraction(\"create forum topic\")}>New Topic</Button>\n              </div>\n            </div>\n\n            {forums.map((forum, index) => (\n              <Card key={index}>\n                <CardHeader>\n                  <CardTitle>{forum.category}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {forum.topics.map((topic, topicIndex) => (\n                      <div \n                        key={topicIndex}\n                        className=\"flex items-center gap-3 p-3 rounded-lg border hover:bg-muted/50 cursor-pointer transition-colors\"\n                        onClick={() => handleInteraction(\"view forum topic\")}\n                      >\n                        <div className=\"text-2xl\">{topic.icon}</div>\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{topic.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{topic.posts} posts</div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Events */}\n          <TabsContent value=\"events\" className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-2xl font-bold\">Community Events</h2>\n              <Button variant=\"hero\" onClick={() => handleInteraction(\"create event\")}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Event\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {events.map((event) => (\n                <Card key={event.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <h3 className=\"text-xl font-semibold\">{event.title}</h3>\n                      <Badge variant={event.type === \"Virtual\" ? \"secondary\" : event.type === \"Workshop\" ? \"default\" : \"outline\"}>\n                        {event.type}\n                      </Badge>\n                    </div>\n\n                    <p className=\"text-muted-foreground mb-4\">{event.description}</p>\n\n                    <div className=\"space-y-2 mb-4\">\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Calendar className=\"h-4 w-4\" />\n                        {event.date} at {event.time}\n                      </div>\n                      <div className=\"flex items-center gap-2 text-sm\">\n                        <Users className=\"h-4 w-4\" />\n                        {event.participants} participants\n                      </div>\n                      {event.location && (\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <MapPin className=\"h-4 w-4\" />\n                          {event.location}\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button className=\"flex-1\" onClick={() => handleInteraction(\"join event\")}>Join Event</Button>\n                      <Button variant=\"outline\" size=\"icon\" onClick={() => handleInteraction(\"share event\")}>\n                        <Share2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n      \n      <Footer />\n      \n      <AuthDialog \n        open={authDialogOpen} \n        onOpenChange={setAuthDialogOpen}\n        featureName={selectedFeature}\n      />\n    </div>\n  );\n};\n\nexport default Community;","size_bytes":22953},"client/src/pages/CourseCreation.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { CourseCreationForm } from \"@/components/course/CourseCreationForm\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, BookOpen } from \"lucide-react\";\nimport { getCurrentUser, hasRole } from \"@/lib/auth\";\n\nconst CourseCreation = () => {\n  const [, setLocation] = useLocation();\n  const currentUser = getCurrentUser();\n  const isMentor = hasRole(\"mentor\");\n  const isAdmin = hasRole(\"admin\");\n\n  // Redirect if not authorized\n  if (!currentUser || (!isMentor && !isAdmin)) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-20\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle>Access Denied</CardTitle>\n              <CardDescription>\n                You need to be a mentor or admin to create courses.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button onClick={() => setLocation(\"/courses\")} className=\"w-full\">\n                Back to Courses\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const handleSuccess = () => {\n    setLocation(\"/course-management\");\n  };\n\n  const handleCancel = () => {\n    setLocation(\"/courses\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Breadcrumb */}\n        <div className=\"flex items-center gap-2 mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/courses\")}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Courses\n          </Button>\n        </div>\n\n        <CourseCreationForm \n          onSuccess={handleSuccess}\n          onCancel={handleCancel}\n        />\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default CourseCreation;","size_bytes":2292},"client/src/pages/CourseDetail.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation, Link } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AuthDialog } from \"@/components/AuthDialog\";\nimport { getCurrentUser, isAuthenticated, onAuthStateChange } from \"@/lib/auth\";\nimport { \n  Play, \n  Clock, \n  Users, \n  Star, \n  BookOpen, \n  Download, \n  Share2, \n  Heart,\n  ChevronLeft,\n  CheckCircle,\n  PlayCircle,\n  Trophy,\n  Award,\n  MessageCircle\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Course } from \"@shared/schema\";\n\nconst CourseDetail = () => {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const [authDialogOpen, setAuthDialogOpen] = useState(false);\n  const [currentUser, setCurrentUser] = useState(getCurrentUser());\n  const [isEnrolled, setIsEnrolled] = useState(false);\n\n  // Listen for auth state changes\n  useEffect(() => {\n    const cleanup = onAuthStateChange((user) => {\n      setCurrentUser(user);\n    });\n    \n    return cleanup;\n  }, []);\n\n  const courseId = params.id;\n\n  const { data: courses } = useQuery<Course[]>({\n    queryKey: ['/api/courses'],\n  });\n\n  const course = courses?.find(c => c.id.toString() === courseId);\n\n  const handleEnrollClick = () => {\n    const user = getCurrentUser();\n    if (user && user.role === 'student') {\n      setIsEnrolled(true);\n      // In a real app, make API call to enroll user\n      console.log(\"Enrolling user in course:\", course?.title);\n    } else if (!user) {\n      setAuthDialogOpen(true);\n    } else {\n      // User is authenticated but not a student\n      alert(\"Only student accounts can enroll in courses. Please sign in with a student account.\");\n    }\n  };\n\n  const handleStartLearning = () => {\n    const user = getCurrentUser();\n    if (user && user.role === 'student') {\n      // Navigate to lesson or learning interface\n      console.log(\"Starting course:\", course?.title);\n    } else if (!user) {\n      setAuthDialogOpen(true);\n    } else {\n      // User is authenticated but not a student\n      alert(\"Only student accounts can access course content. Please sign in with a student account.\");\n    }\n  };\n\n  if (!course) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-20 text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Course Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">The course you're looking for doesn't exist.</p>\n          <Link to=\"/courses\">\n            <Button>Browse All Courses</Button>\n          </Link>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  // Mock data for demo purposes - in real app would come from API\n  const lessons = [\n    { id: 1, title: \"Introduction to Fundamentals\", duration: \"15 min\", isCompleted: false, isLocked: false },\n    { id: 2, title: \"Basic Techniques\", duration: \"22 min\", isCompleted: false, isLocked: !isEnrolled },\n    { id: 3, title: \"Practice Exercises\", duration: \"18 min\", isCompleted: false, isLocked: !isEnrolled },\n    { id: 4, title: \"Advanced Concepts\", duration: \"25 min\", isCompleted: false, isLocked: !isEnrolled },\n    { id: 5, title: \"Final Project\", duration: \"30 min\", isCompleted: false, isLocked: !isEnrolled },\n  ];\n\n  const reviews = [\n    { id: 1, name: \"Sarah Johnson\", rating: 5, comment: \"Excellent course! The instructor explains everything clearly and the practice exercises are very helpful.\", date: \"2 weeks ago\" },\n    { id: 2, name: \"Mike Chen\", rating: 4, comment: \"Great content and structure. I learned a lot from this course.\", date: \"1 month ago\" },\n    { id: 3, name: \"Emma Davis\", rating: 5, comment: \"Perfect for beginners. The pace is just right and the examples are practical.\", date: \"3 weeks ago\" },\n  ];\n\n  const instructor = {\n    name: `Instructor ${course.mentorId || 'TBD'}`,\n    bio: \"Expert musician with over 10 years of teaching experience\",\n    rating: 4.9,\n    students: 15000,\n    courses: 12\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Course Header */}\n      <div className=\"bg-gradient-to-r from-primary/10 to-secondary/10 border-b\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Link to=\"/courses\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                <ChevronLeft className=\"h-4 w-4\" />\n                Back to Courses\n              </Button>\n            </Link>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Course Info */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                <Badge variant=\"secondary\">{course.category}</Badge>\n                <Badge className=\"bg-green-100 text-green-800\">{course.level}</Badge>\n              </div>\n              \n              <h1 className=\"text-4xl font-bold mb-4\">{course.title}</h1>\n              <p className=\"text-xl text-muted-foreground mb-6\">\n                {course.description || \"Master the fundamentals with expert guidance and hands-on practice.\"}\n              </p>\n              \n              <div className=\"flex items-center gap-6 text-sm text-muted-foreground mb-6\">\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"font-medium text-foreground\">4.8</span>\n                  <span>(1,234 reviews)</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  <span>2,456 students</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  <span>{course.duration || 30}h total</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-4 w-4\" />\n                  <span>{lessons.length} lessons</span>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-4\">\n                <span className=\"text-3xl font-bold text-primary\">\n                  {course.price || \"Free\"}\n                </span>\n                {course.price && course.price !== \"Free\" && (\n                  <span className=\"text-lg text-muted-foreground line-through\">\n                    ${(parseInt(course.price.replace('$', '')) * 1.5).toFixed(0)}\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            {/* Enrollment Card */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"sticky top-8\">\n                <CardHeader>\n                  <div className=\"aspect-video bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center relative overflow-hidden\">\n                    <div className=\"absolute inset-0 bg-black/20\"></div>\n                    <Button \n                      variant=\"secondary\" \n                      size=\"icon\" \n                      className=\"relative z-10 rounded-full w-16 h-16\"\n                      onClick={handleStartLearning}\n                    >\n                      <Play className=\"h-8 w-8\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {isEnrolled ? (\n                    <>\n                      <Button \n                        className=\"w-full gap-2\" \n                        size=\"lg\"\n                        onClick={handleStartLearning}\n                      >\n                        <PlayCircle className=\"h-5 w-5\" />\n                        Continue Learning\n                      </Button>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Progress</span>\n                          <span>15%</span>\n                        </div>\n                        <Progress value={15} className=\"h-2\" />\n                        <p className=\"text-xs text-muted-foreground\">\n                          1 of {lessons.length} lessons completed\n                        </p>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <Button \n                        className=\"w-full gap-2\" \n                        size=\"lg\"\n                        onClick={handleEnrollClick}\n                      >\n                        Enroll Now\n                      </Button>\n                      <p className=\"text-xs text-center text-muted-foreground\">\n                        30-day money-back guarantee\n                      </p>\n                    </>\n                  )}\n                  \n                  <Separator />\n                  \n                  <div className=\"flex justify-between\">\n                    <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                      <Heart className=\"h-4 w-4\" />\n                      Save\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                      <Share2 className=\"h-4 w-4\" />\n                      Share\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Course Content */}\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"overview\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                <TabsTrigger value=\"curriculum\">Curriculum</TabsTrigger>\n                <TabsTrigger value=\"instructor\">Instructor</TabsTrigger>\n                <TabsTrigger value=\"reviews\">Reviews</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"overview\" className=\"space-y-6 mt-6\">\n                <div>\n                  <h3 className=\"text-2xl font-bold mb-4\">What you'll learn</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {[\n                      \"Master fundamental techniques\",\n                      \"Develop proper practice habits\", \n                      \"Build a strong musical foundation\",\n                      \"Learn essential theory concepts\",\n                      \"Play your first complete pieces\",\n                      \"Gain confidence in performance\"\n                    ].map((item, index) => (\n                      <div key={index} className=\"flex items-center gap-3\">\n                        <CheckCircle className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                        <span>{item}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"text-2xl font-bold mb-4\">Course Description</h3>\n                  <div className=\"prose prose-gray max-w-none\">\n                    <p>\n                      This comprehensive course is designed for absolute beginners who want to start their musical journey. \n                      You'll learn fundamental techniques, proper form, and essential theory that will serve as the foundation \n                      for your musical development.\n                    </p>\n                    <p>\n                      Through a combination of video lessons, practice exercises, and real-world examples, you'll develop \n                      the skills and confidence needed to continue your musical education. No prior experience is required.\n                    </p>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"text-2xl font-bold mb-4\">Requirements</h3>\n                  <ul className=\"space-y-2 text-muted-foreground\">\n                    <li>• No prior musical experience required</li>\n                    <li>• Access to the relevant instrument</li>\n                    <li>• Willingness to practice regularly</li>\n                    <li>• Computer or mobile device for online access</li>\n                  </ul>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"curriculum\" className=\"space-y-4 mt-6\">\n                <h3 className=\"text-2xl font-bold mb-4\">Course Curriculum</h3>\n                <div className=\"space-y-3\">\n                  {lessons.map((lesson) => (\n                    <Card key={lesson.id} className={lesson.isLocked ? \"opacity-60\" : \"\"}>\n                      <CardContent className=\"flex items-center justify-between p-4\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                            {lesson.isCompleted ? (\n                              <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                            ) : lesson.isLocked ? (\n                              <div className=\"w-3 h-3 bg-muted-foreground rounded-full\" />\n                            ) : (\n                              <PlayCircle className=\"h-5 w-5 text-primary\" />\n                            )}\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium\">{lesson.title}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{lesson.duration}</p>\n                          </div>\n                        </div>\n                        {lesson.isLocked && (\n                          <Badge variant=\"outline\">Locked</Badge>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"instructor\" className=\"space-y-6 mt-6\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold text-xl\">\n                        {instructor.name.charAt(0)}\n                      </div>\n                      <div>\n                        <CardTitle>{instructor.name}</CardTitle>\n                        <p className=\"text-muted-foreground\">{instructor.bio}</p>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      <div>\n                        <div className=\"text-2xl font-bold\">{instructor.rating}</div>\n                        <div className=\"text-sm text-muted-foreground\">Rating</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold\">{instructor.students.toLocaleString()}</div>\n                        <div className=\"text-sm text-muted-foreground\">Students</div>\n                      </div>\n                      <div>\n                        <div className=\"text-2xl font-bold\">{instructor.courses}</div>\n                        <div className=\"text-sm text-muted-foreground\">Courses</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              \n              <TabsContent value=\"reviews\" className=\"space-y-6 mt-6\">\n                <div className=\"flex items-center gap-6 mb-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-4xl font-bold\">4.8</div>\n                    <div className=\"flex items-center gap-1 justify-center mb-1\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                      ))}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Course rating</div>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"space-y-2\">\n                      {[5, 4, 3, 2, 1].map((stars) => (\n                        <div key={stars} className=\"flex items-center gap-2\">\n                          <div className=\"flex items-center gap-1\">\n                            <span className=\"text-sm\">{stars}</span>\n                            <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                          </div>\n                          <Progress \n                            value={stars === 5 ? 75 : stars === 4 ? 20 : 5} \n                            className=\"flex-1 h-2\" \n                          />\n                          <span className=\"text-sm text-muted-foreground\">\n                            {stars === 5 ? '75%' : stars === 4 ? '20%' : '5%'}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-6\">\n                  {reviews.map((review) => (\n                    <Card key={review.id}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start gap-4\">\n                          <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold\">\n                            {review.name.charAt(0)}\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <h4 className=\"font-medium\">{review.name}</h4>\n                              <div className=\"flex items-center gap-1\">\n                                {[...Array(review.rating)].map((_, i) => (\n                                  <Star key={i} className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                                ))}\n                              </div>\n                              <span className=\"text-sm text-muted-foreground\">{review.date}</span>\n                            </div>\n                            <p className=\"text-muted-foreground\">{review.comment}</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n          \n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Trophy className=\"h-5 w-5 text-yellow-500\" />\n                  Course Features\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {[\n                  { icon: PlayCircle, text: \"On-demand video lessons\" },\n                  { icon: Download, text: \"Downloadable resources\" },\n                  { icon: Award, text: \"Certificate of completion\" },\n                  { icon: MessageCircle, text: \"Q&A support\" },\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex items-center gap-3\">\n                    <feature.icon className=\"h-4 w-4 text-primary\" />\n                    <span className=\"text-sm\">{feature.text}</span>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle>Related Courses</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {courses?.slice(0, 3).filter(c => c.id !== course.id).map((relatedCourse) => (\n                  <Link key={relatedCourse.id} to={`/courses/${relatedCourse.id}`}>\n                    <div className=\"flex gap-3 hover:bg-muted/50 p-2 rounded-lg transition-colors cursor-pointer\">\n                      <div className=\"w-16 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded flex-shrink-0\"></div>\n                      <div className=\"min-w-0\">\n                        <h4 className=\"font-medium text-sm line-clamp-2\">{relatedCourse.title}</h4>\n                        <p className=\"text-xs text-muted-foreground\">{relatedCourse.price || \"Free\"}</p>\n                      </div>\n                    </div>\n                  </Link>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n      \n      <AuthDialog \n        open={authDialogOpen}\n        onOpenChange={setAuthDialogOpen}\n      />\n    </div>\n  );\n};\n\nexport default CourseDetail;","size_bytes":21721},"client/src/pages/CourseManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { CourseManagementDashboard } from \"@/components/course/CourseManagementDashboard\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Plus } from \"lucide-react\";\nimport { getCurrentUser, hasRole } from \"@/lib/auth\";\n\nconst CourseManagement = () => {\n  const [, setLocation] = useLocation();\n  const currentUser = getCurrentUser();\n  const isMentor = hasRole(\"mentor\");\n  const isAdmin = hasRole(\"admin\");\n\n  // Redirect if not authorized\n  if (!currentUser || (!isMentor && !isAdmin)) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-20\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle>Access Denied</CardTitle>\n              <CardDescription>\n                You need to be a mentor or admin to manage courses.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Button onClick={() => setLocation(\"/courses\")} className=\"w-full\">\n                Back to Courses\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header Actions */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/courses\")}\n            className=\"flex items-center gap-2\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Courses\n          </Button>\n\n          {(isMentor || isAdmin) && (\n            <Button\n              onClick={() => setLocation(\"/course-creation\")}\n              className=\"flex items-center gap-2\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              Create New Course\n            </Button>\n          )}\n        </div>\n\n        <CourseManagementDashboard />\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default CourseManagement;","size_bytes":2400},"client/src/pages/Courses.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { EmptyState } from \"@/components/EmptyState\";\nimport { AuthDialog } from \"@/components/AuthDialog\";\nimport { getCurrentUser, isAuthenticated, onAuthStateChange, hasRole } from \"@/lib/auth\";\nimport { Search, Filter, Clock, Star, Users, BookOpen, TrendingUp, Award, Target, Zap, Guitar, Piano, Drum, Mic, Music4, Music, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CourseCard } from \"@/components/CourseCard\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CourseCardSkeleton, LoadingGrid } from \"@/components/LoadingSkeletons\";\n\ninterface Course {\n  id: number;\n  title: string;\n  description: string;\n  category: string;\n  level: string;\n  price: number;\n  duration: number;\n  mentorId: number;\n  status: string;\n  currentEnrollments: number;\n  maxStudents: number;\n  averageRating: number;\n  totalRatings: number;\n  estimatedWeeks: number;\n  difficulty: number;\n  tags: string[];\n  prerequisites: string[];\n  imageUrl?: string;\n  mentorName?: string;\n}\n\nconst Courses = () => {\n  const [authDialogOpen, setAuthDialogOpen] = useState(false);\n  const [selectedFeature, setSelectedFeature] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState(getCurrentUser());\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [levelFilter, setLevelFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"popular\");\n  const [, setLocation] = useLocation();\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Listen for auth state changes\n  useEffect(() => {\n    const cleanup = onAuthStateChange((user) => {\n      setCurrentUser(user);\n    });\n    \n    return cleanup;\n  }, []);\n\n  // Fetch published courses\n  const { data: courses = [], isLoading: coursesLoading, error } = useQuery<Course[]>({\n    queryKey: ['/api/courses/published'],\n    queryFn: () => apiRequest('/api/courses/published')\n  });\n\n  // Enrollment mutation\n  const enrollMutation = useMutation({\n    mutationFn: async (courseId: number) => {\n      if (!currentUser) {\n        throw new Error(\"Please sign in to enroll\");\n      }\n      return apiRequest('/api/enrollments', {\n        method: 'POST',\n        body: JSON.stringify({\n          userId: currentUser.id,\n          courseId,\n          status: 'active',\n          enrolledAt: new Date().toISOString()\n        })\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Enrolled Successfully\",\n        description: \"You have been enrolled in the course!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/enrollments'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Enrollment Failed\",\n        description: error.message || \"Failed to enroll in course.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleCourseEnroll = (courseId: number) => {\n    if (!isAuthenticated()) {\n      setAuthDialogOpen(true);\n      return;\n    }\n    enrollMutation.mutate(courseId);\n  };\n\n  const handleCourseDetails = (courseId: number) => {\n    setLocation(`/courses/${courseId}`);\n  };\n\n  const handleCourseManage = (courseId: number) => {\n    setLocation(`/course-management/${courseId}`);\n  };\n\n  const handleFeatureClick = (feature: string) => {\n    setSelectedFeature(feature);\n    setAuthDialogOpen(true);\n  };\n\n  // Filter and sort courses\n  const filteredCourses = courses.filter(course => {\n    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         course.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || course.category === categoryFilter;\n    const matchesLevel = levelFilter === \"all\" || course.level === levelFilter;\n    \n    return matchesSearch && matchesCategory && matchesLevel;\n  });\n\n  const sortedCourses = [...filteredCourses].sort((a, b) => {\n    switch (sortBy) {\n      case \"rating\":\n        return b.averageRating - a.averageRating;\n      case \"price-low\":\n        return a.price - b.price;\n      case \"price-high\":\n        return b.price - a.price;\n      case \"newest\":\n        return b.id - a.id;\n      default: // popular\n        return b.currentEnrollments - a.currentEnrollments;\n    }\n  });\n\n  const categories = [\n    { icon: Piano, name: \"Piano\", key: \"piano\", count: courses.filter(c => c.category === \"piano\").length, color: \"text-blue-500\", bgColor: \"bg-blue-500/10\" },\n    { icon: Guitar, name: \"Guitar\", key: \"guitar\", count: courses.filter(c => c.category === \"guitar\").length, color: \"text-green-500\", bgColor: \"bg-green-500/10\" },\n    { icon: Music4, name: \"Violin\", key: \"violin\", count: courses.filter(c => c.category === \"violin\").length, color: \"text-purple-500\", bgColor: \"bg-purple-500/10\" },\n    { icon: Drum, name: \"Drums\", key: \"drums\", count: courses.filter(c => c.category === \"drums\").length, color: \"text-red-500\", bgColor: \"bg-red-500/10\" },\n    { icon: Mic, name: \"Vocals\", key: \"vocals\", count: courses.filter(c => c.category === \"vocals\").length, color: \"text-yellow-500\", bgColor: \"bg-yellow-500/10\" },\n    { icon: Music, name: \"Theory\", key: \"theory\", count: courses.filter(c => c.category === \"theory\").length, color: \"text-indigo-500\", bgColor: \"bg-indigo-500/10\" }\n  ];\n\n  const featuredCourses = sortedCourses.filter(course => course.averageRating >= 4.5).slice(0, 4);\n  const popularCourses = sortedCourses.slice(0, 8);\n  const beginnerCourses = sortedCourses.filter(course => course.level === \"beginner\");\n\n  if (coursesLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        \n        {/* Hero Section */}\n        <div className=\"relative bg-gradient-hero overflow-hidden\">\n          <div className=\"absolute inset-0 bg-black/20\"></div>\n          <div className=\"relative container mx-auto px-4 py-20 text-center\">\n            <div className=\"max-w-4xl mx-auto\">\n              <Badge className=\"mb-6 bg-white/20 text-white border-white/30\">\n                <Award className=\"mr-2 h-4 w-4\" />\n                Loading Courses...\n              </Badge>\n              <h1 className=\"text-5xl md:text-7xl font-bold mb-6 text-white\">\n                Learn Music\n                <span className=\"block text-transparent bg-clip-text bg-gradient-to-r from-yellow-300 to-red-300\">\n                  Your Way\n                </span>\n              </h1>\n              <p className=\"text-xl md:text-2xl text-white/90 mb-8 max-w-3xl mx-auto leading-relaxed\">\n                Master any instrument with world-class instructors, interactive lessons, and a supportive community\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-4 py-12\">\n          <LoadingGrid>\n            <CourseCardSkeleton />\n          </LoadingGrid>\n        </div>\n        \n        <Footer />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-20\">\n          <EmptyState\n            icon={BookOpen}\n            title=\"Unable to Load Courses\"\n            description=\"We're having trouble loading courses right now. Please try again later.\"\n            actionText=\"Retry\"\n            onAction={() => window.location.reload()}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <div className=\"relative bg-gradient-hero overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/20\"></div>\n        <div className=\"relative container mx-auto px-4 py-20 text-center\">\n          <div className=\"max-w-4xl mx-auto\">\n            <Badge className=\"mb-6 bg-white/20 text-white border-white/30\">\n              <Award className=\"mr-2 h-4 w-4\" />\n              {courses.length} Expert-Led Courses\n            </Badge>\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 text-white\">\n              Learn Music\n              <span className=\"block text-transparent bg-clip-text bg-gradient-to-r from-yellow-300 to-red-300\">\n                Your Way\n              </span>\n            </h1>\n            <p className=\"text-xl md:text-2xl text-white/90 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Master any instrument with world-class instructors, interactive lessons, and a supportive community\n            </p>\n            \n            {/* Search Bar */}\n            <div className=\"max-w-2xl mx-auto\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground h-5 w-5\" />\n                <Input\n                  placeholder=\"Search courses, instructors, or instruments...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-12 pr-4 py-4 text-lg bg-white/95 backdrop-blur border-white/20 focus:bg-white\"\n                />\n              </div>\n            </div>\n\n            {/* Quick Actions for Mentors/Admins */}\n            {(hasRole(\"mentor\") || hasRole(\"admin\")) && (\n              <div className=\"mt-6\">\n                <Button\n                  size=\"lg\"\n                  onClick={() => setLocation(\"/course-creation\")}\n                  className=\"bg-primary/20 backdrop-blur border border-primary/30 hover:bg-primary/30\"\n                >\n                  <Plus className=\"mr-2 h-5 w-5\" />\n                  Create Course\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-12\">\n        {/* Categories Section */}\n        <div className=\"mb-12\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-3xl font-bold mb-4\">Explore by Instrument</h2>\n            <p className=\"text-muted-foreground text-lg\">Find your perfect musical journey</p>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            {categories.map((category) => {\n              const Icon = category.icon;\n              return (\n                <Card \n                  key={category.key}\n                  className={`cursor-pointer hover:shadow-lg transition-all duration-300 hover:scale-105 ${category.bgColor} border-0`}\n                  onClick={() => setCategoryFilter(category.key)}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <div className={`${category.color} mb-3 flex justify-center`}>\n                      <Icon className=\"h-8 w-8\" />\n                    </div>\n                    <h3 className=\"font-semibold text-foreground mb-1\">{category.name}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{category.count} courses</p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"mb-8 flex flex-col md:flex-row gap-4 items-center justify-between\">\n          <div className=\"flex flex-wrap gap-4\">\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {categories.map(cat => (\n                  <SelectItem key={cat.key} value={cat.key}>{cat.name}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={levelFilter} onValueChange={setLevelFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Level\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Levels</SelectItem>\n                <SelectItem value=\"beginner\">Beginner</SelectItem>\n                <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                <SelectItem value=\"advanced\">Advanced</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue placeholder=\"Sort by\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"popular\">Most Popular</SelectItem>\n              <SelectItem value=\"rating\">Highest Rated</SelectItem>\n              <SelectItem value=\"newest\">Newest</SelectItem>\n              <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n              <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Course Tabs */}\n        <Tabs defaultValue=\"all\" className=\"w-full\">\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-8\">\n            <div>\n              <h2 className=\"text-3xl font-bold mb-2\">Discover Courses</h2>\n              <p className=\"text-muted-foreground\">Curated collections for every learning path</p>\n            </div>\n            <TabsList className=\"grid w-full md:w-auto grid-cols-4 mt-4 md:mt-0\">\n              <TabsTrigger value=\"all\" className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-4 w-4\" />\n                All ({sortedCourses.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"featured\" className=\"flex items-center gap-2\">\n                <Star className=\"h-4 w-4\" />\n                Featured ({featuredCourses.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"popular\" className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-4 w-4\" />\n                Popular ({popularCourses.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"beginner\" className=\"flex items-center gap-2\">\n                <Target className=\"h-4 w-4\" />\n                Beginner ({beginnerCourses.length})\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          <TabsContent value=\"all\" className=\"space-y-6\">\n            {sortedCourses.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {sortedCourses.map((course) => (\n                  <CourseCard \n                    key={course.id} \n                    id={course.id}\n                    title={course.title}\n                    description={course.description}\n                    mentorName={course.mentorName || `Mentor ${course.mentorId}`}\n                    duration={course.duration}\n                    level={course.level}\n                    category={course.category}\n                    price={course.price}\n                    averageRating={course.averageRating}\n                    currentEnrollments={course.currentEnrollments}\n                    maxStudents={course.maxStudents}\n                    estimatedWeeks={course.estimatedWeeks}\n                    difficulty={course.difficulty}\n                    totalRatings={course.totalRatings}\n                    tags={course.tags}\n                    prerequisites={course.prerequisites}\n                    imageUrl={course.imageUrl}\n                    status={course.status}\n                    onEnroll={handleCourseEnroll}\n                    onViewDetails={handleCourseDetails}\n                    onManage={hasRole(\"mentor\") || hasRole(\"admin\") ? handleCourseManage : undefined}\n                  />\n                ))}\n              </div>\n            ) : (\n              <EmptyState\n                icon={Search}\n                title=\"No Courses Found\"\n                description=\"Try adjusting your search criteria or filters to find more courses.\"\n                actionText=\"Clear Filters\"\n                onAction={() => {\n                  setSearchTerm(\"\");\n                  setCategoryFilter(\"all\");\n                  setLevelFilter(\"all\");\n                }}\n              />\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"featured\" className=\"space-y-6\">\n            {featuredCourses.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {featuredCourses.map((course) => (\n                  <CourseCard \n                    key={course.id} \n                    id={course.id}\n                    title={course.title}\n                    description={course.description}\n                    mentorName={course.mentorName || `Mentor ${course.mentorId}`}\n                    duration={course.duration}\n                    level={course.level}\n                    category={course.category}\n                    price={course.price}\n                    averageRating={course.averageRating}\n                    currentEnrollments={course.currentEnrollments}\n                    maxStudents={course.maxStudents}\n                    estimatedWeeks={course.estimatedWeeks}\n                    difficulty={course.difficulty}\n                    totalRatings={course.totalRatings}\n                    tags={course.tags}\n                    prerequisites={course.prerequisites}\n                    imageUrl={course.imageUrl}\n                    status={course.status}\n                    onEnroll={handleCourseEnroll}\n                    onViewDetails={handleCourseDetails}\n                    onManage={hasRole(\"mentor\") || hasRole(\"admin\") ? handleCourseManage : undefined}\n                  />\n                ))}\n              </div>\n            ) : (\n              <EmptyState\n                icon={Star}\n                title=\"No Featured Courses Yet\"\n                description=\"We're curating amazing featured courses from our expert instructors. Check back soon!\"\n                actionText=\"View All Courses\"\n                onAction={() => {/* Switch to all tab */}}\n              />\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"popular\" className=\"space-y-6\">\n            {popularCourses.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {popularCourses.map((course) => (\n                  <CourseCard \n                    key={course.id} \n                    id={course.id}\n                    title={course.title}\n                    description={course.description}\n                    mentorName={course.mentorName || `Mentor ${course.mentorId}`}\n                    duration={course.duration}\n                    level={course.level}\n                    category={course.category}\n                    price={course.price}\n                    averageRating={course.averageRating}\n                    currentEnrollments={course.currentEnrollments}\n                    maxStudents={course.maxStudents}\n                    estimatedWeeks={course.estimatedWeeks}\n                    difficulty={course.difficulty}\n                    totalRatings={course.totalRatings}\n                    tags={course.tags}\n                    prerequisites={course.prerequisites}\n                    imageUrl={course.imageUrl}\n                    status={course.status}\n                    onEnroll={handleCourseEnroll}\n                    onViewDetails={handleCourseDetails}\n                    onManage={hasRole(\"mentor\") || hasRole(\"admin\") ? handleCourseManage : undefined}\n                  />\n                ))}\n              </div>\n            ) : (\n              <EmptyState\n                icon={TrendingUp}\n                title=\"No Popular Courses Yet\"\n                description=\"Popular courses will appear here as students start enrolling.\"\n                actionText=\"View All Courses\"\n                onAction={() => {/* Switch to all tab */}}\n              />\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"beginner\" className=\"space-y-6\">\n            {beginnerCourses.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {beginnerCourses.map((course) => (\n                  <CourseCard \n                    key={course.id} \n                    id={course.id}\n                    title={course.title}\n                    description={course.description}\n                    mentorName={course.mentorName || `Mentor ${course.mentorId}`}\n                    duration={course.duration}\n                    level={course.level}\n                    category={course.category}\n                    price={course.price}\n                    averageRating={course.averageRating}\n                    currentEnrollments={course.currentEnrollments}\n                    maxStudents={course.maxStudents}\n                    estimatedWeeks={course.estimatedWeeks}\n                    difficulty={course.difficulty}\n                    totalRatings={course.totalRatings}\n                    tags={course.tags}\n                    prerequisites={course.prerequisites}\n                    imageUrl={course.imageUrl}\n                    status={course.status}\n                    onEnroll={handleCourseEnroll}\n                    onViewDetails={handleCourseDetails}\n                    onManage={hasRole(\"mentor\") || hasRole(\"admin\") ? handleCourseManage : undefined}\n                  />\n                ))}\n              </div>\n            ) : (\n              <EmptyState\n                icon={Target}\n                title=\"No Beginner Courses Yet\"\n                description=\"Beginner-friendly courses will appear here as they become available.\"\n                actionText=\"View All Courses\"\n                onAction={() => {/* Switch to all tab */}}\n              />\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n\n      <AuthDialog \n        open={authDialogOpen} \n        onOpenChange={setAuthDialogOpen}\n      />\n    </div>\n  );\n};\n\nexport default Courses;","size_bytes":22794},"client/src/pages/GetStarted.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { \n  GraduationCap, \n  Users, \n  BookOpen, \n  Award, \n  Clock, \n  DollarSign,\n  Star,\n  Zap,\n  UserPlus,\n  LogIn,\n  ChevronRight,\n  Music,\n  Heart,\n  TrendingUp\n} from \"lucide-react\";\n\nconst GetStarted = () => {\n  const [selectedPath, setSelectedPath] = useState<string | null>(null);\n\n  const userPaths = [\n    {\n      id: \"student\",\n      title: \"I Want to Learn Music\",\n      subtitle: \"Start as a Student\",\n      description: \"Learn instruments, master techniques, and grow your musical skills with expert guidance\",\n      features: [\n        \"Access to 1000+ courses\",\n        \"Learn from expert mentors\",\n        \"Interactive practice tools\",\n        \"Progress tracking\",\n        \"Community support\",\n        \"Flexible learning schedule\"\n      ],\n      icon: GraduationCap,\n      color: \"bg-blue-500\",\n      gradient: \"from-blue-500 to-purple-600\",\n      stats: {\n        students: \"50,000+\",\n        courses: \"1,000+\",\n        satisfaction: \"98%\"\n      }\n    },\n    {\n      id: \"mentor\",\n      title: \"I Want to Teach Music\",\n      subtitle: \"Start as a Mentor\",\n      description: \"Share your musical expertise, build your teaching career, and inspire the next generation of musicians\",\n      features: [\n        \"Create and sell courses\",\n        \"Build your student base\",\n        \"Flexible teaching schedule\",\n        \"Earn from your expertise\",\n        \"Teaching tools & resources\",\n        \"Mentor community support\"\n      ],\n      icon: Users,\n      color: \"bg-green-500\", \n      gradient: \"from-green-500 to-teal-600\",\n      stats: {\n        mentors: \"500+\",\n        earnings: \"$2,000+\",\n        rating: \"4.9★\"\n      }\n    }\n  ];\n\n  const whyChoose = {\n    student: [\n      {\n        icon: BookOpen,\n        title: \"Expert-Led Courses\",\n        description: \"Learn from professional musicians and certified instructors\"\n      },\n      {\n        icon: Clock,\n        title: \"Flexible Schedule\",\n        description: \"Study at your own pace with 24/7 access to content\"\n      },\n      {\n        icon: Award,\n        title: \"Proven Results\",\n        description: \"Join thousands of students who've achieved their musical goals\"\n      },\n      {\n        icon: Heart,\n        title: \"Supportive Community\",\n        description: \"Connect with fellow learners and get encouragement\"\n      }\n    ],\n    mentor: [\n      {\n        icon: DollarSign,\n        title: \"Earn Income\",\n        description: \"Generate revenue from your musical expertise and passion\"\n      },\n      {\n        icon: Users,\n        title: \"Build Following\",\n        description: \"Develop a loyal student base and grow your reputation\"\n      },\n      {\n        icon: TrendingUp,\n        title: \"Career Growth\",\n        description: \"Expand your teaching career with professional tools\"\n      },\n      {\n        icon: Star,\n        title: \"Make Impact\",\n        description: \"Inspire and shape the next generation of musicians\"\n      }\n    ]\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"relative bg-gradient-hero overflow-hidden\">\n        <div className=\"absolute inset-0 bg-black/20\"></div>\n        <div className=\"relative container mx-auto px-4 py-20 text-center\">\n          <div className=\"max-w-4xl mx-auto\">\n            <Badge className=\"mb-6 bg-white/20 text-white border-white/30\">\n              <Zap className=\"mr-2 h-4 w-4\" />\n              Join HarmonyLearn Community\n            </Badge>\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 text-white\">\n              Choose Your\n              <span className=\"block bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent\">\n                Musical Path\n              </span>\n            </h1>\n            <p className=\"text-xl text-white/90 max-w-2xl mx-auto mb-8\">\n              Whether you want to learn music or teach it, we have the perfect platform for your journey.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container mx-auto px-4\">\n        {/* Path Selection - Main Choice */}\n        <section className=\"py-20\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold mb-4\">How do you want to get started?</h2>\n            <p className=\"text-xl text-muted-foreground\">Choose your role to personalize your experience</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n            {userPaths.map((path) => (\n              <Card\n                key={path.id}\n                className={`cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-musical overflow-hidden ${\n                  selectedPath === path.id \n                    ? 'ring-2 ring-primary bg-primary/5' \n                    : 'hover:border-primary/50'\n                }`}\n                onClick={() => setSelectedPath(path.id)}\n              >\n                <div className={`h-2 bg-gradient-to-r ${path.gradient}`}></div>\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className={`${path.color} p-3 rounded-lg mr-4`}>\n                      <path.icon className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-2xl\">{path.title}</CardTitle>\n                      <CardDescription className=\"text-lg\">{path.subtitle}</CardDescription>\n                    </div>\n                  </div>\n                  <p className=\"text-muted-foreground text-base\">{path.description}</p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3 mb-6\">\n                    {path.features.map((feature, index) => (\n                      <div key={index} className=\"flex items-center text-sm\">\n                        <div className=\"w-2 h-2 bg-primary rounded-full mr-3\"></div>\n                        {feature}\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-3 gap-4 pt-4 border-t\">\n                    {Object.entries(path.stats).map(([key, value]) => (\n                      <div key={key} className=\"text-center\">\n                        <div className=\"font-bold text-lg text-primary\">{value}</div>\n                        <div className=\"text-xs text-muted-foreground capitalize\">{key}</div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Authentication CTAs */}\n          {selectedPath && (\n            <div className=\"text-center mt-12 animate-slide-up\">\n              <div className=\"bg-muted/30 rounded-xl p-8 max-w-md mx-auto\">\n                <h3 className=\"text-2xl font-bold mb-4\">\n                  Ready to start as a {selectedPath === 'student' ? 'Student' : 'Mentor'}?\n                </h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  {selectedPath === 'student' \n                    ? 'Create your account and begin your musical learning journey'\n                    : 'Join our community of expert music teachers and start earning'\n                  }\n                </p>\n                \n                <div className=\"space-y-3\">\n                  <Button size=\"lg\" className=\"w-full\" asChild>\n                     <Link to={selectedPath === 'student' ? '/student-signup' : '/mentor-signup'}>\n                      <UserPlus className=\"mr-2 h-5 w-5\" />\n                      Create Account\n                    </Link>\n                  </Button>\n                  \n                  <div className=\"flex items-center\">\n                    <div className=\"flex-1 border-t border-border\"></div>\n                    <span className=\"px-3 text-sm text-muted-foreground\">or</span>\n                    <div className=\"flex-1 border-t border-border\"></div>\n                  </div>\n                  \n                  <Button variant=\"outline\" size=\"lg\" className=\"w-full\" asChild>\n                    <Link to={selectedPath === 'student' ? '/student-signin' : '/mentor-signin'}>\n                      <LogIn className=\"mr-2 h-5 w-5\" />\n                      Sign In\n                    </Link>\n                  </Button>\n                </div>\n                \n                <p className=\"text-xs text-muted-foreground mt-4\">\n                  Free to get started • No credit card required\n                </p>\n              </div>\n            </div>\n          )}\n        </section>\n\n        {/* Why Choose Section - Dynamic based on selection */}\n        {selectedPath && (\n          <section className=\"py-20 bg-muted/30 -mx-4 px-4\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-4xl font-bold mb-4\">\n                Why Choose HarmonyLearn {selectedPath === 'student' ? 'for Learning' : 'for Teaching'}?\n              </h2>\n              <p className=\"text-xl text-muted-foreground\">\n                {selectedPath === 'student' \n                  ? 'Everything you need to master music'\n                  : 'All the tools you need to build your teaching business'\n                }\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              {whyChoose[selectedPath as keyof typeof whyChoose].map((benefit, index) => (\n                <div key={index} className=\"text-center group\">\n                  <div className=\"p-4 bg-primary/10 rounded-full w-fit mx-auto mb-4 group-hover:bg-primary/20 transition-colors duration-300\">\n                    <benefit.icon className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">{benefit.title}</h3>\n                  <p className=\"text-muted-foreground\">{benefit.description}</p>\n                </div>\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Final CTA */}\n        <section className=\"py-20\">\n          <Card className=\"p-12 text-center bg-gradient-hero\">\n            <div className=\"max-w-3xl mx-auto text-white\">\n              <h2 className=\"text-4xl font-bold mb-4\">\n                {selectedPath === 'student' ? 'Start Learning Today' : \n                 selectedPath === 'mentor' ? 'Start Teaching Today' : \n                 'Ready to Join HarmonyLearn?'}\n              </h2>\n              <p className=\"text-xl opacity-90 mb-8\">\n                {selectedPath === 'student' \n                  ? 'Join over 50,000 students who are mastering music with our expert instructors.'\n                  : selectedPath === 'mentor'\n                  ? 'Join over 500 expert mentors who are building successful teaching careers.'\n                  : 'Choose your path and start your musical journey today.'\n                }\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button variant=\"secondary\" size=\"lg\" className=\"bg-white text-primary hover:bg-white/90\" asChild>\n                  <Link to={selectedPath === 'student' ? '/student-signup' : selectedPath === 'mentor' ? '/mentor-signup' : '/student-signup'}>\n                    <UserPlus className=\"mr-2 h-5 w-5\" />\n                    Get Started Free\n                  </Link>\n                </Button>\n                <Button variant=\"outline\" size=\"lg\" className=\"border-white text-white hover:bg-white/10\" asChild>\n                  <Link to={selectedPath === 'student' ? '/courses' : '/mentors'}>\n                    <ChevronRight className=\"mr-2 h-5 w-5\" />\n                    {selectedPath === 'student' ? 'Browse Courses' : 'See Mentors'}\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default GetStarted;","size_bytes":12369},"client/src/pages/Index.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Hero } from \"@/components/Hero\";\nimport { CourseCategories } from \"@/components/CourseCategories\";\nimport { FeaturesGrid } from \"@/components/FeaturesGrid\";\nimport { MentorSection } from \"@/components/MentorSection\";\nimport { StatsSection } from \"@/components/StatsSection\";\nimport { TestimonialSection } from \"@/components/TestimonialSection\";\nimport { CTASection } from \"@/components/CTASection\";\nimport { AboutInfo } from \"@/components/AboutInfo\";\nimport { Footer } from \"@/components/Footer\";\nconst Index = () => {\n  return (\n    <div className=\"min-h-screen bg-background relative\">\n      <Header />\n      <Hero />\n      <CourseCategories />\n      <FeaturesGrid />\n      <MentorSection />\n      <StatsSection />\n      <TestimonialSection />\n      <AboutInfo />\n      <CTASection />\n      <Footer />\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":901},"client/src/pages/LearningPaths.tsx":{"content":"import { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Users, Star, CheckCircle, PlayCircle, BookOpen, Trophy, ArrowRight, GraduationCap } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { LearningPath } from \"@shared/schema\";\nimport { EmptyState } from \"@/components/EmptyState\";\nimport { CourseCardSkeleton, LoadingGrid } from \"@/components/LoadingSkeletons\";\n\nconst getDifficultyColor = (difficulty: string) => {\n  switch (difficulty) {\n    case \"beginner\":\n      return \"bg-green-100 text-green-800 border-green-200\";\n    case \"intermediate\":\n      return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n    case \"advanced\":\n      return \"bg-red-100 text-red-800 border-red-200\";\n    case \"all-levels\":\n      return \"bg-blue-100 text-blue-800 border-blue-200\";\n    default:\n      return \"bg-gray-100 text-gray-800 border-gray-200\";\n  }\n};\n\nexport const LearningPaths = () => {\n  const { data: learningPaths, isLoading, error } = useQuery<LearningPath[]>({\n    queryKey: ['/api/learning-paths'],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        \n        {/* Hero Section */}\n        <section className=\"py-20 bg-gradient-hero\">\n          <div className=\"container mx-auto px-4 text-center\">\n            <h1 className=\"text-5xl font-bold text-white mb-6\">\n              Structured Learning Paths\n            </h1>\n            <p className=\"text-xl text-white/90 max-w-3xl mx-auto mb-8\">\n              Follow carefully designed learning journeys created by expert musicians. \n              Each path takes you from where you are to where you want to be, step by step.\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"shadow-warm\" disabled>\n                <PlayCircle className=\"mr-2 h-5 w-5\" />\n                Start Learning Today\n              </Button>\n              <Button size=\"lg\" variant=\"outline\" className=\"bg-white/10 border-white/30 text-white hover:bg-white/20\" disabled>\n                View All Paths\n              </Button>\n            </div>\n          </div>\n        </section>\n\n        {/* Loading Content */}\n        <section className=\"py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-3xl font-bold mb-4\">Choose Your Musical Journey</h2>\n              <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n                Loading available learning paths...\n              </p>\n            </div>\n            <LoadingGrid count={6}>\n              <CourseCardSkeleton />\n            </LoadingGrid>\n          </div>\n        </section>\n        \n        <Footer />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-20 text-center\">\n          <div className=\"text-lg text-red-600\">Error loading learning paths. Please try again later.</div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-hero\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h1 className=\"text-5xl font-bold text-white mb-6\">\n            Structured Learning Paths\n          </h1>\n          <p className=\"text-xl text-white/90 max-w-3xl mx-auto mb-8\">\n            Follow carefully designed learning journeys created by expert musicians. \n            Each path takes you from where you are to where you want to be, step by step.\n          </p>\n          <div className=\"flex justify-center gap-4\">\n            <Button size=\"lg\" variant=\"secondary\" className=\"shadow-warm\">\n              <PlayCircle className=\"mr-2 h-5 w-5\" />\n              Start Learning Today\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"bg-white/10 border-white/30 text-white hover:bg-white/20\">\n              View All Paths\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Learning Paths Grid */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Choose Your Musical Journey</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Each learning path is designed to take you from beginner to proficient, \n              with clear milestones and expert guidance along the way.\n            </p>\n          </div>\n\n          {/* Learning Paths Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {learningPaths && learningPaths.length > 0 ? (\n              learningPaths.map((path) => (\n                <Card key={path.id} className=\"group hover:shadow-musical transition-all duration-300 hover:-translate-y-1\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <Badge className={getDifficultyColor(path.difficulty)}>\n                        {path.difficulty}\n                      </Badge>\n                      <div className=\"flex items-center gap-1\">\n                        <Star className=\"h-4 w-4 fill-secondary text-secondary\" />\n                        <span className=\"text-sm font-medium\">{path.rating || '0'}</span>\n                      </div>\n                    </div>\n                    \n                    <CardTitle className=\"text-xl group-hover:text-primary transition-colors\">\n                      {path.title}\n                    </CardTitle>\n                    \n                    <CardDescription className=\"text-base\">\n                      {path.description}\n                    </CardDescription>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    {/* Course Stats */}\n                    <div className=\"grid grid-cols-3 gap-4 mb-4 text-sm\">\n                      <div className=\"flex items-center gap-1\">\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{path.duration || 'TBD'}</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{path.lessonsCount || 0} lessons</span>\n                      </div>\n                      <div className=\"flex items-center gap-1\">\n                        <Users className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{path.enrolledCount || 0} students</span>\n                      </div>\n                    </div>\n\n                    {/* Skills */}\n                    {path.skills && path.skills.length > 0 && (\n                      <div className=\"mb-4\">\n                        <p className=\"text-sm font-medium mb-2\">You'll learn:</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {path.skills.map((skill, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                              {skill}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Instructor ID (would need to fetch instructor name separately) */}\n                    <div className=\"text-sm text-muted-foreground mb-4\">\n                      Instructor ID: <span className=\"font-medium text-foreground\">{path.instructorId || 'TBD'}</span>\n                    </div>\n\n                    {/* Price and CTA */}\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"text-lg font-bold text-primary\">\n                        {path.price || 'Free'}\n                      </div>\n                      <Button className=\"shadow-musical\" asChild>\n                        <Link to={`/learning-paths/${path.id}`}>\n                          Start Path\n                          <ArrowRight className=\"ml-2 h-4 w-4\" />\n                        </Link>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <div className=\"col-span-full\">\n                <EmptyState\n                  icon={GraduationCap}\n                  title=\"No Learning Paths Yet\"\n                  description=\"We're working on creating amazing structured learning paths for you. Check back soon for comprehensive guided learning journeys!\"\n                  actionText=\"Browse Courses\"\n                  onAction={() => window.location.href = '/courses'}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-16 bg-muted/30\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Why Choose Structured Learning?</h2>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"text-center border-none bg-transparent\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-16 h-16 bg-gradient-hero rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <CheckCircle className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Clear Progression</h3>\n                <p className=\"text-muted-foreground\">\n                  Follow a proven path with clear milestones and achievements to track your progress.\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"text-center border-none bg-transparent\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-16 h-16 bg-gradient-warm rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Trophy className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Expert Guidance</h3>\n                <p className=\"text-muted-foreground\">\n                  Learn from professional musicians who have designed each step for maximum effectiveness.\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"text-center border-none bg-transparent\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-16 h-16 bg-gradient-cool rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Users className=\"h-8 w-8 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Community Support</h3>\n                <p className=\"text-muted-foreground\">\n                  Connect with fellow learners on the same path and share your musical journey.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n};","size_bytes":11648},"client/src/pages/LiveClass.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { RoleSelector } from \"@/components/classroom/RoleSelector\";\nimport { LiveClassInterface } from \"@/components/classroom/LiveClassInterface\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\nconst LiveClass = () => {\n  const { id } = useParams();\n  const [currentRole, setCurrentRole] = useState<Role>(\"student\");\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-6\">\n        {/* Role Selector */}\n        <div className=\"mb-6\">\n          <RoleSelector currentRole={currentRole} onRoleChange={setCurrentRole} />\n        </div>\n\n        {/* Live Class Interface */}\n        <LiveClassInterface role={currentRole} classId={id || \"\"} />\n      </main>\n\n      <Footer />\n    </div>\n  );\n};\n\nexport default LiveClass;","size_bytes":960},"client/src/pages/LiveSessions.tsx":{"content":"import { useState } from \"react\";\nimport { Calendar, Clock, Users, Star, Video, MessageCircle, Heart, Mic, MicOff, VideoOff, Settings, Share, PhoneCall, Play } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { LiveSession } from \"@shared/schema\";\nimport { EmptyState } from \"@/components/EmptyState\";\nimport { LiveSessionSkeleton, LoadingGrid } from \"@/components/LoadingSkeletons\";\n\n// Interactive Demo Component for Live Session Interface\nconst LiveSessionDemo = ({ session, isLive = false }: { session: any, isLive?: boolean }) => {\n  const [isJoined, setIsJoined] = useState(false);\n  const [isMuted, setIsMuted] = useState(true);\n  const [isVideoOff, setIsVideoOff] = useState(true);\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([\n    { user: \"Sarah M.\", message: \"Great technique on that chord progression!\", time: \"2:34\" },\n    { user: \"Marcus J.\", message: \"Thanks! Let's try it together now\", time: \"2:35\", isMentor: true },\n    { user: \"Alex R.\", message: \"Can you show that fingering again?\", time: \"2:36\" },\n  ]);\n  const { toast } = useToast();\n\n  const handleJoinSession = () => {\n    setIsJoined(true);\n    toast({\n      title: \"Joined Session!\",\n      description: `Welcome to ${session.title}`,\n    });\n  };\n\n  const handleSendMessage = () => {\n    if (chatMessage.trim()) {\n      setChatMessages([...chatMessages, {\n        user: \"You\",\n        message: chatMessage,\n        time: new Date().toLocaleTimeString().slice(0, 5)\n      }]);\n      setChatMessage(\"\");\n    }\n  };\n\n  const formatDuration = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours > 0) {\n      return `${hours}h ${mins}m`;\n    }\n    return `${mins}m`;\n  };\n\n  const formatDate = (dateString: string | Date) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n    const sessionDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n    if (sessionDate.getTime() === today.getTime()) {\n      return \"Today\";\n    } else if (sessionDate.getTime() === tomorrow.getTime()) {\n      return \"Tomorrow\";\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n\n  const formatTime = (dateString: string | Date) => {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' });\n  };\n\n  if (!isJoined) {\n    return (\n      <Card className={`p-6 ${isLive ? 'border-red-200 bg-red-50/50 dark:bg-red-950/20' : ''} hover:shadow-glow transition-all duration-300`}>\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex-1\">\n            <h3 className=\"text-lg font-semibold mb-2\">{session.title}</h3>\n            <p className=\"text-muted-foreground mb-2\">Mentor ID: {session.mentorId}</p>\n            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n              {isLive ? (\n                <>\n                  <div className=\"flex items-center space-x-1\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>Live now</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>{formatDuration(session.duration || 60)}</span>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <div className=\"flex items-center space-x-1\">\n                    <Calendar className=\"h-4 w-4\" />\n                    <span>{formatDate(session.scheduledAt)}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>{formatTime(session.scheduledAt)}</span>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n          {isLive && (\n            <Badge className=\"bg-red-100 text-red-800 border-red-200 animate-pulse\">\n              LIVE\n            </Badge>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <Users className=\"h-4 w-4\" />\n            <span>{session.maxParticipants} max participants</span>\n          </div>\n          <Button onClick={handleJoinSession} className={isLive ? \"bg-red-600 hover:bg-red-700\" : \"\"}>\n            <Video className=\"mr-2 h-4 w-4\" />\n            {isLive ? \"Join Live\" : \"Join Session\"}\n          </Button>\n        </div>\n        {session.description && (\n          <div className=\"mt-4 text-sm text-muted-foreground\">\n            {session.description}\n          </div>\n        )}\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n      {/* Main Video Area */}\n      <div className=\"lg:col-span-3\">\n        <Card className=\"p-0 overflow-hidden\">\n          <div className=\"relative bg-gray-900 aspect-video flex items-center justify-center\">\n            <div className=\"text-center text-white\">\n              <Video className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium\">Live Session in Progress</p>\n              <p className=\"text-sm opacity-75\">Session Demo - Interactive Features Available</p>\n            </div>\n          </div>\n          \n          {/* Video Controls */}\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800\">\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant={isMuted ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setIsMuted(!isMuted)}\n              >\n                {isMuted ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n              </Button>\n              <Button\n                variant={isVideoOff ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setIsVideoOff(!isVideoOff)}\n              >\n                {isVideoOff ? <VideoOff className=\"h-4 w-4\" /> : <Video className=\"h-4 w-4\" />}\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Share className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"destructive\" size=\"sm\">\n                <PhoneCall className=\"h-4 w-4\" />\n                Leave\n              </Button>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Chat Panel */}\n      <div className=\"lg:col-span-1\">\n        <Card className=\"h-96 flex flex-col\">\n          <div className=\"p-4 border-b\">\n            <h3 className=\"font-medium\">Live Chat</h3>\n          </div>\n          \n          <div className=\"flex-1 overflow-y-auto p-4 space-y-3\">\n            {chatMessages.map((msg, index) => (\n              <div key={index} className=\"text-sm\">\n                <span className={`font-medium ${msg.isMentor ? 'text-primary' : 'text-foreground'}`}>\n                  {msg.user}\n                </span>\n                <span className=\"text-muted-foreground text-xs ml-2\">{msg.time}</span>\n                <p className=\"text-muted-foreground mt-1\">{msg.message}</p>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"p-4 border-t\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"Type a message...\"\n                value={chatMessage}\n                onChange={(e) => setChatMessage(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n              />\n              <Button size=\"sm\" onClick={handleSendMessage}>\n                Send\n              </Button>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport const LiveSessions = () => {\n  const [selectedSession, setSelectedSession] = useState<LiveSession | null>(null);\n  \n  const { data: allSessions, isLoading, error } = useQuery<LiveSession[]>({\n    queryKey: ['/api/live-sessions'],\n  });\n\n  const { data: liveSessions } = useQuery<LiveSession[]>({\n    queryKey: ['/api/live-sessions', { status: 'live' }],\n  });\n\n  const { data: upcomingSessions } = useQuery<LiveSession[]>({\n    queryKey: ['/api/live-sessions', { status: 'scheduled' }],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        \n        {/* Hero Section */}\n        <section className=\"py-20 bg-gradient-hero\">\n          <div className=\"container mx-auto px-4 text-center\">\n            <h1 className=\"text-5xl font-bold text-white mb-6\">\n              Live Music Sessions\n            </h1>\n            <p className=\"text-xl text-white/90 max-w-3xl mx-auto mb-8\">\n              Join live interactive sessions with expert musicians. Learn in real-time, \n              ask questions, and connect with fellow music enthusiasts.\n            </p>\n            <div className=\"flex justify-center gap-4\">\n              <Button size=\"lg\" variant=\"secondary\" className=\"shadow-warm\" disabled>\n                <Video className=\"mr-2 h-5 w-5\" />\n                Join Live Session\n              </Button>\n              <Button size=\"lg\" variant=\"outline\" className=\"bg-white/10 border-white/30 text-white hover:bg-white/20\" disabled>\n                Schedule Session\n              </Button>\n            </div>\n          </div>\n        </section>\n\n        <div className=\"container mx-auto px-4 py-16\">\n          {/* Loading Content */}\n          <section className=\"mb-16\">\n            <h2 className=\"text-3xl font-bold mb-8\">Loading Sessions...</h2>\n            <LoadingGrid count={4} className=\"grid md:grid-cols-2 gap-6\">\n              <LiveSessionSkeleton />\n            </LoadingGrid>\n          </section>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-20\">\n          <EmptyState\n            icon={Video}\n            title=\"Unable to Load Sessions\"\n            description=\"We're having trouble loading live sessions. Please check your connection and try again.\"\n            actionText=\"Retry\"\n            onAction={() => window.location.reload()}\n          />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"py-20 bg-gradient-hero\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h1 className=\"text-5xl font-bold text-white mb-6\">\n            Live Music Sessions\n          </h1>\n          <p className=\"text-xl text-white/90 max-w-3xl mx-auto mb-8\">\n            Join live interactive sessions with expert musicians. Learn in real-time, \n            ask questions, and connect with fellow music enthusiasts.\n          </p>\n          <div className=\"flex justify-center gap-4\">\n            <Button size=\"lg\" variant=\"secondary\" className=\"shadow-warm\">\n              <Video className=\"mr-2 h-5 w-5\" />\n              Join Live Session\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"bg-white/10 border-white/30 text-white hover:bg-white/20\">\n              Schedule Session\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Live Now Section */}\n        {liveSessions && liveSessions.length > 0 && (\n          <section className=\"mb-16\">\n            <div className=\"flex items-center gap-2 mb-8\">\n              <div className=\"w-3 h-3 bg-red-500 rounded-full animate-pulse\"></div>\n              <h2 className=\"text-3xl font-bold\">Live Now</h2>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {liveSessions.map((session) => (\n                <LiveSessionDemo \n                  key={session.id} \n                  session={session} \n                  isLive={true}\n                />\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Upcoming Sessions */}\n        <section className=\"mb-16\">\n          <h2 className=\"text-3xl font-bold mb-8\">Upcoming Sessions</h2>\n          \n          {upcomingSessions && upcomingSessions.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {upcomingSessions.map((session) => (\n                <LiveSessionDemo \n                  key={session.id} \n                  session={session} \n                  isLive={false}\n                />\n              ))}\n            </div>\n          ) : (\n            <EmptyState\n              icon={Play}\n              title=\"No Upcoming Sessions\"\n              description=\"There are no live sessions scheduled at the moment. Our expert musicians regularly host interactive sessions covering various instruments and techniques. Check back soon or explore our on-demand courses while you wait.\"\n              actionText=\"Explore Courses\"\n              onAction={() => window.location.href = '/courses'}\n            />\n          )}\n        </section>\n\n        {/* Session Demo */}\n        <section className=\"mb-16\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">Experience Interactive Learning</h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              See what our live sessions look like. Click \"Join Live\" on any session above to try our interactive demo.\n            </p>\n          </div>\n        </section>\n\n        {/* How It Works */}\n        <section className=\"py-16 bg-muted/30 rounded-2xl\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">How Live Sessions Work</h2>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8 px-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-hero rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Calendar className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Book Your Spot</h3>\n              <p className=\"text-muted-foreground\">\n                Browse upcoming sessions and reserve your place. Sessions are limited to ensure quality interaction.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-warm rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Video className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Join & Learn</h3>\n              <p className=\"text-muted-foreground\">\n                Connect via video call, see the instructor's hands, and follow along with provided materials.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-cool rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageCircle className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Interact & Ask</h3>\n              <p className=\"text-muted-foreground\">\n                Use chat, raise your hand, and get real-time feedback from instructors and peers.\n              </p>\n            </div>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n};","size_bytes":16554},"client/src/pages/MasterDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Users, Settings, Calendar, BookOpen, UserCheck, Clock, AlertCircle, Crown, Music, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { AcademyCreationForm } from \"@/components/classroom/AcademyCreationForm\";\nimport ResignationRequestManager from \"@/components/ResignationRequestManager\";\nimport { type Classroom, type StaffRequest } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\n\nexport default function MasterDashboard() {\n  const [user, setUser] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n\n  useEffect(() => {\n    const currentUser = getCurrentUser();\n    setUser(currentUser);\n  }, []);\n\n  // Fetch master's classrooms\n  const { data: classrooms, isLoading: classroomsLoading } = useQuery({\n    queryKey: [\"/api/classrooms\", { master: user?.id }],\n    queryFn: () => apiRequest(`/api/classrooms?master=${user?.id}`),\n    enabled: !!user?.id,\n  });\n\n  // Fetch pending staff requests for master's classrooms\n  const { data: staffRequests, isLoading: staffRequestsLoading } = useQuery({\n    queryKey: [\"/api/staff-requests\", \"pending\"],\n    queryFn: () => apiRequest(\"/api/staff-requests?status=pending\"),\n    enabled: !!user?.id,\n  });\n\n  // Approve staff request mutation\n  const approveStaffRequestMutation = useMutation({\n    mutationFn: (requestId: number) => \n      apiRequest(`/api/staff-requests/${requestId}/status`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ \n          status: \"approved\",\n          reviewedBy: user?.id \n        }),\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Request Approved\",\n        description: \"The staff request has been approved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reject staff request mutation\n  const rejectStaffRequestMutation = useMutation({\n    mutationFn: ({ requestId, notes }: { requestId: number; notes?: string }) => \n      apiRequest(`/api/staff-requests/${requestId}/status`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ \n          status: \"rejected\",\n          reviewedBy: user?.id,\n          adminNotes: notes \n        }),\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Request Rejected\",\n        description: \"The staff request has been rejected.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff-requests\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reject request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAcademyCreated = () => {\n    setCreateDialogOpen(false);\n    queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\"] });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <Crown className=\"h-8 w-8 text-yellow-500\" />\n            <h1 className=\"text-3xl font-bold\">Master Dashboard</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Manage your music academies and review staff applications\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"academies\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 max-w-lg\">\n            <TabsTrigger value=\"academies\">My Academies</TabsTrigger>\n            <TabsTrigger value=\"staff\">Staff Requests</TabsTrigger>\n            <TabsTrigger value=\"resignations\">Resignations</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          {/* My Academies Tab */}\n          <TabsContent value=\"academies\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-semibold\">Your Music Academy</h2>\n                <p className=\"text-muted-foreground\">Create and manage your personalized music academy</p>\n              </div>\n              {(!classrooms || classrooms.length === 0) && (\n                <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button className=\"flex items-center gap-2\">\n                      <Plus className=\"h-4 w-4\" />\n                      Create Academy\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle>Create Your Music Academy</DialogTitle>\n                      <DialogDescription>\n                        Set up your personalized music academy with custom branding and curriculum\n                      </DialogDescription>\n                    </DialogHeader>\n                    <AcademyCreationForm onSuccess={handleAcademyCreated} />\n                  </DialogContent>\n                </Dialog>\n              )}\n            </div>\n\n            {/* Academies Grid */}\n            {classroomsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[...Array(3)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2 mb-4\"></div>\n                      <div className=\"h-20 bg-muted rounded mb-4\"></div>\n                      <div className=\"h-8 bg-muted rounded\"></div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : classrooms && classrooms.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {classrooms.map((classroom: Classroom) => (\n                  <Card key={classroom.id} className=\"group hover:shadow-lg transition-all duration-200\">\n                    <CardContent className=\"p-0\">\n                      {/* Hero Section */}\n                      <div \n                        className=\"h-32 relative rounded-t-lg\"\n                        style={{\n                          backgroundColor: classroom.primaryColor || '#3B82F6',\n                          backgroundImage: classroom.heroImage ? `url(${classroom.heroImage})` : \n                            'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n                          backgroundSize: 'cover',\n                          backgroundPosition: 'center',\n                        }}\n                      >\n                        <div className=\"absolute inset-0 bg-black/20 rounded-t-lg\" />\n                        <div className=\"absolute bottom-3 left-3 right-3\">\n                          <h3 className=\"font-semibold text-white text-lg\">\n                            {classroom.academyName}\n                          </h3>\n                          <p className=\"text-xs text-white/90 truncate\">\n                            {classroom.description}\n                          </p>\n                        </div>\n                      </div>\n\n                      {/* Content */}\n                      <div className=\"p-4\">\n                        {/* Instruments */}\n                        <div className=\"flex flex-wrap gap-1 mb-3\">\n                          {classroom.instruments?.slice(0, 3).map((instrument: string, index: number) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {instrument}\n                            </Badge>\n                          ))}\n                          {classroom.instruments && classroom.instruments.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{classroom.instruments.length - 3} more\n                            </Badge>\n                          )}\n                        </div>\n\n                        {/* Stats */}\n                        <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-4\">\n                          <div className=\"flex items-center gap-1\">\n                            <Users className=\"h-3 w-3\" />\n                            <span>Max {classroom.maxStudents}</span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-3 w-3\" />\n                            <span>Est. {classroom.createdAt ? new Date(classroom.createdAt).getFullYear() : 'N/A'}</span>\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"flex gap-2\">\n                          <Button asChild size=\"sm\" className=\"flex-1\">\n                            <Link href={`/classroom-management/${classroom.id}`}>\n                              <Crown className=\"h-3 w-3 mr-1\" />\n                              Manage\n                            </Link>\n                          </Button>\n                          <Button asChild variant=\"outline\" size=\"sm\">\n                            <Link href={`/academy/${classroom.customSlug}`}>\n                              <ExternalLink className=\"h-3 w-3 mr-1\" />\n                              View\n                            </Link>\n                          </Button>\n                          <Button asChild variant=\"outline\" size=\"sm\">\n                            <Link href={`/academy/${classroom.customSlug}?edit=true`}>\n                              <Settings className=\"h-3 w-3 mr-1\" />\n                              Edit\n                            </Link>\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <Music className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Academy Yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Create your music academy to start building your teaching community\n                  </p>\n                  <Button onClick={() => setCreateDialogOpen(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Create Your Academy\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Staff Requests Tab */}\n          <TabsContent value=\"staff\" className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-semibold mb-2\">Staff Applications</h2>\n              <p className=\"text-muted-foreground\">Review and manage mentor applications to join your academies</p>\n            </div>\n\n            {staffRequestsLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"h-4 bg-muted rounded w-1/4 mb-2\"></div>\n                      <div className=\"h-3 bg-muted rounded w-3/4 mb-4\"></div>\n                      <div className=\"h-16 bg-muted rounded mb-4\"></div>\n                      <div className=\"flex gap-2\">\n                        <div className=\"h-8 bg-muted rounded w-20\"></div>\n                        <div className=\"h-8 bg-muted rounded w-20\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : staffRequests && staffRequests.length > 0 ? (\n              <div className=\"space-y-4\">\n                {staffRequests.map((request: StaffRequest) => (\n                  <Card key={request.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div>\n                          <h3 className=\"font-semibold\">Staff Application</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Application submitted {request.createdAt ? new Date(request.createdAt).toLocaleDateString() : 'N/A'}\n                          </p>\n                        </div>\n                        <Badge variant={\n                          request.status === 'pending' ? 'default' :\n                          request.status === 'approved' ? 'default' : 'destructive'\n                        }>\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {request.status}\n                        </Badge>\n                      </div>\n                      \n                      {request.message && (\n                        <div className=\"mb-4\">\n                          <h4 className=\"font-medium mb-2\">Message:</h4>\n                          <p className=\"text-sm text-muted-foreground bg-muted p-3 rounded\">\n                            {request.message}\n                          </p>\n                        </div>\n                      )}\n                      \n                      {request.status === 'pending' && (\n                        <div className=\"flex gap-2\">\n                          <Button \n                            size=\"sm\"\n                            onClick={() => approveStaffRequestMutation.mutate(request.id)}\n                            disabled={approveStaffRequestMutation.isPending}\n                          >\n                            <UserCheck className=\"h-3 w-3 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => rejectStaffRequestMutation.mutate({ requestId: request.id })}\n                            disabled={rejectStaffRequestMutation.isPending}\n                          >\n                            <AlertCircle className=\"h-3 w-3 mr-1\" />\n                            Reject\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <UserCheck className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Staff Applications</h3>\n                  <p className=\"text-muted-foreground\">\n                    No mentors have applied to join your academies yet\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Resignations Tab */}\n          <TabsContent value=\"resignations\" className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-semibold mb-2\">Staff Resignations</h2>\n              <p className=\"text-muted-foreground\">Review and manage staff resignation requests from your academies</p>\n            </div>\n\n            {classrooms && classrooms.length > 0 ? (\n              <div className=\"space-y-6\">\n                {classrooms.map((classroom: Classroom) => (\n                  <ResignationRequestManager \n                    key={classroom.id}\n                    classroomId={classroom.id}\n                    masterId={user?.id}\n                  />\n                ))}\n              </div>\n            ) : (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <AlertCircle className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Academies</h3>\n                  <p className=\"text-muted-foreground\">\n                    Create an academy first to manage staff resignations\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-semibold mb-2\">Academy Analytics</h2>\n              <p className=\"text-muted-foreground\">Track performance and growth of your academies</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Academy Status</p>\n                      <p className=\"text-2xl font-bold\">{classrooms?.length > 0 ? 'Active' : 'Not Created'}</p>\n                    </div>\n                    <BookOpen className=\"h-8 w-8 text-blue-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Pending Applications</p>\n                      <p className=\"text-2xl font-bold\">{staffRequests?.filter((r: StaffRequest) => r.status === 'pending').length || 0}</p>\n                    </div>\n                    <Clock className=\"h-8 w-8 text-yellow-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Total Staff</p>\n                      <p className=\"text-2xl font-bold\">{staffRequests?.filter((r: StaffRequest) => r.status === 'approved').length || 0}</p>\n                    </div>\n                    <Users className=\"h-8 w-8 text-green-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">This Month</p>\n                      <p className=\"text-2xl font-bold\">0</p>\n                    </div>\n                    <Calendar className=\"h-8 w-8 text-purple-500\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Coming Soon</CardTitle>\n                <CardDescription>\n                  Detailed analytics and insights will be available soon\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  We're working on comprehensive analytics to help you track student progress, engagement, and academy growth.\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":20535},"client/src/pages/MentorDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Calendar, \n  Users, \n  BookOpen, \n  Star, \n  DollarSign, \n  TrendingUp, \n  Clock, \n  MessageCircle,\n  Plus,\n  Edit,\n  Video,\n  FileText,\n  Award,\n  Settings,\n  User,\n  Crown,\n  Music,\n  GraduationCap,\n  BarChart3\n} from \"lucide-react\";\nimport { getCurrentUser, isMaster } from \"@/lib/auth\";\nimport MasterRoleRequestForm from \"@/components/mentor/MasterRoleRequestForm\";\nimport MasterRoleRequestStatus from \"@/components/mentor/MasterRoleRequestStatus\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { MentorNavigation } from \"@/components/mentor/MentorNavigation\";\n\ninterface DashboardStats {\n  totalStudents: number;\n  totalCourses: number;\n  totalEarnings: number;\n  avgRating: number;\n  upcomingSessions: number;\n  completedSessions: number;\n}\n\ninterface Course {\n  id: number;\n  title: string;\n  students: number;\n  rating: number;\n  earnings: number;\n  status: 'active' | 'draft' | 'completed';\n}\n\ninterface Session {\n  id: number;\n  title: string;\n  student: string;\n  date: string;\n  time: string;\n  type: 'one-on-one' | 'group' | 'webinar';\n  status: 'scheduled' | 'completed' | 'cancelled';\n}\n\nconst MentorDashboard = () => {\n  const currentUser = getCurrentUser();\n  const [showMasterRequestDialog, setShowMasterRequestDialog] = useState(false);\n\n  // Fetch mentor profile data\n  const { data: mentorProfile } = useQuery({\n    queryKey: ['/api/mentor-profiles', currentUser?.id],\n    enabled: !!currentUser?.id\n  });\n\n  // Fetch mentor courses\n  const { data: mentorCourses = [] } = useQuery<any[]>({\n    queryKey: ['/api/courses', { mentor: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Fetch mentor live sessions\n  const { data: mentorSessions = [] } = useQuery<any[]>({\n    queryKey: ['/api/live-sessions', { mentor: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Calculate real stats from API data\n  const stats: DashboardStats = {\n    totalStudents: Array.isArray(mentorCourses) ? mentorCourses.reduce((total: number, course: any) => total + (course.enrolledCount || 0), 0) : 0,\n    totalCourses: Array.isArray(mentorCourses) ? mentorCourses.length : 0,\n    totalEarnings: Array.isArray(mentorCourses) ? mentorCourses.reduce((total: number, course: any) => total + (parseFloat(course.price) || 0), 0) : 0,\n    avgRating: (mentorProfile as any)?.averageRating || 0,\n    upcomingSessions: Array.isArray(mentorSessions) ? mentorSessions.filter((session: any) => session.status === 'scheduled').length : 0,\n    completedSessions: Array.isArray(mentorSessions) ? mentorSessions.filter((session: any) => session.status === 'completed').length : 0\n  };\n\n  // Use real courses data from API\n  const courses: Course[] = Array.isArray(mentorCourses) ? mentorCourses.map((course: any) => ({\n    id: course.id,\n    title: course.title,\n    students: course.enrolledCount || 0,\n    rating: course.averageRating || 0,\n    earnings: parseFloat(course.price) || 0,\n    status: course.isActive ? 'active' : 'draft'\n  })) : [];\n\n  const [upcomingSessions] = useState<Session[]>([\n    {\n      id: 1,\n      title: \"Guitar Technique Review\",\n      student: \"Sarah Johnson\",\n      date: \"Today\",\n      time: \"2:00 PM\",\n      type: 'one-on-one',\n      status: 'scheduled'\n    },\n    {\n      id: 2,\n      title: \"Chord Progression Workshop\",\n      student: \"Group Session\",\n      date: \"Tomorrow\",\n      time: \"4:00 PM\",\n      type: 'group',\n      status: 'scheduled'\n    },\n    {\n      id: 3,\n      title: \"Music Theory Q&A\",\n      student: \"Mike Chen\",\n      date: \"Oct 15\",\n      time: \"3:30 PM\",\n      type: 'one-on-one',\n      status: 'scheduled'\n    }\n  ]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'draft': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'completed': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'one-on-one': return <Users className=\"h-4 w-4\" />;\n      case 'group': return <Users className=\"h-4 w-4\" />;\n      case 'webinar': return <Video className=\"h-4 w-4\" />;\n      default: return <Calendar className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <MentorNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n        {/* Hero Section */}\n        <section className=\"py-12 bg-gradient-hero\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex items-center gap-6\">\n              <Avatar className=\"h-20 w-20\">\n                <AvatarImage src=\"\" />\n                <AvatarFallback className=\"text-2xl font-bold\">\n                  {currentUser?.firstName?.[0]}{currentUser?.lastName?.[0]}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"flex-1\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <h1 className=\"text-3xl font-bold text-white\">{currentUser?.firstName} {currentUser?.lastName}</h1>\n                  <Badge className=\"bg-green-500 text-white\">\n                    <Award className=\"h-3 w-3 mr-1\" />\n                    Verified Mentor\n                  </Badge>\n                </div>\n                <p className=\"text-white/90 text-lg mb-1\">{(mentorProfile as any)?.specialization || 'Music Instructor'}</p>\n                <p className=\"text-white/70\">{(mentorProfile as any)?.experience || 'Professional Experience'} • {currentUser?.email}</p>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button variant=\"secondary\" className=\"gap-2\">\n                  <Settings className=\"h-4 w-4\" />\n                  Profile Settings\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"gap-2 bg-white/10 border-white/30 text-white hover:bg-white/20\"\n                  onClick={() => {\n                    localStorage.removeItem(\"userRole\");\n                    localStorage.removeItem(\"mentorId\");\n                    window.location.href = \"/\";\n                  }}\n                >\n                  Logout\n                </Button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        <div className=\"container mx-auto px-4 py-8\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Students</p>\n                  <p className=\"text-2xl font-bold\">{stats.totalStudents}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Courses</p>\n                  <p className=\"text-2xl font-bold\">{stats.totalCourses}</p>\n                </div>\n                <BookOpen className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Earnings</p>\n                  <p className=\"text-2xl font-bold\">${stats.totalEarnings.toLocaleString()}</p>\n                </div>\n                <DollarSign className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Average Rating</p>\n                  <div className=\"flex items-center gap-1\">\n                    <p className=\"text-2xl font-bold\">{stats.avgRating}</p>\n                    <Star className=\"h-5 w-5 fill-yellow-500 text-yellow-500\" />\n                  </div>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Navigation Cards */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Button variant=\"outline\" className=\"h-24 flex flex-col gap-2\" asChild>\n            <Link href=\"/mentor-requests\">\n              <MessageCircle className=\"h-8 w-8 text-blue-500\" />\n              <span className=\"font-semibold\">Mentorship Requests</span>\n              <span className=\"text-xs text-muted-foreground\">Review & respond</span>\n            </Link>\n          </Button>\n          <Button variant=\"outline\" className=\"h-24 flex flex-col gap-2\" asChild>\n            <Link href=\"/mentor-students\">\n              <User className=\"h-8 w-8 text-green-500\" />\n              <span className=\"font-semibold\">My Students</span>\n              <span className=\"text-xs text-muted-foreground\">Manage mentorships</span>\n            </Link>\n          </Button>\n          <Button variant=\"outline\" className=\"h-24 flex flex-col gap-2\" asChild>\n            <Link href=\"/mentor-interactions\">\n              <MessageCircle className=\"h-8 w-8 text-purple-500\" />\n              <span className=\"font-semibold\">Messages</span>\n              <span className=\"text-xs text-muted-foreground\">Chat with students</span>\n            </Link>\n          </Button>\n          <Button variant=\"outline\" className=\"h-24 flex flex-col gap-2\">\n            <Calendar className=\"h-8 w-8 text-orange-500\" />\n            <span className=\"font-semibold\">Schedule</span>\n            <span className=\"text-xs text-muted-foreground\">Manage sessions</span> \n          </Button>\n          {isMaster() && (\n            <Button variant=\"outline\" className=\"h-24 flex flex-col gap-2\" asChild>\n              <Link href=\"/classroom/manage\">\n                <Users className=\"h-8 w-8 text-indigo-500\" />\n                <span className=\"font-semibold\">My Classrooms</span>\n                <span className=\"text-xs text-muted-foreground\">Create & manage</span>\n              </Link>\n            </Button>\n          )}\n        </div>\n\n        {/* Master Role Section - Only show for non-masters */}\n        {!isMaster() && (\n          <>\n            <div className=\"mb-8\">\n              <MasterRoleRequestStatus />\n            </div>\n\n            {/* Master Role Actions */}\n            <div className=\"mb-8\">\n              <Card className=\"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/20 dark:to-orange-950/20 border-yellow-200 dark:border-yellow-800\">\n                <CardHeader>\n                  <div className=\"flex items-center gap-3\">\n                    <Crown className=\"w-6 h-6 text-yellow-600\" />\n                    <div>\n                      <CardTitle className=\"text-yellow-800 dark:text-yellow-300\">Become a Master</CardTitle>\n                      <CardDescription className=\"text-yellow-700 dark:text-yellow-400\">\n                        Unlock classroom creation and advanced teaching features\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-1\">\n                      <p className=\"text-sm text-yellow-800 dark:text-yellow-300\">Master mentors can:</p>\n                      <ul className=\"text-sm text-yellow-700 dark:text-yellow-400 space-y-1\">\n                        <li>• Create and manage classrooms</li>\n                        <li>• Access advanced teaching tools</li>\n                        <li>• Enhanced mentor status</li>\n                      </ul>\n                    </div>\n                    <Dialog open={showMasterRequestDialog} onOpenChange={setShowMasterRequestDialog}>\n                      <DialogTrigger asChild>\n                        <Button className=\"bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600\">\n                          <Crown className=\"w-4 h-4 mr-2\" />\n                          Apply for Master Role\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle>Master Role Application</DialogTitle>\n                        </DialogHeader>\n                        <MasterRoleRequestForm onSuccess={() => setShowMasterRequestDialog(false)} />\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </>\n        )}\n\n        {/* Master Dashboard Quick Link */}\n        {isMaster() && (\n          <div className=\"mb-8\">\n            <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 border-blue-200 dark:border-blue-800\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                      <Crown className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-blue-800 dark:text-blue-300\">Master Dashboard</h3>\n                      <p className=\"text-blue-700 dark:text-blue-400\">Manage your classrooms and advanced features</p>\n                    </div>\n                  </div>\n                  <Button asChild className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\">\n                    <Link href=\"/master-dashboard\">\n                      <Crown className=\"w-4 h-4 mr-2\" />\n                      Open Master Dashboard\n                    </Link>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className={`grid w-full ${isMaster() ? 'grid-cols-6' : 'grid-cols-5'}`}>\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"courses\">Courses</TabsTrigger>\n            <TabsTrigger value=\"sessions\">Sessions</TabsTrigger>\n            <TabsTrigger value=\"students\">Students</TabsTrigger>\n            {isMaster() && <TabsTrigger value=\"classrooms\">Classrooms</TabsTrigger>}\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid lg:grid-cols-2 gap-6\">\n              {/* Quick Actions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                  <CardDescription>Manage your teaching activities</CardDescription>\n                </CardHeader>\n                <CardContent className={`grid ${isMaster() ? 'grid-cols-3' : 'grid-cols-2'} gap-4`}>\n                  <Button className=\"h-20 flex flex-col gap-2\">\n                    <Plus className=\"h-6 w-6\" />\n                    Create Course\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n                    <Calendar className=\"h-6 w-6\" />\n                    Schedule Session\n                  </Button>\n                  {isMaster() && (\n                    <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" asChild>\n                      <Link href=\"/classroom/manage\">\n                        <Users className=\"h-6 w-6\" />\n                        Create Classroom\n                      </Link>\n                    </Button>\n                  )}\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" asChild>\n                    <Link href=\"/mentor-interactions\">\n                      <MessageCircle className=\"h-6 w-6\" />\n                      Message Students\n                    </Link>\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n                    <FileText className=\"h-6 w-6\" />\n                    View Reports\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Recent Activity */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Activity</CardTitle>\n                  <CardDescription>Your latest teaching activities</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">New student enrolled in Guitar Fundamentals</p>\n                      <p className=\"text-xs text-muted-foreground\">2 hours ago</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">Session completed with Sarah Johnson</p>\n                      <p className=\"text-xs text-muted-foreground\">4 hours ago</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                    <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm font-medium\">New 5-star review received</p>\n                      <p className=\"text-xs text-muted-foreground\">1 day ago</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Upcoming Sessions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Upcoming Sessions</CardTitle>\n                <CardDescription>Your next scheduled teaching sessions</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {upcomingSessions.map((session) => (\n                    <div key={session.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center gap-4\">\n                        <div className=\"flex items-center justify-center w-10 h-10 bg-primary/10 rounded-full\">\n                          {getTypeIcon(session.type)}\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium\">{session.title}</h4>\n                          <p className=\"text-sm text-muted-foreground\">with {session.student}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium\">{session.date}</p>\n                        <p className=\"text-sm text-muted-foreground\">{session.time}</p>\n                      </div>\n                      <Button size=\"sm\">Join Session</Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"courses\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">My Courses</h2>\n                <p className=\"text-muted-foreground\">Manage and track your course performance</p>\n              </div>\n              <Button className=\"gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Create New Course\n              </Button>\n            </div>\n\n            <div className=\"grid gap-6\">\n              {courses.map((course) => (\n                <Card key={course.id}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold\">{course.title}</h3>\n                        <div className=\"flex items-center gap-4 mt-2\">\n                          <span className=\"text-sm text-muted-foreground\">\n                            {course.students} students\n                          </span>\n                          <div className=\"flex items-center gap-1\">\n                            <Star className=\"h-4 w-4 fill-yellow-500 text-yellow-500\" />\n                            <span className=\"text-sm font-medium\">{course.rating}</span>\n                          </div>\n                          <span className=\"text-sm font-medium text-green-600\">\n                            ${course.earnings.toLocaleString()} earned\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className={getStatusColor(course.status)}>\n                          {course.status}\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <Progress value={(course.students / 50) * 100} className=\"mb-2\" />\n                    <p className=\"text-xs text-muted-foreground\">\n                      {course.students}/50 enrollment capacity\n                    </p>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"sessions\">\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Session Management</h2>\n                <p className=\"text-muted-foreground\">Schedule and manage your teaching sessions</p>\n              </div>\n              \n              <div className=\"grid lg:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Session Stats</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span>Completed Sessions</span>\n                      <span className=\"font-bold\">{stats.completedSessions}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Upcoming Sessions</span>\n                      <span className=\"font-bold\">{stats.upcomingSessions}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Average Session Rating</span>\n                      <span className=\"font-bold\">{stats.avgRating}/5</span>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader>\n                    <CardTitle>Quick Schedule</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <Button className=\"w-full gap-2\">\n                      <Plus className=\"h-4 w-4\" />\n                      Schedule New Session\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full gap-2\">\n                      <Calendar className=\"h-4 w-4\" />\n                      View Calendar\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full gap-2\">\n                      <Clock className=\"h-4 w-4\" />\n                      Set Availability\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"students\">\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Student Management</h2>\n                <p className=\"text-muted-foreground\">Track and communicate with your students</p>\n              </div>\n              \n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Student Management</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Advanced student tracking and communication features will be available here.\n                  </p>\n                  <Button variant=\"outline\">Coming Soon</Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {isMaster() && (\n            <TabsContent value=\"classrooms\">\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n                      <Crown className=\"h-6 w-6 text-yellow-600\" />\n                      Classroom Management\n                    </h2>\n                    <p className=\"text-muted-foreground\">Create and manage your learning classrooms</p>\n                  </div>\n                  <Button asChild className=\"gap-2\">\n                    <Link href=\"/classroom/manage\">\n                      <Plus className=\"h-4 w-4\" />\n                      Create New Classroom\n                    </Link>\n                  </Button>\n                </div>\n                \n                <div className=\"grid gap-6\">\n                  {/* Classroom Stats */}\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <Card>\n                      <CardContent className=\"p-4 text-center\">\n                        <Users className=\"h-8 w-8 mx-auto mb-2 text-blue-500\" />\n                        <p className=\"text-2xl font-bold\">3</p>\n                        <p className=\"text-sm text-muted-foreground\">Active Classrooms</p>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className=\"p-4 text-center\">\n                        <GraduationCap className=\"h-8 w-8 mx-auto mb-2 text-green-500\" />\n                        <p className=\"text-2xl font-bold\">47</p>\n                        <p className=\"text-sm text-muted-foreground\">Total Students</p>\n                      </CardContent>\n                    </Card>\n                    <Card>\n                      <CardContent className=\"p-4 text-center\">\n                        <TrendingUp className=\"h-8 w-8 mx-auto mb-2 text-purple-500\" />\n                        <p className=\"text-2xl font-bold\">89%</p>\n                        <p className=\"text-sm text-muted-foreground\">Completion Rate</p>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Recent Classrooms */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Your Classrooms</CardTitle>\n                      <CardDescription>Manage your active learning environments</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 rounded-lg border\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n                            <Music className=\"h-5 w-5 text-white\" />\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold\">Advanced Piano Techniques</h4>\n                            <p className=\"text-sm text-muted-foreground\">15 students • Active</p>\n                          </div>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\">Manage</Button>\n                      </div>\n                      <div className=\"flex items-center justify-between p-4 rounded-lg border\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center\">\n                            <Music className=\"h-5 w-5 text-white\" />\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold\">Guitar Fundamentals</h4>\n                            <p className=\"text-sm text-muted-foreground\">22 students • Active</p>\n                          </div>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\">Manage</Button>\n                      </div>\n                      <div className=\"flex items-center justify-between p-4 rounded-lg border\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center\">\n                            <Music className=\"h-5 w-5 text-white\" />\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold\">Music Theory Basics</h4>\n                            <p className=\"text-sm text-muted-foreground\">10 students • Active</p>\n                          </div>\n                        </div>\n                        <Button variant=\"outline\" size=\"sm\">Manage</Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Classroom Tools */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Master Tools</CardTitle>\n                      <CardDescription>Advanced classroom management features</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"grid md:grid-cols-2 gap-4\">\n                      <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n                        <BarChart3 className=\"h-6 w-6\" />\n                        <span>Classroom Analytics</span>\n                      </Button>\n                      <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n                        <Settings className=\"h-6 w-6\" />\n                        <span>Bulk Management</span>\n                      </Button>\n                      <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n                        <FileText className=\"h-6 w-6\" />\n                        <span>Progress Reports</span>\n                      </Button>\n                      <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\">\n                        <Calendar className=\"h-6 w-6\" />\n                        <span>Schedule Overview</span>\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n          )}\n\n          <TabsContent value=\"analytics\">\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Performance Analytics</h2>\n                <p className=\"text-muted-foreground\">Track your teaching performance and earnings</p>\n              </div>\n              \n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <TrendingUp className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Analytics Dashboard</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Detailed analytics and reporting features will be available here.\n                  </p>\n                  <Button variant=\"outline\">Coming Soon</Button>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n        </div>\n\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default MentorDashboard;","size_bytes":34147},"client/src/pages/MentorInteractions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { MessageCircle, Calendar, Clock, User, Send, Check, CheckCheck, Video, Phone } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { MentorNavigation } from \"@/components/mentor/MentorNavigation\";\nimport { getCurrentUser } from \"@/lib/auth\";\n\n// API function\nconst apiRequest = async (url: string, options: { method: string; body?: any }) => {\n  const response = await fetch(url, {\n    method: options.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: options.body ? JSON.stringify(options.body) : undefined,\n  });\n  \n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\ninterface MentorshipRequest {\n  id: number;\n  studentId: number;\n  mentorId: number;\n  message: string;\n  status: string;\n  acceptedAt: string | null;\n  rejectedAt: string | null;\n  mentorResponse: string | null;\n  createdAt: string;\n}\n\ninterface MentorConversation {\n  id: number;\n  mentorshipRequestId: number;\n  senderId: number;\n  message: string;\n  messageType: string;\n  attachmentUrl: string | null;\n  isRead: boolean;\n  readAt: string | null;\n  createdAt: string;\n}\n\ninterface MentorshipSession {\n  id: number;\n  mentorshipRequestId: number;\n  title: string;\n  description: string | null;\n  scheduledAt: string;\n  duration: number;\n  status: string;\n  meetingLink: string | null;\n  recordingUrl: string | null;\n  mentorNotes: string | null;\n  studentNotes: string | null;\n  sessionFeedback: string | null;\n  rating: number | null;\n  createdAt: string;\n}\n\nexport const MentorInteractions = () => {\n  const currentUser = getCurrentUser();\n  \n  const [selectedRequest, setSelectedRequest] = useState<MentorshipRequest | null>(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!currentUser) {\n      window.location.href = '/student-signin';\n      return;\n    }\n  }, [currentUser]);\n\n  // Fetch mentorship requests for the current user\n  const { data: requests = [], isLoading: requestsLoading } = useQuery<MentorshipRequest[]>({\n    queryKey: ['/api/mentorship-requests', { \n      [currentUser?.role === 'mentor' ? 'mentorId' : 'studentId']: currentUser?.id \n    }],\n    enabled: !!currentUser,\n  });\n\n  // Fetch conversations for the selected request\n  const { data: conversations = [], isLoading: conversationsLoading } = useQuery<MentorConversation[]>({\n    queryKey: ['/api/mentorship-requests', selectedRequest?.id, 'conversations'],\n    enabled: !!selectedRequest,\n  });\n\n  // Fetch sessions for the selected request\n  const { data: sessions = [], isLoading: sessionsLoading } = useQuery<MentorshipSession[]>({\n    queryKey: ['/api/mentorship-requests', selectedRequest?.id, 'sessions'],\n    enabled: !!selectedRequest,\n  });\n\n  // Mutation for sending messages\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { message: string }) => {\n      if (!selectedRequest) throw new Error(\"No request selected\");\n      return apiRequest(`/api/mentorship-requests/${selectedRequest.id}/conversations`, {\n        method: \"POST\",\n        body: {\n          senderId: currentUser.id,\n          message: data.message,\n          messageType: 'text',\n        },\n      });\n    },\n    onSuccess: () => {\n      setNewMessage(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/mentorship-requests', selectedRequest?.id, 'conversations'] \n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation for accepting/rejecting requests (mentor only)\n  const updateRequestMutation = useMutation({\n    mutationFn: async (data: { status: string; mentorResponse?: string }) => {\n      if (!selectedRequest) throw new Error(\"No request selected\");\n      return apiRequest(`/api/mentorship-requests/${selectedRequest.id}/status`, {\n        method: \"PATCH\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Request Updated\",\n        description: \"The mentorship request has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/mentorship-requests'] });\n      queryClient.invalidateQueries({ \n        queryKey: ['/api/mentorship-requests', selectedRequest?.id, 'conversations'] \n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim() || !selectedRequest) return;\n    sendMessageMutation.mutate({ message: newMessage });\n  };\n\n  const handleAcceptRequest = () => {\n    updateRequestMutation.mutate({ \n      status: 'accepted',\n      mentorResponse: 'I would be happy to mentor you! Let\\'s start our journey together.'\n    });\n  };\n\n  const handleRejectRequest = () => {\n    updateRequestMutation.mutate({ \n      status: 'rejected',\n      mentorResponse: 'Thank you for your interest. Unfortunately, I\\'m not available for new students at this time.'\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'accepted': return 'bg-green-500';\n      case 'rejected': return 'bg-red-500';\n      case 'pending': return 'bg-yellow-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  if (!currentUser) return null;\n\n  if (requestsLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8\">Mentor Interactions</h1>\n        <div className=\"text-center py-8\">Loading your interactions...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <MentorNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0 p-6\">\n        <h1 className=\"text-3xl font-bold mb-8\">\n          {currentUser.role === 'mentor' ? 'Student Requests' : 'My Mentorship Requests'}\n        </h1>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Requests List */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                {currentUser.role === 'mentor' ? 'Incoming Requests' : 'Your Requests'}\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <ScrollArea className=\"h-[600px]\">\n                {requests.length === 0 ? (\n                  <div className=\"p-4 text-center text-muted-foreground\">\n                    {currentUser.role === 'mentor' \n                      ? 'No student requests yet' \n                      : 'No mentorship requests sent yet'\n                    }\n                  </div>\n                ) : (\n                  requests.map((request) => (\n                    <div\n                      key={request.id}\n                      className={`p-4 border-b cursor-pointer hover:bg-muted/50 transition-colors ${\n                        selectedRequest?.id === request.id ? 'bg-muted' : ''\n                      }`}\n                      onClick={() => setSelectedRequest(request)}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h3 className=\"font-semibold\">\n                          {currentUser.role === 'mentor' ? 'Student Request' : 'Mentor Request'}\n                        </h3>\n                        <Badge className={getStatusColor(request.status)}>\n                          {request.status}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">\n                        {request.message}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {request.createdAt ? format(new Date(request.createdAt), 'MMM d, yyyy') : 'Recently'}\n                      </p>\n                    </div>\n                  ))\n                )}\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Chat and Sessions */}\n        <div className=\"lg:col-span-2\">\n          {selectedRequest ? (\n            <Tabs defaultValue=\"chat\" className=\"h-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"chat\" className=\"flex items-center gap-2\">\n                  <MessageCircle className=\"h-4 w-4\" />\n                  Chat\n                </TabsTrigger>\n                <TabsTrigger value=\"sessions\" className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  Sessions\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"chat\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <MessageCircle className=\"h-5 w-5\" />\n                        Conversation\n                      </CardTitle>\n                      {currentUser.role === 'mentor' && selectedRequest.status === 'pending' && (\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"sm\"\n                            onClick={handleAcceptRequest}\n                            disabled={updateRequestMutation.isPending}\n                          >\n                            Accept\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={handleRejectRequest}\n                            disabled={updateRequestMutation.isPending}\n                          >\n                            Decline\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    {/* Initial Request Message */}\n                    <div className=\"mb-4 p-3 bg-muted rounded-lg\">\n                      <div className=\"text-sm font-medium mb-1\">Initial Request:</div>\n                      <div className=\"text-sm\">{selectedRequest.message}</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        {selectedRequest.createdAt ? format(new Date(selectedRequest.createdAt), 'MMM d, yyyy HH:mm') : 'Recently'}\n                      </div>\n                    </div>\n\n                    {/* Mentor Response */}\n                    {selectedRequest.mentorResponse && (\n                      <div className=\"mb-4 p-3 bg-primary/10 rounded-lg\">\n                        <div className=\"text-sm font-medium mb-1\">Mentor Response:</div>\n                        <div className=\"text-sm\">{selectedRequest.mentorResponse}</div>\n                      </div>\n                    )}\n\n                    {/* Conversations */}\n                    <ScrollArea className=\"h-[300px] mb-4\">\n                      {conversations.length === 0 ? (\n                        <div className=\"text-center text-muted-foreground py-8\">\n                          {selectedRequest.status === 'accepted' \n                            ? 'Start the conversation!'\n                            : 'Waiting for mentor response...'\n                          }\n                        </div>\n                      ) : (\n                        <div className=\"space-y-2\">\n                          {conversations.map((conversation) => (\n                            <div\n                              key={conversation.id}\n                              className={`flex ${\n                                conversation.senderId === currentUser.id ? 'justify-end' : 'justify-start'\n                              }`}\n                            >\n                              <div\n                                className={`max-w-[70%] p-3 rounded-lg ${\n                                  conversation.senderId === currentUser.id\n                                    ? 'bg-primary text-primary-foreground'\n                                    : 'bg-muted'\n                                }`}\n                              >\n                                <div className=\"text-sm\">{conversation.message}</div>\n                                <div className=\"flex items-center gap-1 mt-1 justify-end\">\n                                  <span className=\"text-xs opacity-70\">\n                                    {conversation.createdAt ? format(new Date(conversation.createdAt), 'HH:mm') : 'Now'}\n                                  </span>\n                                  {conversation.senderId === currentUser.id && (\n                                    conversation.isRead ? (\n                                      <CheckCheck className=\"h-3 w-3 opacity-70\" />\n                                    ) : (\n                                      <Check className=\"h-3 w-3 opacity-70\" />\n                                    )\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </ScrollArea>\n\n                    {/* Message Input */}\n                    {selectedRequest.status === 'accepted' && (\n                      <div className=\"flex gap-2\">\n                        <Input\n                          placeholder=\"Type your message...\"\n                          value={newMessage}\n                          onChange={(e) => setNewMessage(e.target.value)}\n                          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                        />\n                        <Button\n                          onClick={handleSendMessage}\n                          disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                        >\n                          <Send className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"sessions\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-5 w-5\" />\n                      Mentorship Sessions\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {sessions.length === 0 ? (\n                      <div className=\"text-center text-muted-foreground py-8\">\n                        No sessions scheduled yet\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {sessions.map((session) => (\n                          <div key={session.id} className=\"p-4 border rounded-lg\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h3 className=\"font-semibold\">{session.title}</h3>\n                              <Badge variant=\"outline\">{session.status}</Badge>\n                            </div>\n                            {session.description && (\n                              <p className=\"text-sm text-muted-foreground mb-2\">\n                                {session.description}\n                              </p>\n                            )}\n                            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                              <div className=\"flex items-center gap-1\">\n                                <Clock className=\"h-4 w-4\" />\n                                {session.scheduledAt ? format(new Date(session.scheduledAt), 'MMM d, yyyy HH:mm') : 'TBD'}\n                              </div>\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar className=\"h-4 w-4\" />\n                                {session.duration} minutes\n                              </div>\n                            </div>\n                            {session.meetingLink && (\n                              <div className=\"mt-2\">\n                                <Button size=\"sm\" variant=\"outline\" asChild>\n                                  <a href={session.meetingLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                                    <Video className=\"h-4 w-4 mr-2\" />\n                                    Join Meeting\n                                  </a>\n                                </Button>\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          ) : (\n            <Card>\n              <CardContent className=\"py-8\">\n                <div className=\"text-center text-muted-foreground\">\n                  Select a mentorship request to view the conversation and sessions\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MentorInteractions;","size_bytes":18636},"client/src/pages/MentorPage.tsx":{"content":"import { Star, MapPin, Clock, Video, Calendar, MessageCircle, Award, TrendingUp, UserCheck } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { MentorProfile } from \"@shared/schema\";\nimport { EmptyState } from \"@/components/EmptyState\";\nimport { MentorCardSkeleton, LoadingGrid } from \"@/components/LoadingSkeletons\";\n\nexport const MentorPage = () => {\n  // Check if user is a mentor and redirect to dashboard\n  const currentUser = localStorage.getItem(\"currentUser\");\n  const user = currentUser ? JSON.parse(currentUser) : null;\n  if (user?.role === \"mentor\") {\n    window.location.href = \"/mentor-dashboard\";\n    return null;\n  }\n\n  const { data: mentors, isLoading, error } = useQuery<MentorProfile[]>({\n    queryKey: ['/api/mentors'],\n  });\n\n  // Function to handle mentor interaction (contact, book session, etc.)\n  const handleMentorInteraction = (action: string) => {\n    window.location.href = '/get-started';\n  };\n\n  const mentorStats = [\n    { label: \"Total Students Taught\", value: \"12,547\", icon: TrendingUp },\n    { label: \"Live Sessions This Month\", value: \"89\", icon: Video },\n    { label: \"Average Rating\", value: \"4.8\", icon: Star },\n    { label: \"Success Rate\", value: \"96%\", icon: Award }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        \n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Header Section */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n              Learn from Expert Musicians\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Loading our amazing community of professional musicians and teachers...\n            </p>\n          </div>\n\n          {/* Stats Section */}\n          <section className=\"mb-16\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              {mentorStats.map((stat, index) => {\n                const IconComponent = stat.icon;\n                return (\n                  <Card key={index} className=\"p-6 text-center\">\n                    <IconComponent className=\"h-8 w-8 mx-auto mb-3 text-primary\" />\n                    <div className=\"text-2xl font-bold text-primary mb-1\">{stat.value}</div>\n                    <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n                  </Card>\n                );\n              })}\n            </div>\n          </section>\n\n          {/* Loading Mentors */}\n          <section>\n            <div className=\"flex justify-between items-center mb-8\">\n              <h2 className=\"text-3xl font-bold\">Our Expert Mentors</h2>\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" disabled>Filter by Instrument</Button>\n                <Button variant=\"outline\" disabled>Sort by Rating</Button>\n              </div>\n            </div>\n            <LoadingGrid count={6} className=\"grid md:grid-cols-2 xl:grid-cols-3 gap-8\">\n              <MentorCardSkeleton />\n            </LoadingGrid>\n          </section>\n        </div>\n\n        <Footer />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-20 text-center\">\n          <div className=\"text-lg text-red-600\">Error loading mentors. Please try again later.</div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header Section */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n            Learn from Expert Musicians\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Connect with professional musicians and experienced teachers from around the world. \n            Get personalized guidance to accelerate your musical journey.\n          </p>\n        </div>\n\n        {/* Stats Section */}\n        <section className=\"mb-16\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {mentorStats.map((stat, index) => {\n              const IconComponent = stat.icon;\n              return (\n                <Card key={index} className=\"p-6 text-center hover:shadow-musical transition-all duration-300\">\n                  <IconComponent className=\"h-8 w-8 mx-auto mb-3 text-primary\" />\n                  <div className=\"text-2xl font-bold text-primary mb-1\">{stat.value}</div>\n                  <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n                </Card>\n              );\n            })}\n          </div>\n        </section>\n\n        {/* Welcome Banner */}\n        <div className=\"bg-gradient-to-r from-primary/10 via-secondary/10 to-primary/10 rounded-xl p-6 mb-8 border border-primary/20\">\n          <div className=\"text-center\">\n            <h3 className=\"text-2xl font-bold mb-2\">Connect with Professional Musicians</h3>\n            <p className=\"text-lg text-muted-foreground mb-4\">\n              Get personalized lessons and guidance from expert instructors. Join to unlock one-on-one mentorship.\n            </p>\n            <Button \n              onClick={() => handleMentorInteraction('join')}\n              className=\"bg-gradient-hero text-white shadow-glow hover:shadow-glow-lg transition-all\"\n            >\n              Start Learning with a Mentor\n            </Button>\n          </div>\n        </div>\n\n        {/* Mentors Grid with Overlay */}\n        <section className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-t from-background/95 via-background/20 to-transparent z-10 pointer-events-none\" />\n          <div className=\"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-background via-background/80 to-transparent z-20 pointer-events-none\" />\n          \n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-3xl font-bold\">Our Expert Mentors</h2>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => handleMentorInteraction('filter')}>Filter by Instrument</Button>\n              <Button variant=\"outline\" onClick={() => handleMentorInteraction('sort')}>Sort by Rating</Button>\n            </div>\n          </div>\n\n          {mentors && mentors.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 xl:grid-cols-3 gap-8\">\n              {mentors.map((mentor) => (\n                <Card key={mentor.id} className=\"group hover:shadow-musical transition-all duration-300 hover:-translate-y-1\">\n                  <div className=\"p-6\">\n                    {/* Mentor Header */}\n                    <div className=\"flex items-start gap-4 mb-4\">\n                      <Avatar className=\"h-16 w-16\">\n                        <AvatarFallback className=\"text-lg font-semibold\">\n                          M{mentor.id}\n                        </AvatarFallback>\n                      </Avatar>\n                      \n                      <div className=\"flex-1\">\n                        <h3 className=\"text-xl font-semibold group-hover:text-primary transition-colors\">\n                          Music Mentor #{mentor.id}\n                        </h3>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Star className=\"h-4 w-4 fill-secondary text-secondary\" />\n                          <span className=\"font-medium\">4.8</span>\n                          <span className=\"text-muted-foreground text-sm\">\n                            ({Math.floor(Math.random() * 500) + 50} students)\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Specialization & Experience */}\n                    <div className=\"mb-4\">\n                      <div className=\"flex flex-wrap gap-1 mb-2\">\n                        {mentor.specialization ? (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {mentor.specialization}\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            General Music\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Bio */}\n                    {mentor.bio && (\n                      <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                        {mentor.bio}\n                      </p>\n                    )}\n\n                    {/* Pricing & Action */}\n                    <div className=\"flex items-center justify-between pt-4 border-t\">\n                      <div className=\"text-lg font-bold text-primary\">\n                        ${mentor.hourlyRate || 50}/hour\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => handleMentorInteraction('message')}\n                        >\n                          <MessageCircle className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          className=\"shadow-musical\"\n                          onClick={() => handleMentorInteraction('book')}\n                        >\n                          <Calendar className=\"mr-2 h-4 w-4\" />\n                          Book Session\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <EmptyState\n              icon={UserCheck}\n              title=\"No Mentors Available\"\n              description=\"We're building an amazing community of expert musicians and teachers. Our mentors will offer personalized guidance, live sessions, and structured learning paths. Stay tuned as we onboard talented instructors from around the world.\"\n              actionText=\"Join as Mentor\"\n              onAction={() => window.location.href = '/mentor-signup'}\n            />\n          )}\n        </section>\n\n        {/* How It Works */}\n        <section className=\"py-16 mt-16 bg-muted/30 rounded-2xl\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4\">How Mentorship Works</h2>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8 px-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-hero rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Calendar className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Choose Your Mentor</h3>\n              <p className=\"text-muted-foreground\">\n                Browse profiles, read reviews, and select a mentor that matches your learning goals and style.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-warm rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Video className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Schedule Sessions</h3>\n              <p className=\"text-muted-foreground\">\n                Book one-on-one video sessions at times that work for both you and your mentor.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-cool rounded-full flex items-center justify-center mx-auto mb-4\">\n                <TrendingUp className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Track Progress</h3>\n              <p className=\"text-muted-foreground\">\n                Get personalized feedback, practice plans, and watch your skills improve week by week.\n              </p>\n            </div>\n          </div>\n        </section>\n      </div>\n\n      <Footer />\n    </div>\n  );\n};","size_bytes":12711},"client/src/pages/MentorRequests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Clock, \n  User, \n  MessageCircle, \n  CheckCircle, \n  XCircle, \n  Calendar,\n  Star,\n  Send\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { EmptyState } from \"@/components/EmptyState\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { MentorNavigation } from \"@/components/mentor/MentorNavigation\";\nimport { getCurrentUser } from \"@/lib/auth\";\n\nconst responseSchema = z.object({\n  response: z.string().min(10, \"Please provide a detailed response\").max(500, \"Response too long\"),\n});\n\ntype ResponseForm = z.infer<typeof responseSchema>;\n\ninterface MentorshipRequest {\n  id: number;\n  studentId: number;\n  mentorId: number;\n  message: string;\n  status: string;\n  acceptedAt: Date | null;\n  rejectedAt: Date | null;\n  mentorResponse: string | null;\n  createdAt: Date;\n  studentInfo?: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\nconst apiRequest = async (url: string, options: { method: string; body?: any }) => {\n  const response = await fetch(url, {\n    method: options.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: options.body ? JSON.stringify(options.body) : undefined,\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\nexport const MentorRequests = () => {\n  const [selectedRequest, setSelectedRequest] = useState<MentorshipRequest | null>(null);\n  const [responseDialogOpen, setResponseDialogOpen] = useState(false);\n  const [actionType, setActionType] = useState<'accept' | 'reject'>('accept');\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current mentor from localStorage\n  const currentUser = getCurrentUser();\n\n  // Fetch mentorship requests for this mentor\n  const { data: requests = [], isLoading, error } = useQuery<MentorshipRequest[]>({\n    queryKey: ['/api/mentorship-requests', { mentorId: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Form for mentor response\n  const form = useForm<ResponseForm>({\n    resolver: zodResolver(responseSchema),\n    defaultValues: {\n      response: \"\",\n    },\n  });\n\n  // Mutation for updating request status\n  const updateRequestMutation = useMutation({\n    mutationFn: async ({ requestId, status, mentorResponse }: { \n      requestId: number; \n      status: string; \n      mentorResponse?: string \n    }) => {\n      return apiRequest(`/api/mentorship-requests/${requestId}/status`, {\n        method: \"PATCH\",\n        body: { status, mentorResponse },\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Request Updated\",\n        description: `Mentorship request has been ${actionType === 'accept' ? 'accepted' : 'rejected'} successfully.`,\n      });\n      setResponseDialogOpen(false);\n      form.reset();\n      setSelectedRequest(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/mentorship-requests'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRequestAction = (request: MentorshipRequest, action: 'accept' | 'reject') => {\n    setSelectedRequest(request);\n    setActionType(action);\n    setResponseDialogOpen(true);\n    \n    // Pre-fill response for acceptance\n    if (action === 'accept') {\n      form.setValue('response', `Hi! I'm excited to work with you as your mentor. Let's schedule our first session to discuss your goals and create a learning plan.`);\n    } else {\n      form.setValue('response', '');\n    }\n  };\n\n  const onSubmitResponse = async (data: ResponseForm) => {\n    if (!selectedRequest) return;\n    \n    updateRequestMutation.mutate({\n      requestId: selectedRequest.id,\n      status: actionType === 'accept' ? 'accepted' : 'rejected',\n      mentorResponse: data.response,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"text-yellow-600\"><Clock className=\"w-3 h-3 mr-1\" />Pending</Badge>;\n      case 'accepted':\n        return <Badge variant=\"default\" className=\"bg-green-600\"><CheckCircle className=\"w-3 h-3 mr-1\" />Accepted</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\"><XCircle className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const pendingRequests = requests.filter(req => req.status === 'pending');\n  const acceptedRequests = requests.filter(req => req.status === 'accepted');\n  const rejectedRequests = requests.filter(req => req.status === 'rejected');\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Mentorship Requests</h1>\n          <p className=\"text-muted-foreground\">Loading your mentorship requests...</p>\n        </div>\n        <div className=\"space-y-4\">\n          {[1,2,3].map(i => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-20\">\n          <div className=\"text-lg text-red-600\">Error loading requests. Please try again later.</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <MentorNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0 p-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Mentorship Requests</h1>\n          <p className=\"text-muted-foreground\">\n            Manage incoming mentorship requests from students\n          </p>\n        </div>\n\n      <Tabs defaultValue=\"pending\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"pending\">\n            Pending ({pendingRequests.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"accepted\">\n            Accepted ({acceptedRequests.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"rejected\">\n            Rejected ({rejectedRequests.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pending\" className=\"space-y-4\">\n          {pendingRequests.length > 0 ? (\n            pendingRequests.map((request) => (\n              <Card key={request.id} className=\"hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"bg-gradient-hero text-white\">\n                          {request.studentInfo?.firstName?.[0] || 'S'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">\n                          {request.studentInfo?.firstName && request.studentInfo?.lastName\n                            ? `${request.studentInfo.firstName} ${request.studentInfo.lastName}`\n                            : 'Student'\n                          }\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {request.studentInfo?.email || 'No email provided'}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Requested {new Date(request.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    {getStatusBadge(request.status)}\n                  </div>\n\n                  <div className=\"mb-4\">\n                    <h4 className=\"font-medium mb-2\">Student's Message:</h4>\n                    <p className=\"text-sm text-muted-foreground bg-muted/50 p-3 rounded-lg\">\n                      {request.message}\n                    </p>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button \n                      onClick={() => handleRequestAction(request, 'accept')}\n                      className=\"flex-1\"\n                      disabled={updateRequestMutation.isPending}\n                    >\n                      <CheckCircle className=\"w-4 h-4 mr-2\" />\n                      Accept\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => handleRequestAction(request, 'reject')}\n                      className=\"flex-1\"\n                      disabled={updateRequestMutation.isPending}\n                    >\n                      <XCircle className=\"w-4 h-4 mr-2\" />\n                      Decline\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <EmptyState\n              icon={MessageCircle}\n              title=\"No Pending Requests\"\n              description=\"You don't have any pending mentorship requests at the moment.\"\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"accepted\" className=\"space-y-4\">\n          {acceptedRequests.length > 0 ? (\n            acceptedRequests.map((request) => (\n              <Card key={request.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"bg-green-600 text-white\">\n                          {request.studentInfo?.firstName?.[0] || 'S'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">\n                          {request.studentInfo?.firstName && request.studentInfo?.lastName\n                            ? `${request.studentInfo.firstName} ${request.studentInfo.lastName}`\n                            : 'Student'\n                          }\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Accepted {new Date(request.acceptedAt!).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    {getStatusBadge(request.status)}\n                  </div>\n\n                  {request.mentorResponse && (\n                    <div className=\"mb-4\">\n                      <h4 className=\"font-medium mb-2\">Your Response:</h4>\n                      <p className=\"text-sm text-muted-foreground bg-green-50 dark:bg-green-950 p-3 rounded-lg\">\n                        {request.mentorResponse}\n                      </p>\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-2\">\n                    <Button className=\"flex-1\" variant=\"outline\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Schedule Session\n                    </Button>\n                    <Button className=\"flex-1\" variant=\"outline\">\n                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                      Message Student\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <EmptyState\n              icon={CheckCircle}\n              title=\"No Accepted Requests\"\n              description=\"You haven't accepted any mentorship requests yet.\"\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"rejected\" className=\"space-y-4\">\n          {rejectedRequests.length > 0 ? (\n            rejectedRequests.map((request) => (\n              <Card key={request.id} className=\"opacity-75\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center gap-4\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"bg-gray-500 text-white\">\n                          {request.studentInfo?.firstName?.[0] || 'S'}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <h3 className=\"text-lg font-semibold\">\n                          {request.studentInfo?.firstName && request.studentInfo?.lastName\n                            ? `${request.studentInfo.firstName} ${request.studentInfo.lastName}`\n                            : 'Student'\n                          }\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Rejected {new Date(request.rejectedAt!).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    {getStatusBadge(request.status)}\n                  </div>\n\n                  {request.mentorResponse && (\n                    <div className=\"mb-4\">\n                      <h4 className=\"font-medium mb-2\">Your Response:</h4>\n                      <p className=\"text-sm text-muted-foreground bg-red-50 dark:bg-red-950 p-3 rounded-lg\">\n                        {request.mentorResponse}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <EmptyState\n              icon={XCircle}\n              title=\"No Rejected Requests\"\n              description=\"You haven't rejected any mentorship requests.\"\n            />\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Response Dialog */}\n      <Dialog open={responseDialogOpen} onOpenChange={setResponseDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>\n              {actionType === 'accept' ? 'Accept' : 'Decline'} Mentorship Request\n            </DialogTitle>\n            <DialogDescription>\n              {actionType === 'accept' \n                ? 'Send a welcoming message to your new student.'\n                : 'Please provide a polite reason for declining this request.'\n              }\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitResponse)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"response\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>\n                      {actionType === 'accept' ? 'Welcome Message' : 'Decline Reason'}\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder={actionType === 'accept' \n                          ? \"Welcome them and outline next steps...\"\n                          : \"Explain your reason for declining politely...\"\n                        }\n                        className=\"min-h-[120px]\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setResponseDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateRequestMutation.isPending}\n                  className={actionType === 'accept' ? 'bg-green-600 hover:bg-green-700' : ''}\n                >\n                  {updateRequestMutation.isPending ? \"Sending...\" : \n                   actionType === 'accept' ? 'Accept Request' : 'Decline Request'}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n      </div>\n    </div>\n  );\n};\n\nexport default MentorRequests;","size_bytes":17724},"client/src/pages/MentorSignIn.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { GraduationCap, Users, Award, Loader2 } from \"lucide-react\";\n\nconst MentorSignIn = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        // Check if user is actually a mentor\n        if (data.user.role !== 'mentor') {\n          toast({\n            title: \"Access Denied\",\n            description: \"This is the mentor portal. Please use the student portal to sign in.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n\n        toast({\n          title: \"Welcome Mentor!\",\n          description: \"Redirecting to your mentor dashboard...\",\n        });\n        \n        // Store mentor session data using centralized auth utility\n        const userData = {\n          id: data.user.id.toString(),\n          username: data.user.username,\n          firstName: data.user.firstName,\n          lastName: data.user.lastName,\n          email: data.user.email,\n          role: data.user.role as 'mentor',\n          isMaster: data.user.isMaster || false\n        };\n        \n        // Store in centralized auth system\n        localStorage.setItem('currentUser', JSON.stringify(userData));\n        \n        // Dispatch login event for other components\n        window.dispatchEvent(new CustomEvent('user-login', { detail: userData }));\n        \n        // Redirect to mentor dashboard\n        setLocation(\"/mentor-dashboard\");\n      } else {\n        toast({\n          title: \"Sign In Failed\",\n          description: data.error || \"Please check your email and password.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to connect to the server. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSocialLogin = (provider: string) => {\n    toast({\n      title: `${provider} Login`,\n      description: `${provider} authentication would be integrated here.`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-16 flex items-center justify-center\">\n        <div className=\"w-full max-w-md\">\n          {/* Mentor-specific branding */}\n          <div className=\"text-center mb-8 animate-slide-up\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-warm rounded-full mb-4 shadow-warm\">\n              <GraduationCap className=\"w-8 h-8 text-secondary-foreground\" />\n            </div>\n            <h1 className=\"text-3xl font-bold bg-gradient-warm bg-clip-text text-transparent\">\n              Mentor Portal\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">Shape the next generation of musicians</p>\n          </div>\n\n          <Card className=\"shadow-musical border-0 bg-card/80 backdrop-blur-sm animate-slide-up\">\n            <CardHeader className=\"space-y-1 pb-4\">\n              <CardTitle className=\"text-2xl text-center font-semibold\">Welcome Back</CardTitle>\n              <CardDescription className=\"text-center\">\n                Continue inspiring and teaching music\n                <br />\n                <span className=\"text-xs mt-2 block text-primary\">\n                  Demo: Use mentor@harmonylearn.com / mentor123\n                </span>\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Social Login Buttons */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"transition-rhythm hover:shadow-warm hover:border-secondary\"\n                  onClick={() => handleSocialLogin(\"Google\")}\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                    <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                    <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                    <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                  </svg>\n                  Google\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"transition-rhythm hover:shadow-warm hover:border-secondary\"\n                  onClick={() => handleSocialLogin(\"LinkedIn\")}\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                  </svg>\n                  LinkedIn\n                </Button>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <Separator className=\"flex-1\" />\n                <span className=\"text-muted-foreground text-sm\">or continue with email</span>\n                <Separator className=\"flex-1\" />\n              </div>\n\n              {/* Email/Password Form */}\n              <form onSubmit={handleSignIn} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"mentor@example.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"transition-rhythm focus:shadow-warm focus:border-secondary\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"password\" className=\"text-sm font-medium\">Password</Label>\n                    <Link \n                      to=\"#\" \n                      className=\"text-sm text-secondary hover:text-secondary/80 transition-beat\"\n                    >\n                      Forgot password?\n                    </Link>\n                  </div>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"transition-rhythm focus:shadow-warm focus:border-secondary\"\n                    required\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"w-full bg-gradient-warm hover:opacity-90 transition-rhythm shadow-warm font-medium\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Signing In...\n                    </>\n                  ) : (\n                    <>\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      Sign In to Teach\n                    </>\n                  )}\n                </Button>\n              </form>\n\n              {/* Professional Features Highlight */}\n              <div className=\"bg-secondary/10 rounded-lg p-4 space-y-2\">\n                <div className=\"flex items-center gap-2 text-secondary\">\n                  <Award className=\"w-4 h-4\" />\n                  <span className=\"text-sm font-medium\">Mentor Benefits</span>\n                </div>\n                <ul className=\"text-xs text-muted-foreground space-y-1\">\n                  <li>• Advanced student analytics</li>\n                  <li>• Professional scheduling tools</li>\n                  <li>• Earnings dashboard</li>\n                </ul>\n              </div>\n\n              {/* Additional Professional Options */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 transition-rhythm hover:border-secondary\"\n                    onClick={() => handleSocialLogin(\"Apple\")}\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"currentColor\" d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n                    </svg>\n                    Apple\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 transition-rhythm hover:border-secondary\"\n                    onClick={() => handleSocialLogin(\"Microsoft\")}\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"currentColor\" d=\"M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z\"/>\n                    </svg>\n                    Microsoft\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"text-center pt-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  New mentor?{\" \"}\n                  <Link \n                    to=\"/mentor-signup\" \n                    className=\"text-secondary hover:text-secondary/80 transition-beat font-medium\"\n                  >\n                    Apply to teach\n                  </Link>\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Are you a student?{\" \"}\n                  <Link \n                    to=\"/student-signin\" \n                    className=\"text-primary hover:text-primary-glow transition-beat font-medium\"\n                  >\n                    Student sign in\n                  </Link>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default MentorSignIn;","size_bytes":12361},"client/src/pages/MentorSignUp.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { GraduationCap, Award, Users, Star, Loader2 } from \"lucide-react\";\n\nconst MentorSignUp = () => {\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    experience: \"\",\n    specialization: \"\",\n    bio: \"\",\n    acceptTerms: false,\n    verifyCredentials: false\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.experience || !formData.specialization) {\n      toast({\n        title: \"Complete profile\",\n        description: \"Please fill in your experience and specialization.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.acceptTerms || !formData.verifyCredentials) {\n      toast({\n        title: \"Accept agreements\",\n        description: \"Please accept all terms and verify your credentials.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // First, register the mentor user\n      const registerResponse = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: formData.email, // Use email as username for simplicity\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email,\n          password: formData.password,\n          role: 'mentor'\n        }),\n      });\n\n      const registerData = await registerResponse.json();\n\n      if (!registerResponse.ok) {\n        toast({\n          title: \"Registration Failed\",\n          description: registerData.error || \"Unable to create account. Please try again.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Then create the mentor application\n      const applicationResponse = await fetch('/api/mentor-applications', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: registerData.user.id,\n          name: `${formData.firstName} ${formData.lastName}`,\n          email: formData.email,\n          specialization: formData.specialization,\n          experience: formData.experience,\n          bio: formData.bio,\n          credentials: \"Credentials to be verified\"\n        }),\n      });\n\n      if (applicationResponse.ok) {\n        toast({\n          title: \"Application Submitted!\",\n          description: `Thank you ${formData.firstName} ${formData.lastName}! We'll review your mentor application and get back to you soon.`,\n        });\n        setLocation(\"/mentor-signin\");\n      } else {\n        toast({\n          title: \"Application Error\",\n          description: \"Account created but application submission failed. Please contact support.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to connect to the server. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSocialSignUp = (provider: string) => {\n    toast({\n      title: `${provider} Sign Up`,\n      description: `${provider} registration would be integrated here.`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-16 flex items-center justify-center\">\n        <div className=\"w-full max-w-md\">\n          {/* Mentor-specific branding */}\n          <div className=\"text-center mb-8 animate-slide-up\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-warm rounded-full mb-4 shadow-warm animate-pulse-glow\">\n              <GraduationCap className=\"w-8 h-8 text-secondary-foreground\" />\n            </div>\n            <h1 className=\"text-3xl font-bold bg-gradient-warm bg-clip-text text-transparent\">\n              Become a Mentor\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">Share your musical expertise with eager students</p>\n          </div>\n\n          <Card className=\"shadow-musical border-0 bg-card/80 backdrop-blur-sm animate-slide-up\">\n            <CardHeader className=\"space-y-1 pb-4\">\n              <CardTitle className=\"text-2xl text-center font-semibold\">Apply to Teach</CardTitle>\n              <CardDescription className=\"text-center\">\n                Join our community of expert music mentors\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Social Sign Up Buttons */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"transition-rhythm hover:shadow-warm hover:border-secondary\"\n                  onClick={() => handleSocialSignUp(\"Google\")}\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                    <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                    <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                    <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                  </svg>\n                  Google\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"transition-rhythm hover:shadow-warm hover:border-secondary\"\n                  onClick={() => handleSocialSignUp(\"LinkedIn\")}\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                  </svg>\n                  LinkedIn\n                </Button>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <Separator className=\"flex-1\" />\n                <span className=\"text-muted-foreground text-sm\">or continue with email</span>\n                <Separator className=\"flex-1\" />\n              </div>\n\n              {/* Professional Application Form */}\n              <form onSubmit={handleSignUp} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\" className=\"text-sm font-medium\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      placeholder=\"First name\"\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                      className=\"transition-rhythm focus:shadow-warm focus:border-secondary\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\" className=\"text-sm font-medium\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      placeholder=\"Last name\"\n                      value={formData.lastName}\n                      onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                      className=\"transition-rhythm focus:shadow-warm focus:border-secondary\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium\">Professional Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"mentor@example.com\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    className=\"transition-rhythm focus:shadow-warm focus:border-secondary\"\n                    required\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"experience\" className=\"text-sm font-medium\">Experience</Label>\n                    <Select value={formData.experience} onValueChange={(value) => handleInputChange(\"experience\", value)}>\n                      <SelectTrigger className=\"transition-rhythm focus:shadow-warm focus:border-secondary\">\n                        <SelectValue placeholder=\"Years\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1-2\">1-2 years</SelectItem>\n                        <SelectItem value=\"3-5\">3-5 years</SelectItem>\n                        <SelectItem value=\"5-10\">5-10 years</SelectItem>\n                        <SelectItem value=\"10+\">10+ years</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"specialization\" className=\"text-sm font-medium\">Specialization</Label>\n                    <Select value={formData.specialization} onValueChange={(value) => handleInputChange(\"specialization\", value)}>\n                      <SelectTrigger className=\"transition-rhythm focus:shadow-warm focus:border-secondary\">\n                        <SelectValue placeholder=\"Select\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"piano\">Piano</SelectItem>\n                        <SelectItem value=\"guitar\">Guitar</SelectItem>\n                        <SelectItem value=\"violin\">Violin</SelectItem>\n                        <SelectItem value=\"drums\">Drums</SelectItem>\n                        <SelectItem value=\"vocal\">Vocal Training</SelectItem>\n                        <SelectItem value=\"theory\">Music Theory</SelectItem>\n                        <SelectItem value=\"production\">Music Production</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"bio\" className=\"text-sm font-medium\">Professional Bio</Label>\n                  <Textarea\n                    id=\"bio\"\n                    placeholder=\"Tell us about your musical background, teaching experience, and what makes you passionate about mentoring...\"\n                    value={formData.bio}\n                    onChange={(e) => handleInputChange(\"bio\", e.target.value)}\n                    className=\"transition-rhythm focus:shadow-warm focus:border-secondary min-h-[80px]\"\n                    rows={3}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a secure password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    className=\"transition-rhythm focus:shadow-warm focus:border-secondary\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium\">Confirm Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Confirm your password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange(\"confirmPassword\", e.target.value)}\n                    className=\"transition-rhythm focus:shadow-warm focus:border-secondary\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"credentials\" \n                      checked={formData.verifyCredentials}\n                      onCheckedChange={(checked) => handleInputChange(\"verifyCredentials\", checked)}\n                    />\n                    <Label htmlFor=\"credentials\" className=\"text-sm text-muted-foreground\">\n                      I verify that my credentials and experience are accurate\n                    </Label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"terms\" \n                      checked={formData.acceptTerms}\n                      onCheckedChange={(checked) => handleInputChange(\"acceptTerms\", checked)}\n                    />\n                    <Label htmlFor=\"terms\" className=\"text-sm text-muted-foreground\">\n                      I agree to the{\" \"}\n                      <Link to=\"#\" className=\"text-secondary hover:text-secondary/80 transition-beat\">\n                        Mentor Agreement\n                      </Link>{\" \"}\n                      and{\" \"}\n                      <Link to=\"#\" className=\"text-secondary hover:text-secondary/80 transition-beat\">\n                        Code of Conduct\n                      </Link>\n                    </Label>\n                  </div>\n                </div>\n                \n                <Button \n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"w-full bg-gradient-warm hover:opacity-90 transition-rhythm shadow-warm font-medium\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Submitting Application...\n                    </>\n                  ) : (\n                    <>\n                      <Award className=\"w-4 h-4 mr-2\" />\n                      Submit Application\n                    </>\n                  )}\n                </Button>\n              </form>\n\n              {/* Mentor Benefits */}\n              <div className=\"bg-secondary/10 rounded-lg p-4 space-y-3\">\n                <div className=\"flex items-center gap-2 text-secondary\">\n                  <Star className=\"w-4 h-4\" />\n                  <span className=\"text-sm font-medium\">Why Teach With Us?</span>\n                </div>\n                <ul className=\"text-xs text-muted-foreground space-y-1\">\n                  <li>• Competitive hourly rates</li>\n                  <li>• Flexible scheduling</li>\n                  <li>• Global student reach</li>\n                  <li>• Professional development support</li>\n                </ul>\n              </div>\n\n              <div className=\"text-center pt-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Already a mentor?{\" \"}\n                  <Link \n                    to=\"/mentor-signin\" \n                    className=\"text-secondary hover:text-secondary/80 transition-beat font-medium\"\n                  >\n                    Sign in\n                  </Link>\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Want to learn instead?{\" \"}\n                  <Link \n                    to=\"/student-signup\" \n                    className=\"text-primary hover:text-primary-glow transition-beat font-medium\"\n                  >\n                    Join as student\n                  </Link>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default MentorSignUp;","size_bytes":18155},"client/src/pages/MentorStudents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Calendar, \n  MessageCircle, \n  User, \n  Star, \n  Clock, \n  BookOpen,\n  Video,\n  Send,\n  Plus,\n  Target,\n  TrendingUp\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { EmptyState } from \"@/components/EmptyState\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { MentorNavigation } from \"@/components/mentor/MentorNavigation\";\nimport { getCurrentUser } from \"@/lib/auth\";\n\nconst sessionSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  description: z.string().optional(),\n  scheduledAt: z.string().min(1, \"Please select a date and time\"),\n  duration: z.number().min(30).max(180).default(60),\n});\n\ntype SessionForm = z.infer<typeof sessionSchema>;\n\ninterface Student {\n  id: number;\n  mentorshipRequestId: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  acceptedAt: Date;\n  totalSessions: number;\n  completedSessions: number;\n  nextSession?: {\n    id: number;\n    title: string;\n    scheduledAt: Date;\n  };\n  recentActivity?: {\n    type: string;\n    message: string;\n    date: Date;\n  }[];\n}\n\ninterface MentorshipSession {\n  id: number;\n  mentorshipRequestId: number;\n  title: string;\n  description: string;\n  scheduledAt: Date;\n  duration: number;\n  status: string;\n  rating?: number;\n  studentNotes?: string;\n  mentorNotes?: string;\n}\n\nconst apiRequest = async (url: string, options: { method: string; body?: any }) => {\n  const response = await fetch(url, {\n    method: options.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: options.body ? JSON.stringify(options.body) : undefined,\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\nexport const MentorStudents = () => {\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const [sessionDialogOpen, setSessionDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current mentor from localStorage\n  const currentUser = getCurrentUser();\n\n  // Fetch accepted mentorship requests (current students)\n  const { data: students = [], isLoading, error } = useQuery<Student[]>({\n    queryKey: ['/api/mentorship-requests', { mentorId: currentUser?.id, status: 'accepted' }],\n    enabled: !!currentUser?.id\n  });\n\n  // Fetch mentor sessions\n  const { data: sessions = [] } = useQuery<MentorshipSession[]>({\n    queryKey: [`/api/mentorship-sessions?mentorId=${currentUser?.id}`],\n    enabled: !!currentUser?.id\n  });\n\n  // Form for scheduling sessions\n  const form = useForm<SessionForm>({\n    resolver: zodResolver(sessionSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      scheduledAt: \"\",\n      duration: 60,\n    },\n  });\n\n  // Mutation for creating sessions\n  const createSessionMutation = useMutation({\n    mutationFn: async (data: SessionForm & { mentorshipRequestId: number }) => {\n      return apiRequest('/api/mentorship-sessions', {\n        method: \"POST\",\n        body: {\n          ...data,\n          scheduledAt: new Date(data.scheduledAt).toISOString(),\n        },\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Session Scheduled\",\n        description: \"The mentorship session has been scheduled successfully.\",\n      });\n      setSessionDialogOpen(false);\n      form.reset();\n      setSelectedStudent(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/mentorship-sessions'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to schedule session. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleScheduleSession = (student: Student) => {\n    setSelectedStudent(student);\n    setSessionDialogOpen(true);\n    form.setValue('title', `Mentorship Session with ${student.firstName}`);\n  };\n\n  const onSubmitSession = async (data: SessionForm) => {\n    if (!selectedStudent) return;\n    \n    createSessionMutation.mutate({\n      ...data,\n      mentorshipRequestId: selectedStudent.mentorshipRequestId,\n    });\n  };\n\n  const filteredStudents = students.filter(student => \n    `${student.firstName} ${student.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const upcomingSessions = sessions.filter(session => \n    session.status === 'scheduled' && new Date(session.scheduledAt) > new Date()\n  ).slice(0, 3);\n\n  const recentSessions = sessions.filter(session => \n    session.status === 'completed'\n  ).slice(0, 5);\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">My Students</h1>\n          <p className=\"text-muted-foreground\">Loading your students...</p>\n        </div>\n        <div className=\"space-y-4\">\n          {[1,2,3].map(i => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-20\">\n          <div className=\"text-lg text-red-600\">Error loading students. Please try again later.</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <MentorNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0 p-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">My Students</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your mentorship relationships and track student progress\n          </p>\n        </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Active Students</p>\n                <p className=\"text-2xl font-bold\">{students.length}</p>\n              </div>\n              <User className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Upcoming Sessions</p>\n                <p className=\"text-2xl font-bold\">{upcomingSessions.length}</p>\n              </div>\n              <Calendar className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Sessions</p>\n                <p className=\"text-2xl font-bold\">{sessions.length}</p>\n              </div>\n              <Video className=\"h-8 w-8 text-purple-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">Completion Rate</p>\n                <p className=\"text-2xl font-bold\">\n                  {sessions.length > 0 ? Math.round((recentSessions.length / sessions.length) * 100) : 0}%\n                </p>\n              </div>\n              <Target className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"students\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"students\">Students ({students.length})</TabsTrigger>\n          <TabsTrigger value=\"upcoming\">Upcoming Sessions ({upcomingSessions.length})</TabsTrigger>\n          <TabsTrigger value=\"recent\">Recent Sessions ({recentSessions.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"students\" className=\"space-y-6\">\n          {/* Search */}\n          <div className=\"flex gap-4\">\n            <Input\n              placeholder=\"Search students...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n          </div>\n\n          {/* Students Grid */}\n          {filteredStudents.length > 0 ? (\n            <div className=\"grid gap-6\">\n              {filteredStudents.map((student) => (\n                <Card key={student.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center gap-4\">\n                        <Avatar className=\"h-16 w-16\">\n                          <AvatarFallback className=\"bg-gradient-hero text-white text-lg\">\n                            {student.firstName?.[0] || 'S'}{student.lastName?.[0] || 'T'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <h3 className=\"text-xl font-semibold\">\n                            {student.firstName} {student.lastName}\n                          </h3>\n                          <p className=\"text-sm text-muted-foreground mb-1\">\n                            {student.email}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Student since {new Date(student.acceptedAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        Active Student\n                      </Badge>\n                    </div>\n\n                    {/* Progress Stats */}\n                    <div className=\"grid grid-cols-3 gap-4 mb-4\">\n                      <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-primary\">{student.totalSessions}</div>\n                        <div className=\"text-xs text-muted-foreground\">Total Sessions</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-green-600\">{student.completedSessions}</div>\n                        <div className=\"text-xs text-muted-foreground\">Completed</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {student.totalSessions > 0 ? Math.round((student.completedSessions / student.totalSessions) * 100) : 0}%\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Progress</div>\n                      </div>\n                    </div>\n\n                    {/* Progress Bar */}\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Learning Progress</span>\n                        <span>{student.totalSessions > 0 ? Math.round((student.completedSessions / student.totalSessions) * 100) : 0}%</span>\n                      </div>\n                      <Progress \n                        value={student.totalSessions > 0 ? (student.completedSessions / student.totalSessions) * 100 : 0}\n                        className=\"h-2\"\n                      />\n                    </div>\n\n                    {/* Next Session */}\n                    {student.nextSession && (\n                      <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Calendar className=\"h-4 w-4 text-blue-600\" />\n                          <span className=\"text-sm font-medium\">Next Session</span>\n                        </div>\n                        <p className=\"text-sm\">{student.nextSession.title}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {new Date(student.nextSession.scheduledAt).toLocaleString()}\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Actions */}\n                    <div className=\"flex gap-2\">\n                      <Button \n                        onClick={() => handleScheduleSession(student)}\n                        className=\"flex-1\"\n                      >\n                        <Calendar className=\"w-4 h-4 mr-2\" />\n                        Schedule Session\n                      </Button>\n                      <Button variant=\"outline\" className=\"flex-1\">\n                        <MessageCircle className=\"w-4 h-4 mr-2\" />\n                        Message\n                      </Button>\n                      <Button variant=\"outline\" className=\"flex-1\">\n                        <BookOpen className=\"w-4 h-4 mr-2\" />\n                        View Progress\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <EmptyState\n              icon={User}\n              title=\"No Students Yet\"\n              description=\"You don't have any active students at the moment. Accept mentorship requests to start mentoring!\"\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"upcoming\" className=\"space-y-4\">\n          {upcomingSessions.length > 0 ? (\n            upcomingSessions.map((session) => (\n              <Card key={session.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">{session.title}</h3>\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        {session.description}\n                      </p>\n                      <div className=\"flex items-center gap-4 text-sm\">\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          {new Date(session.scheduledAt).toLocaleDateString()}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-4 w-4\" />\n                          {new Date(session.scheduledAt).toLocaleTimeString()}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Video className=\"h-4 w-4\" />\n                          {session.duration} minutes\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\">Reschedule</Button>\n                      <Button>Join Session</Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <EmptyState\n              icon={Calendar}\n              title=\"No Upcoming Sessions\"\n              description=\"You don't have any upcoming sessions scheduled.\"\n            />\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"recent\" className=\"space-y-4\">\n          {recentSessions.length > 0 ? (\n            recentSessions.map((session) => (\n              <Card key={session.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold\">{session.title}</h3>\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        Completed on {new Date(session.scheduledAt).toLocaleDateString()}\n                      </p>\n                      {session.rating && (\n                        <div className=\"flex items-center gap-1\">\n                          <Star className=\"h-4 w-4 fill-yellow-500 text-yellow-500\" />\n                          <span className=\"text-sm font-medium\">{session.rating}/5</span>\n                        </div>\n                      )}\n                    </div>\n                    <Badge className=\"bg-green-100 text-green-800\">Completed</Badge>\n                  </div>\n                  \n                  {session.studentNotes && (\n                    <div className=\"mt-4 p-3 bg-muted/50 rounded-lg\">\n                      <h4 className=\"text-sm font-medium mb-1\">Student Notes:</h4>\n                      <p className=\"text-sm text-muted-foreground\">{session.studentNotes}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <EmptyState\n              icon={BookOpen}\n              title=\"No Recent Sessions\"\n              description=\"You haven't completed any sessions yet.\"\n            />\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Schedule Session Dialog */}\n      <Dialog open={sessionDialogOpen} onOpenChange={setSessionDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Schedule Mentorship Session</DialogTitle>\n            <DialogDescription>\n              Create a new session with {selectedStudent?.firstName} {selectedStudent?.lastName}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitSession)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Session Title</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Guitar Technique Review\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"What will you cover in this session?\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"scheduledAt\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date & Time</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"datetime-local\"\n                        min={new Date().toISOString().slice(0, 16)}\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"duration\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Duration (minutes)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min={30}\n                        max={180}\n                        step={15}\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setSessionDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createSessionMutation.isPending}\n                >\n                  {createSessionMutation.isPending ? \"Scheduling...\" : \"Schedule Session\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n      </div>\n    </div>\n  );\n};\n\nexport default MentorStudents;","size_bytes":22525},"client/src/pages/MyAcademies.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Users, Star, BookOpen, Video, Calendar, MessageSquare, Award, \n  TrendingUp, Clock, Crown, Shield, ExternalLink, Play, FileText,\n  Music, GraduationCap, Target, Sparkles, CheckCircle, AlertCircle\n} from \"lucide-react\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\n\ninterface AcademyMembership {\n  id: number;\n  classroomId: number;\n  role: string;\n  status: string;\n  joinedAt: string;\n  progress: number;\n  classroomTitle: string;\n  classroomDescription: string;\n  masterName: string;\n  academyName: string;\n  subject: string;\n  level: string;\n  instruments: string[];\n  currentStudents: number;\n  maxStudents: number;\n  heroImage: string;\n  primaryColor: string;\n  secondaryColor: string;\n  customSlug: string;\n}\n\nexport default function MyAcademies() {\n  const [user, setUser] = useState<any>(null);\n\n  useEffect(() => {\n    const currentUser = getCurrentUser();\n    setUser(currentUser);\n  }, []);\n\n  // Fetch user's academy memberships\n  const { data: memberships = [], isLoading: membershipsLoading } = useQuery({\n    queryKey: [\"/api/classroom-memberships\", user?.id],\n    queryFn: () => apiRequest(`/api/classroom-memberships?userId=${user?.id}`),\n    enabled: !!user?.id,\n  });\n\n  // Fetch detailed academy information for each membership\n  const { data: academyDetails = [] } = useQuery({\n    queryKey: [\"/api/academies\", \"details\", memberships],\n    queryFn: async () => {\n      if (memberships.length === 0) return [];\n      \n      const details = await Promise.all(\n        memberships.map(async (membership: any) => {\n          try {\n            const classroom = await apiRequest(`/api/classrooms/${membership.classroomId}`);\n            return { ...membership, ...classroom };\n          } catch (error) {\n            return membership;\n          }\n        })\n      );\n      return details;\n    },\n    enabled: memberships.length > 0,\n  });\n\n  // Fetch user's upcoming sessions\n  const { data: upcomingSessions = [] } = useQuery({\n    queryKey: [\"/api/live-sessions\", \"upcoming\", user?.id],\n    queryFn: () => apiRequest(`/api/live-sessions?student=${user?.id}&upcoming=true`),\n    enabled: !!user?.id,\n  });\n\n  // Separate memberships by status\n  const activeMemberships = academyDetails.filter((m: AcademyMembership) => m.status === 'active');\n  const pendingMemberships = academyDetails.filter((m: AcademyMembership) => m.status === 'pending');\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'removed': return 'bg-red-100 text-red-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'Active Member';\n      case 'pending': return 'Request Pending';\n      case 'removed': return 'Access Removed';\n      case 'rejected': return 'Request Rejected';\n      default: return status;\n    }\n  };\n\n  const getInstrumentIcon = (instrument: string) => {\n    switch (instrument.toLowerCase()) {\n      case 'piano': return '🎹';\n      case 'guitar': return '🎸';\n      case 'drums': return '🥁';\n      case 'vocals': return '🎤';\n      case 'violin': return '🎻';\n      default: return '🎵';\n    }\n  };\n\n  if (membershipsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p>Loading your academies...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">My Academies</h1>\n              <p className=\"text-muted-foreground\">\n                Track your learning journey across all joined academies\n              </p>\n            </div>\n            <Link href=\"/academy-discovery\">\n              <Button>\n                <Sparkles className=\"h-4 w-4 mr-2\" />\n                Discover More\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <Crown className=\"h-8 w-8 text-blue-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{activeMemberships.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Active Academies</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{pendingMemberships.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Pending Applications</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <Video className=\"h-8 w-8 text-green-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{upcomingSessions.length}</p>\n                  <p className=\"text-sm text-muted-foreground\">Upcoming Sessions</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <TrendingUp className=\"h-8 w-8 text-purple-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">\n                    {activeMemberships.length > 0 ? \n                      Math.round(activeMemberships.reduce((sum: number, m: AcademyMembership) => sum + (m.progress || 0), 0) / activeMemberships.length) : 0}%\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Avg Progress</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"active\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"active\" className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4\" />\n              Active Academies ({activeMemberships.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"pending\" className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Pending Applications ({pendingMemberships.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"sessions\" className=\"flex items-center gap-2\">\n              <Video className=\"h-4 w-4\" />\n              Upcoming Sessions ({upcomingSessions.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"active\" className=\"space-y-6\">\n            {activeMemberships.length > 0 ? (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {activeMemberships.map((membership: AcademyMembership) => (\n                  <Card key={membership.id} className=\"overflow-hidden\">\n                    {/* Academy Header */}\n                    <div \n                      className=\"h-32 bg-gradient-to-r from-blue-500 to-purple-600 relative\"\n                      style={{ \n                        background: membership.heroImage ? `url(${membership.heroImage})` : \n                                   `linear-gradient(to right, ${membership.primaryColor || '#3B82F6'}, ${membership.secondaryColor || '#8B5CF6'})`\n                      }}\n                    >\n                      <div className=\"absolute inset-0 bg-black/20\" />\n                      <div className=\"absolute top-4 left-4 right-4 flex justify-between items-start\">\n                        <Badge variant=\"secondary\" className=\"bg-white/20 text-white border-white/30\">\n                          <Crown className=\"h-3 w-3 mr-1\" />\n                          {membership.academyName || membership.classroomTitle}\n                        </Badge>\n                        <Badge className={getStatusColor(membership.status)}>\n                          {getStatusText(membership.status)}\n                        </Badge>\n                      </div>\n                      <div className=\"absolute bottom-4 left-4\">\n                        <h3 className=\"text-lg font-bold text-white\">\n                          {membership.subject}\n                        </h3>\n                        <p className=\"text-white/80 text-sm\">\n                          Master: {membership.masterName}\n                        </p>\n                      </div>\n                    </div>\n\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-4\">\n                        {/* Progress */}\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"font-medium\">Your Progress</span>\n                            <span>{membership.progress || 0}%</span>\n                          </div>\n                          <Progress value={membership.progress || 0} className=\"h-2\" />\n                        </div>\n\n                        {/* Instruments */}\n                        {membership.instruments?.length > 0 && (\n                          <div>\n                            <h4 className=\"text-sm font-medium mb-2\">Instruments</h4>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {membership.instruments.map((instrument, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                  <span className=\"mr-1\">{getInstrumentIcon(instrument)}</span>\n                                  {instrument}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Academy Stats */}\n                        <div className=\"grid grid-cols-3 gap-4 text-center text-sm\">\n                          <div>\n                            <div className=\"font-medium\">{membership.level}</div>\n                            <div className=\"text-muted-foreground\">Level</div>\n                          </div>\n                          <div>\n                            <div className=\"font-medium\">{membership.currentStudents || 0}</div>\n                            <div className=\"text-muted-foreground\">Students</div>\n                          </div>\n                          <div>\n                            <div className=\"font-medium\">\n                              {new Date(membership.joinedAt).toLocaleDateString()}\n                            </div>\n                            <div className=\"text-muted-foreground\">Joined</div>\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div className=\"flex gap-2 pt-4 border-t\">\n                          <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                            <BookOpen className=\"h-4 w-4 mr-2\" />\n                            Continue Learning\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => window.open(`/academy/${membership.customSlug || membership.academyName?.toLowerCase().replace(/\\s+/g, '-')}`, '_blank')}\n                            title=\"View Landing Page\"\n                          >\n                            <ExternalLink className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <MessageSquare className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Crown className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No Active Academies</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  You haven't joined any academies yet. Discover amazing academies to start your learning journey.\n                </p>\n                <Link href=\"/academy-discovery\">\n                  <Button>\n                    <Sparkles className=\"h-4 w-4 mr-2\" />\n                    Discover Academies\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"pending\" className=\"space-y-6\">\n            {pendingMemberships.length > 0 ? (\n              <div className=\"space-y-4\">\n                {pendingMemberships.map((membership: AcademyMembership) => (\n                  <Card key={membership.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-orange-400 to-red-500 flex items-center justify-center\">\n                            <Crown className=\"h-6 w-6 text-white\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">{membership.academyName || membership.classroomTitle}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Master: {membership.masterName} • {membership.subject}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <Badge className={getStatusColor(membership.status)}>\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            Pending Review\n                          </Badge>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Applied {new Date(membership.joinedAt).toLocaleDateString()}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Clock className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No Pending Applications</h3>\n                <p className=\"text-muted-foreground\">\n                  All your academy applications have been processed.\n                </p>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"sessions\" className=\"space-y-6\">\n            {upcomingSessions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {upcomingSessions.map((session: any) => (\n                  <Card key={session.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"w-12 h-12 rounded-full bg-green-100 flex items-center justify-center\">\n                            <Video className=\"h-6 w-6 text-green-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">{session.title}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {session.description}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">\n                              {new Date(session.scheduledAt).toLocaleDateString()}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {new Date(session.scheduledAt).toLocaleTimeString()}\n                            </div>\n                          </div>\n                          <Button size=\"sm\">\n                            <Play className=\"h-4 w-4 mr-2\" />\n                            Join\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Video className=\"h-16 w-16 text-muted-foreground mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No Upcoming Sessions</h3>\n                <p className=\"text-muted-foreground\">\n                  Check back later for scheduled academy sessions.\n                </p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":18551},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    // Track 404 errors for analytics\n    // TODO: Integrate with analytics service\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4 text-foreground\">404</h1>\n        <p className=\"text-xl text-muted-foreground mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-primary hover:text-primary/80 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":718},"client/src/pages/StaffClassroom.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Calendar, Users, BookOpen, MessageSquare, Settings, PlusCircle, Video, FileText, \n  Crown, Shield, TrendingUp, Clock, Award, Target, BarChart3, Search, Filter, \n  UserCheck, UserX, AlertCircle, CheckCircle, ExternalLink, Mail, Phone,\n  GraduationCap, Activity, Star, Zap, Brain, Trophy, Sparkles, UserPlus, Eye\n} from \"lucide-react\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ResignationRequestForm from \"@/components/ResignationRequestForm\";\nimport ResignationRequestStatus from \"@/components/ResignationRequestStatus\";\n\nexport default function StaffClassroom() {\n  const [user, setUser] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n  const [filterRole, setFilterRole] = useState(\"all\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const currentUser = getCurrentUser();\n    setUser(currentUser);\n  }, []);\n\n  // Fetch mentor's staff classroom\n  const { data: classroom, isLoading: classroomLoading, error } = useQuery({\n    queryKey: [\"/api/mentors\", user?.id, \"staff-classroom\"],\n    queryFn: () => apiRequest(`/api/mentors/${user?.id}/staff-classroom`),\n    enabled: !!user?.id,\n  });\n\n  // Fetch classroom students and staff\n  const { data: classroomMembers, isLoading: membersLoading } = useQuery({\n    queryKey: [\"/api/classrooms\", classroom?.classroomId, \"members\"],\n    queryFn: () => apiRequest(`/api/classrooms/${classroom?.classroomId}/members`),\n    enabled: !!classroom?.classroomId,\n  });\n\n  // Fetch resignation requests for oversight\n  const { data: resignationRequests } = useQuery({\n    queryKey: [\"/api/resignation-requests\", classroom?.classroomId],\n    queryFn: () => apiRequest(`/api/resignation-requests?classroomId=${classroom?.classroomId}`),\n    enabled: !!classroom?.classroomId,\n  });\n\n  // Fetch live sessions\n  const { data: liveSessions } = useQuery({\n    queryKey: [\"/api/live-sessions\", classroom?.classroomId],\n    queryFn: () => apiRequest(`/api/live-sessions?classroomId=${classroom?.classroomId}`),\n    enabled: !!classroom?.classroomId,\n  });\n\n  // Fetch classroom analytics\n  const { data: analytics } = useQuery({\n    queryKey: [\"/api/classrooms\", classroom?.classroomId, \"analytics\"],\n    queryFn: () => apiRequest(`/api/classrooms/${classroom?.classroomId}/analytics`),\n    enabled: !!classroom?.classroomId,\n  });\n\n  // Handle student progress update\n  const updateStudentProgress = useMutation({\n    mutationFn: (data: { studentId: number, progress: number }) => \n      apiRequest(`/api/students/${data.studentId}/progress`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ progress: data.progress })\n      }),\n    onSuccess: () => {\n      toast({ title: \"Student progress updated successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\", classroom?.classroomId, \"members\"] });\n    }\n  });\n\n  // Filter members based on search and filters\n  const filteredMembers = classroomMembers?.filter((member: any) => {\n    const matchesSearch = member.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         member.email?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = filterRole === \"all\" || member.role === filterRole;\n    const matchesStatus = filterStatus === \"all\" || member.status === filterStatus;\n    return matchesSearch && matchesRole && matchesStatus;\n  }) || [];\n\n  // If no staff classroom found, show not authorized message\n  if (error && error.message?.includes(\"404\")) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <Shield className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h1 className=\"text-2xl font-semibold mb-2\">No Staff Access</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              You are not currently a staff member of any classroom. Apply to join academies through the discovery page.\n            </p>\n            <Button onClick={() => window.location.href = \"/mentor-portal/classroom-discovery\"}>\n              Discover Academies\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (classroomLoading || membersLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p>Loading your classroom...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"flex items-center gap-3 mb-2\">\n                <h1 className=\"text-3xl font-bold\">{classroom?.classroomTitle}</h1>\n                <Badge variant=\"secondary\" className=\"bg-emerald-100 text-emerald-800 border-emerald-200\">\n                  <Shield className=\"h-3 w-3 mr-1\" />\n                  Staff Member\n                </Badge>\n              </div>\n              <div className=\"flex items-center gap-4 text-muted-foreground\">\n                <div className=\"flex items-center gap-1\">\n                  <BookOpen className=\"h-4 w-4\" />\n                  <span>{classroom?.classroomSubject}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  <span>{classroom?.classroomLevel}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Crown className=\"h-4 w-4\" />\n                  <span>Master: {classroom?.masterName}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>Joined {new Date(classroom?.joinedAt).toLocaleDateString()}</span>\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mt-2\">{classroom?.classroomDescription}</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <ResignationRequestForm \n                mentorId={user?.id}\n                classroomId={classroom?.classroomId}\n                classroomTitle={classroom?.classroomTitle}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <Users className=\"h-8 w-8 text-blue-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{classroomMembers?.filter((m: any) => m.role === 'student')?.length || 0}</p>\n                  <p className=\"text-sm text-muted-foreground\">Students</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <Shield className=\"h-8 w-8 text-green-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{classroomMembers?.filter((m: any) => m.role === 'staff')?.length || 0}</p>\n                  <p className=\"text-sm text-muted-foreground\">Staff</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <Video className=\"h-8 w-8 text-purple-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{liveSessions?.length || 0}</p>\n                  <p className=\"text-sm text-muted-foreground\">Live Sessions</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <TrendingUp className=\"h-8 w-8 text-orange-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{analytics?.averageProgress || 0}%</p>\n                  <p className=\"text-sm text-muted-foreground\">Avg Progress</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-3\">\n                <AlertCircle className=\"h-8 w-8 text-red-500\" />\n                <div>\n                  <p className=\"text-2xl font-bold\">{resignationRequests?.filter((r: any) => r.status === 'pending')?.length || 0}</p>\n                  <p className=\"text-sm text-muted-foreground\">Pending Issues</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"dashboard\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"student-management\">Student Management</TabsTrigger>\n            <TabsTrigger value=\"staff-oversight\">Staff Oversight</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"sessions\">Sessions</TabsTrigger>\n            <TabsTrigger value=\"administration\">Administration</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"dashboard\" className=\"space-y-6\">\n            <ResignationRequestStatus mentorId={user?.id} />\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Master's Classroom Performance */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Classroom Performance\n                  </CardTitle>\n                  <CardDescription>Overall classroom metrics and progress</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Student Completion Rate</span>\n                      <span className=\"text-sm text-muted-foreground\">{analytics?.completionRate || 0}%</span>\n                    </div>\n                    <Progress value={analytics?.completionRate || 0} className=\"h-2\" />\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Staff Efficiency</span>\n                      <span className=\"text-sm text-muted-foreground\">{analytics?.staffEfficiency || 0}%</span>\n                    </div>\n                    <Progress value={analytics?.staffEfficiency || 85} className=\"h-2\" />\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Student Satisfaction</span>\n                      <span className=\"text-sm text-muted-foreground\">{analytics?.satisfaction || 0}%</span>\n                    </div>\n                    <Progress value={analytics?.satisfaction || 92} className=\"h-2\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions for Master Management */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Zap className=\"h-5 w-5\" />\n                    Quick Actions\n                  </CardTitle>\n                  <CardDescription>Staff management tools and actions</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n                      <UserPlus className=\"h-5 w-5\" />\n                      <span className=\"text-sm\">Add Student</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n                      <Video className=\"h-5 w-5\" />\n                      <span className=\"text-sm\">Schedule Session</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n                      <Trophy className=\"h-5 w-5\" />\n                      <span className=\"text-sm\">Award Achievement</span>\n                    </Button>\n                    <Button variant=\"outline\" className=\"h-auto p-4 flex flex-col items-center gap-2\">\n                      <MessageSquare className=\"h-5 w-5\" />\n                      <span className=\"text-sm\">Send Announcement</span>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Activities & Alerts */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5\" />\n                    Recent Activities\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {analytics?.recentActivities?.length ? analytics.recentActivities.map((activity: any, index: number) => (\n                      <div key={index} className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                        <div className=\"flex-shrink-0\">\n                          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">{activity.title}</p>\n                          <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                        </div>\n                      </div>\n                    )) : (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        <Activity className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                        <p>No recent activities</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <AlertCircle className=\"h-5 w-5\" />\n                    Alerts & Notifications\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {resignationRequests?.filter((r: any) => r.status === 'pending')?.map((request: any) => (\n                      <div key={request.id} className=\"flex items-center gap-3 p-3 border border-orange-200 rounded-lg bg-orange-50\">\n                        <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Resignation Request</p>\n                          <p className=\"text-xs text-muted-foreground\">Staff member requesting to leave</p>\n                        </div>\n                        <Button size=\"sm\" variant=\"outline\">Review</Button>\n                      </div>\n                    ))}\n                    {(!resignationRequests || resignationRequests.length === 0) && (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        <CheckCircle className=\"h-12 w-12 mx-auto mb-2 opacity-50 text-green-500\" />\n                        <p>All good! No pending alerts</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"student-management\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Student Management</h2>\n                <p className=\"text-muted-foreground\">Oversee student progress and engagement</p>\n              </div>\n              <div className=\"flex gap-2\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search students...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                  />\n                </div>\n                <Select value={filterStatus} onValueChange={setFilterStatus}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue placeholder=\"Filter by status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Student Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {filteredMembers?.filter((m: any) => m.role === 'student')?.length > 0 ? (\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Student</TableHead>\n                        <TableHead>Progress</TableHead>\n                        <TableHead>Last Active</TableHead>\n                        <TableHead>Performance</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredMembers.filter((m: any) => m.role === 'student').map((student: any) => (\n                        <TableRow key={student.id}>\n                          <TableCell className=\"flex items-center gap-3\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage src={student.avatar} />\n                              <AvatarFallback>{student.name?.charAt(0)}</AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium\">{student.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center gap-2\">\n                              <Progress value={student.progress || 0} className=\"w-16 h-2\" />\n                              <span className=\"text-sm\">{student.progress || 0}%</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {student.lastActive ? new Date(student.lastActive).toLocaleDateString() : 'Never'}\n                            </span>\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={student.performance === 'excellent' ? 'default' : \n                                          student.performance === 'good' ? 'secondary' : 'outline'}>\n                              {student.performance || 'Average'}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-1\">\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Mail className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                ) : (\n                  <div className=\"text-center py-12 text-muted-foreground\">\n                    <Users className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                    <h3 className=\"text-lg font-medium mb-2\">No Students Found</h3>\n                    <p>No students match your current search and filter criteria.</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"staff-oversight\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Staff Oversight</h2>\n                <p className=\"text-muted-foreground\">Monitor and manage teaching staff</p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"h-5 w-5\" />\n                    Staff Members\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {classroomMembers?.filter((m: any) => m.role === 'staff')?.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {classroomMembers.filter((m: any) => m.role === 'staff').map((staff: any) => (\n                        <div key={staff.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                          <div className=\"flex items-center gap-3\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarImage src={staff.avatar} />\n                              <AvatarFallback>{staff.name?.charAt(0)}</AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium\">{staff.name}</p>\n                              <p className=\"text-sm text-muted-foreground\">{staff.specialization || 'Staff Member'}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"secondary\">\n                              <Shield className=\"h-3 w-3 mr-1\" />\n                              Staff\n                            </Badge>\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Shield className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                      <p>No other staff members</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <AlertCircle className=\"h-5 w-5\" />\n                    Staff Requests & Issues\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {resignationRequests?.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {resignationRequests.map((request: any) => (\n                        <div key={request.id} className=\"p-3 border rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <span className=\"font-medium\">Resignation Request</span>\n                            <Badge variant={request.status === 'pending' ? 'outline' : \n                                          request.status === 'approved' ? 'default' : 'secondary'}>\n                              {request.status}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mb-2\">{request.reason}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            Submitted: {new Date(request.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <CheckCircle className=\"h-12 w-12 mx-auto mb-2 opacity-50 text-green-500\" />\n                      <p>No pending staff issues</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Performance Analytics</h2>\n                <p className=\"text-muted-foreground\">Detailed classroom and staff performance metrics</p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5\" />\n                    Student Progress\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                      {analytics?.averageProgress || 0}%\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Average completion</p>\n                    <Progress value={analytics?.averageProgress || 0} className=\"mt-3\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Star className=\"h-5 w-5\" />\n                    Teaching Quality\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                      {analytics?.teachingQuality || 4.8}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Average rating</p>\n                    <div className=\"flex justify-center mt-3\">\n                      {Array.from({ length: 5 }, (_, i) => (\n                        <Star key={i} className={`h-4 w-4 ${i < Math.floor(analytics?.teachingQuality || 4.8) ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} />\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5\" />\n                    Engagement\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold text-purple-600 mb-2\">\n                      {analytics?.engagement || 89}%\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">Active participation</p>\n                    <Progress value={analytics?.engagement || 89} className=\"mt-3\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"sessions\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Live Sessions</h2>\n                <p className=\"text-muted-foreground\">Schedule and manage teaching sessions</p>\n              </div>\n              <Button>\n                <PlusCircle className=\"h-4 w-4 mr-2\" />\n                Schedule Session\n              </Button>\n            </div>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                {liveSessions?.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {liveSessions.map((session: any) => (\n                      <div key={session.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <Video className=\"h-5 w-5 text-blue-500\" />\n                          <div>\n                            <p className=\"font-medium\">{session.title}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(session.scheduledAt).toLocaleString()}\n                            </p>\n                          </div>\n                        </div>\n                        <Badge variant={session.status === 'scheduled' ? 'outline' : \n                                      session.status === 'live' ? 'default' : 'secondary'}>\n                          {session.status}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Video className=\"h-12 w-12 mx-auto mb-2\" />\n                    <p>No sessions scheduled</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"administration\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h2 className=\"text-2xl font-bold\">Administration</h2>\n                <p className=\"text-muted-foreground\">Classroom settings and administrative tools</p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Settings className=\"h-5 w-5\" />\n                    Master Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                      <Crown className=\"h-5 w-5 text-yellow-500\" />\n                      <div>\n                        <p className=\"font-medium\">{classroom?.masterName}</p>\n                        <p className=\"text-sm text-muted-foreground\">Master Teacher</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Subject</p>\n                        <p className=\"font-medium\">{classroom?.classroomSubject}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Level</p>\n                        <p className=\"font-medium\">{classroom?.classroomLevel}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Max Students</p>\n                        <p className=\"font-medium\">{classroom?.classroomMaxStudents}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Created</p>\n                        <p className=\"font-medium\">{new Date(classroom?.createdAt).toLocaleDateString()}</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Brain className=\"h-5 w-5\" />\n                    Staff Resources\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      Teaching Guidelines\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <ExternalLink className=\"h-4 w-4 mr-2\" />\n                      Classroom Policies\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Mail className=\"h-4 w-4 mr-2\" />\n                      Contact Master\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      <Trophy className=\"h-4 w-4 mr-2\" />\n                      Achievement System\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":35684},"client/src/pages/StudentAchievements.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Footer } from \"@/components/Footer\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Award, \n  Trophy, \n  Star,\n  Target,\n  Calendar,\n  BookOpen,\n  Music,\n  Users,\n  Clock,\n  TrendingUp,\n  CheckCircle,\n  Lock\n} from \"lucide-react\";\n\ninterface Achievement {\n  id: number;\n  title: string;\n  description: string;\n  icon: string;\n  earnedDate?: string;\n  category: 'progress' | 'skill' | 'participation' | 'milestone';\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  points: number;\n  isEarned: boolean;\n  progress?: number;\n  requirement?: string;\n}\n\ninterface Badge {\n  id: number;\n  name: string;\n  description: string;\n  icon: string;\n  earnedDate: string;\n  category: string;\n}\n\ninterface Goal {\n  id: number;\n  title: string;\n  description: string;\n  target: number;\n  current: number;\n  unit: string;\n  deadline?: string;\n  category: string;\n  isCompleted: boolean;\n}\n\nconst StudentAchievements = () => {\n  const [currentUser] = useState(() => {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  });\n\n  // Fetch student achievements data\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: ['/api/enrollments', { student: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Sample achievements data - in real app would come from API\n  const [achievements] = useState<Achievement[]>([\n    {\n      id: 1,\n      title: \"First Steps\",\n      description: \"Complete your first lesson\",\n      icon: \"🎵\",\n      earnedDate: \"2025-01-15\",\n      category: 'progress',\n      rarity: 'common',\n      points: 10,\n      isEarned: true\n    },\n    {\n      id: 2,\n      title: \"Week Warrior\",\n      description: \"Practice for 7 consecutive days\",\n      icon: \"🔥\",\n      earnedDate: \"2025-01-20\",\n      category: 'participation',\n      rarity: 'rare',\n      points: 50,\n      isEarned: true\n    },\n    {\n      id: 3,\n      title: \"Scale Master\",\n      description: \"Master all basic scales\",\n      icon: \"🎼\",\n      earnedDate: \"2025-01-25\",\n      category: 'skill',\n      rarity: 'epic',\n      points: 100,\n      isEarned: true\n    },\n    {\n      id: 4,\n      title: \"Course Crusher\",\n      description: \"Complete 5 courses\",\n      icon: \"📚\",\n      category: 'milestone',\n      rarity: 'epic',\n      points: 200,\n      isEarned: false,\n      progress: 60,\n      requirement: \"Complete 3 more courses\"\n    },\n    {\n      id: 5,\n      title: \"Perfect Pitch\",\n      description: \"Score 100% on a theory test\",\n      icon: \"🎯\",\n      category: 'skill',\n      rarity: 'legendary',\n      points: 500,\n      isEarned: false,\n      progress: 0,\n      requirement: \"Take a theory assessment\"\n    },\n    {\n      id: 6,\n      title: \"Social Butterfly\",\n      description: \"Join 10 community discussions\",\n      icon: \"🦋\",\n      category: 'participation',\n      rarity: 'rare',\n      points: 75,\n      isEarned: false,\n      progress: 30,\n      requirement: \"Join 7 more discussions\"\n    }\n  ]);\n\n  const [badges] = useState<Badge[]>([\n    {\n      id: 1,\n      name: \"Piano Pioneer\",\n      description: \"Started your piano journey\",\n      icon: \"🎹\",\n      earnedDate: \"2025-01-15\",\n      category: \"Instrument\"\n    },\n    {\n      id: 2,\n      name: \"Theory Enthusiast\",\n      description: \"Completed music theory basics\",\n      icon: \"📖\",\n      earnedDate: \"2025-01-22\",\n      category: \"Knowledge\"\n    }\n  ]);\n\n  const [goals] = useState<Goal[]>([\n    {\n      id: 1,\n      title: \"Weekly Practice Goal\",\n      description: \"Practice at least 10 hours this week\",\n      target: 10,\n      current: 7.5,\n      unit: \"hours\",\n      deadline: \"2025-02-02\",\n      category: \"Practice\",\n      isCompleted: false\n    },\n    {\n      id: 2,\n      title: \"Course Completion\",\n      description: \"Finish Piano Fundamentals course\",\n      target: 100,\n      current: 85,\n      unit: \"%\",\n      deadline: \"2025-02-15\",\n      category: \"Learning\",\n      isCompleted: false\n    },\n    {\n      id: 3,\n      title: \"January Challenge\",\n      description: \"Practice every day in January\",\n      target: 31,\n      current: 31,\n      unit: \"days\",\n      category: \"Challenge\",\n      isCompleted: true\n    }\n  ]);\n\n  const earnedAchievements = achievements.filter(a => a.isEarned);\n  const unlockedAchievements = achievements.filter(a => !a.isEarned);\n  const totalPoints = earnedAchievements.reduce((sum, a) => sum + a.points, 0);\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n      case 'rare': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'epic': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300';\n      case 'legendary': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'progress': return <TrendingUp className=\"h-4 w-4\" />;\n      case 'skill': return <Star className=\"h-4 w-4\" />;\n      case 'participation': return <Users className=\"h-4 w-4\" />;\n      case 'milestone': return <Trophy className=\"h-4 w-4\" />;\n      default: return <Award className=\"h-4 w-4\" />;\n    }\n  };\n\n  const AchievementCard = ({ achievement }: { achievement: Achievement }) => (\n    <Card className={`overflow-hidden transition-all duration-300 ${\n      achievement.isEarned \n        ? 'hover:shadow-lg cursor-pointer' \n        : 'opacity-60 hover:opacity-80'\n    }`}>\n      <CardContent className=\"p-6 relative\">\n        {!achievement.isEarned && (\n          <div className=\"absolute top-2 right-2\">\n            <Lock className=\"h-4 w-4 text-muted-foreground\" />\n          </div>\n        )}\n        \n        <div className=\"text-center space-y-3\">\n          <div className=\"text-4xl\">{achievement.icon}</div>\n          <div>\n            <h3 className=\"font-semibold\">{achievement.title}</h3>\n            <p className=\"text-sm text-muted-foreground\">{achievement.description}</p>\n          </div>\n          \n          <div className=\"flex items-center justify-center gap-2\">\n            <Badge variant=\"outline\" className={getRarityColor(achievement.rarity)}>\n              {achievement.rarity}\n            </Badge>\n            <Badge variant=\"outline\" className=\"capitalize\">\n              {getCategoryIcon(achievement.category)}\n              <span className=\"ml-1\">{achievement.category}</span>\n            </Badge>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"font-medium\">{achievement.points} points</span>\n            {achievement.isEarned && achievement.earnedDate && (\n              <span className=\"text-muted-foreground\">\n                {new Date(achievement.earnedDate).toLocaleDateString()}\n              </span>\n            )}\n          </div>\n          \n          {!achievement.isEarned && achievement.progress !== undefined && (\n            <div className=\"space-y-2\">\n              <Progress value={achievement.progress} className=\"h-2\" />\n              <p className=\"text-xs text-muted-foreground\">{achievement.requirement}</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Achievements & Progress</h1>\n          <p className=\"text-muted-foreground\">\n            Track your learning milestones and celebrate your successes\n          </p>\n        </div>\n\n        {/* Overview Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Trophy className=\"h-8 w-8 mx-auto mb-2 text-yellow-500\" />\n              <p className=\"text-2xl font-bold\">{earnedAchievements.length}</p>\n              <p className=\"text-sm text-muted-foreground\">Achievements Earned</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Star className=\"h-8 w-8 mx-auto mb-2 text-blue-500\" />\n              <p className=\"text-2xl font-bold\">{totalPoints}</p>\n              <p className=\"text-sm text-muted-foreground\">Total Points</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Target className=\"h-8 w-8 mx-auto mb-2 text-green-500\" />\n              <p className=\"text-2xl font-bold\">{goals.filter(g => g.isCompleted).length}/{goals.length}</p>\n              <p className=\"text-sm text-muted-foreground\">Goals Completed</p>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <Award className=\"h-8 w-8 mx-auto mb-2 text-purple-500\" />\n              <p className=\"text-2xl font-bold\">{badges.length}</p>\n              <p className=\"text-sm text-muted-foreground\">Badges Collected</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"achievements\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"achievements\">Achievements</TabsTrigger>\n            <TabsTrigger value=\"badges\">Badges</TabsTrigger>\n            <TabsTrigger value=\"goals\">Goals</TabsTrigger>\n          </TabsList>\n\n          {/* Achievements Tab */}\n          <TabsContent value=\"achievements\">\n            <div className=\"space-y-6\">\n              {/* Earned Achievements */}\n              <div>\n                <h2 className=\"text-xl font-semibold mb-4\">Earned Achievements ({earnedAchievements.length})</h2>\n                {earnedAchievements.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"text-center py-12\">\n                      <Trophy className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">No achievements yet</h3>\n                      <p className=\"text-muted-foreground\">\n                        Start learning to unlock your first achievements!\n                      </p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {earnedAchievements.map((achievement) => (\n                      <AchievementCard key={achievement.id} achievement={achievement} />\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Available Achievements */}\n              <div>\n                <h2 className=\"text-xl font-semibold mb-4\">Available Achievements ({unlockedAchievements.length})</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {unlockedAchievements.map((achievement) => (\n                    <AchievementCard key={achievement.id} achievement={achievement} />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </TabsContent>\n\n          {/* Badges Tab */}\n          <TabsContent value=\"badges\">\n            <div className=\"space-y-4\">\n              {badges.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-12\">\n                    <Award className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No badges earned yet</h3>\n                    <p className=\"text-muted-foreground\">\n                      Complete courses and activities to earn badges!\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  {badges.map((badge) => (\n                    <Card key={badge.id} className=\"text-center\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"text-4xl mb-3\">{badge.icon}</div>\n                        <h3 className=\"font-semibold mb-1\">{badge.name}</h3>\n                        <p className=\"text-sm text-muted-foreground mb-3\">{badge.description}</p>\n                        <Badge variant=\"outline\">{badge.category}</Badge>\n                        <p className=\"text-xs text-muted-foreground mt-2\">\n                          Earned {new Date(badge.earnedDate).toLocaleDateString()}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Goals Tab */}\n          <TabsContent value=\"goals\">\n            <div className=\"space-y-4\">\n              {goals.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-12\">\n                    <Target className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No goals set</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Set learning goals to track your progress!\n                    </p>\n                    <Button>Set Your First Goal</Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-4\">\n                  {goals.map((goal) => (\n                    <Card key={goal.id} className={goal.isCompleted ? 'border-green-200 bg-green-50 dark:bg-green-900/20' : ''}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-center gap-3\">\n                            {goal.isCompleted ? (\n                              <CheckCircle className=\"h-6 w-6 text-green-500\" />\n                            ) : (\n                              <Target className=\"h-6 w-6 text-blue-500\" />\n                            )}\n                            <div>\n                              <h3 className=\"font-semibold\">{goal.title}</h3>\n                              <p className=\"text-sm text-muted-foreground\">{goal.description}</p>\n                            </div>\n                          </div>\n                          <Badge variant=\"outline\">{goal.category}</Badge>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Progress</span>\n                            <span>{goal.current} / {goal.target} {goal.unit}</span>\n                          </div>\n                          <Progress value={(goal.current / goal.target) * 100} className=\"h-2\" />\n                          {goal.deadline && !goal.isCompleted && (\n                            <p className=\"text-xs text-muted-foreground\">\n                              Due: {new Date(goal.deadline).toLocaleDateString()}\n                            </p>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default StudentAchievements;","size_bytes":16480},"client/src/pages/StudentCommunity.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Footer } from \"@/components/Footer\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Users, \n  MessageCircle, \n  Share2,\n  Plus,\n  TrendingUp,\n  Clock,\n  Award,\n  Music,\n  BookOpen,\n  Star,\n  ThumbsUp,\n  Send,\n  Calendar,\n  Trophy,\n  Heart,\n  Search,\n  Play,\n  Download,\n  Volume2,\n  MapPin\n} from \"lucide-react\";\n\ninterface CommunityPost {\n  id: number;\n  author: string;\n  avatar?: string;\n  instrument?: string;\n  title?: string;\n  content: string;\n  timestamp: string;\n  likes: number;\n  comments: number;\n  shares: number;\n  category: 'discussion' | 'achievement' | 'help' | 'showcase';\n  tags: string[];\n  isLiked?: boolean;\n  audioFile?: string;\n}\n\ninterface StudyGroup {\n  id: number;\n  name: string;\n  description: string;\n  members: number;\n  category: string;\n  level: string;\n  nextSession?: string;\n  image?: string;\n}\n\ninterface ForumTopic {\n  name: string;\n  posts: number;\n  icon: string;\n}\n\ninterface ForumCategory {\n  category: string;\n  topics: ForumTopic[];\n}\n\ninterface CommunityEvent {\n  id: number;\n  title: string;\n  date: string;\n  time: string;\n  participants: number;\n  type: string;\n  description: string;\n  location?: string;\n}\n\nconst StudentCommunity = () => {\n  const [currentUser] = useState(() => {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  });\n\n  const [newPost, setNewPost] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Sample community data - in real app would come from API\n  const [posts] = useState<CommunityPost[]>([\n    {\n      id: 1,\n      author: \"Sarah Chen\",\n      avatar: \"SC\",\n      instrument: \"Piano\",\n      content: \"Just nailed Chopin's Nocturne in E-flat major after weeks of practice! The key was breaking down the ornaments slowly. Here's my performance:\",\n      audioFile: \"nocturne_performance.mp3\",\n      timestamp: \"2 hours ago\",\n      likes: 42,\n      comments: 8,\n      shares: 3,\n      category: 'achievement',\n      tags: ['classical', 'piano', 'chopin'],\n      isLiked: false\n    },\n    {\n      id: 2,\n      author: \"Mike Rodriguez\",\n      avatar: \"MR\",\n      instrument: \"Guitar\",\n      content: \"Looking for a bassist to jam with this weekend! I'm working on some funk grooves. Anyone in downtown area interested?\",\n      timestamp: \"4 hours ago\",\n      likes: 15,\n      comments: 12,\n      shares: 2,\n      category: 'help',\n      tags: ['jam-session', 'funk', 'guitar', 'collaboration'],\n      isLiked: true\n    },\n    {\n      id: 3,\n      author: \"Emily Watson\",\n      avatar: \"EW\",\n      instrument: \"Violin\",\n      content: \"Quick tip for fellow violinists: Use a pencil eraser to clean rosin buildup from strings. Works like magic! 🎻✨\",\n      timestamp: \"1 day ago\",\n      likes: 68,\n      comments: 15,\n      shares: 22,\n      category: 'showcase',\n      tags: ['tips', 'violin', 'maintenance'],\n      isLiked: false\n    }\n  ]);\n\n  const [studyGroups] = useState<StudyGroup[]>([\n    {\n      id: 1,\n      name: \"Jazz Improv Circle\",\n      description: \"Weekly jazz improvisation sessions for intermediate to advanced players.\",\n      members: 24,\n      category: \"Mixed\",\n      level: \"Intermediate\",\n      nextSession: \"Tomorrow, 7:00 PM\",\n      image: \"🎷\"\n    },\n    {\n      id: 2,\n      name: \"Classical Piano Study Group\",\n      description: \"Focused study of classical piano repertoire with peer feedback.\",\n      members: 18,\n      category: \"Piano\",\n      level: \"Intermediate\",\n      nextSession: \"Sunday, 3:00 PM\",\n      image: \"🎹\"\n    },\n    {\n      id: 3,\n      name: \"Singer-Songwriter Circle\",\n      description: \"Share original songs and get constructive feedback from fellow songwriters.\",\n      members: 31,\n      category: \"Voice/Guitar\",\n      level: \"All Levels\",\n      nextSession: \"Friday, 6:30 PM\",\n      image: \"🎤\"\n    }\n  ]);\n\n  const [forums] = useState<ForumCategory[]>([\n    {\n      category: \"Instruments\",\n      topics: [\n        { name: \"Guitar\", posts: 1242, icon: \"🎸\" },\n        { name: \"Piano\", posts: 987, icon: \"🎹\" },\n        { name: \"Violin\", posts: 543, icon: \"🎻\" },\n        { name: \"Drums\", posts: 678, icon: \"🥁\" },\n        { name: \"Voice\", posts: 432, icon: \"🎤\" }\n      ]\n    },\n    {\n      category: \"Genres\",\n      topics: [\n        { name: \"Classical\", posts: 765, icon: \"🎼\" },\n        { name: \"Jazz\", posts: 543, icon: \"🎷\" },\n        { name: \"Rock\", posts: 892, icon: \"🤘\" },\n        { name: \"Folk\", posts: 234, icon: \"🪕\" },\n        { name: \"Electronic\", posts: 456, icon: \"🎧\" }\n      ]\n    }\n  ]);\n\n  const [events] = useState<CommunityEvent[]>([\n    {\n      id: 1,\n      title: \"Virtual Open Mic Night\",\n      date: \"March 15, 2024\",\n      time: \"8:00 PM EST\",\n      participants: 45,\n      type: \"Virtual\",\n      description: \"Join us for a monthly open mic where musicians of all levels can perform and connect.\"\n    },\n    {\n      id: 2,\n      title: \"Guitar Workshop: Fingerpicking Techniques\",\n      date: \"March 18, 2024\",\n      time: \"2:00 PM PST\",\n      participants: 28,\n      type: \"Workshop\",\n      description: \"Master the art of fingerpicking with expert guitarist Maria Santos.\"\n    },\n    {\n      id: 3,\n      title: \"Local Jam Session - NYC\",\n      date: \"March 20, 2024\",\n      time: \"7:00 PM EST\",\n      participants: 12,\n      type: \"In-Person\",\n      location: \"Brooklyn Music Studio\",\n      description: \"In-person jam session for intermediate musicians in New York City area.\"\n    }\n  ]);\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'achievement': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'help': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'discussion': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300';\n      case 'showcase': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'achievement': return <Award className=\"h-4 w-4\" />;\n      case 'help': return <MessageCircle className=\"h-4 w-4\" />;\n      case 'discussion': return <Users className=\"h-4 w-4\" />;\n      case 'showcase': return <Star className=\"h-4 w-4\" />;\n      default: return <MessageCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n        \n        {/* Welcome Section */}\n        <section className=\"py-8 bg-gradient-to-r from-purple-600 via-blue-600 to-indigo-800\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center\">\n              <h1 className=\"text-3xl font-bold text-white mb-2\">\n                Student Community\n              </h1>\n              <p className=\"text-white/80\">\n                Connect, learn, and grow together with fellow music students\n              </p>\n            </div>\n          </div>\n        </section>\n\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold\">1,247</p>\n                    <p className=\"text-xs text-muted-foreground\">Active Students</p>\n                  </div>\n                  <Users className=\"h-8 w-8 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold\">89</p>\n                    <p className=\"text-xs text-muted-foreground\">Study Groups</p>\n                  </div>\n                  <BookOpen className=\"h-8 w-8 text-green-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold\">342</p>\n                    <p className=\"text-xs text-muted-foreground\">Posts Today</p>\n                  </div>\n                  <MessageCircle className=\"h-8 w-8 text-purple-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold\">156</p>\n                    <p className=\"text-xs text-muted-foreground\">Achievements Shared</p>\n                  </div>\n                  <Award className=\"h-8 w-8 text-yellow-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Tabs defaultValue=\"feed\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"feed\">Community Feed</TabsTrigger>\n              <TabsTrigger value=\"groups\">Practice Groups</TabsTrigger>\n              <TabsTrigger value=\"forums\">Forums</TabsTrigger>\n              <TabsTrigger value=\"events\">Events</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"feed\" className=\"space-y-6\">\n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                {/* Main Feed */}\n                <div className=\"lg:col-span-2 space-y-6\">\n                  {/* Create Post */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Plus className=\"h-5 w-5\" />\n                        Share Your Musical Journey\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <Textarea\n                          placeholder=\"What are you practicing today? Share your progress, ask questions, or start a discussion...\"\n                          value={newPost}\n                          onChange={(e) => setNewPost(e.target.value)}\n                          className=\"min-h-[100px]\"\n                        />\n                        <div className=\"flex justify-between items-center\">\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Volume2 className=\"h-4 w-4 mr-2\" />\n                              Add Audio\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Music className=\"h-4 w-4 mr-2\" />\n                              Add Tags\n                            </Button>\n                          </div>\n                          <Button className=\"gap-2\">\n                            <Send className=\"h-4 w-4\" />\n                            Post\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Posts */}\n                  <div className=\"space-y-4\">\n                    {posts.map((post) => (\n                      <Card key={post.id} className=\"hover:shadow-lg transition-shadow\">\n                        <CardContent className=\"p-6\">\n                          <div className=\"flex items-start gap-4\">\n                            <Avatar className=\"h-10 w-10\">\n                              <AvatarImage src={post.avatar} />\n                              <AvatarFallback>\n                                {post.avatar || post.author.split(' ').map(n => n[0]).join('')}\n                              </AvatarFallback>\n                            </Avatar>\n                            \n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <h4 className=\"font-semibold\">{post.author}</h4>\n                                {post.instrument && (\n                                  <Badge variant=\"secondary\">{post.instrument}</Badge>\n                                )}\n                                <span className=\"text-sm text-muted-foreground\">{post.timestamp}</span>\n                              </div>\n                              \n                              <p className=\"text-foreground mb-3\">{post.content}</p>\n                              \n                              {post.audioFile && (\n                                <div className=\"bg-muted p-3 rounded-lg mb-3 flex items-center gap-3\">\n                                  <Button size=\"icon\" variant=\"outline\">\n                                    <Play className=\"h-4 w-4\" />\n                                  </Button>\n                                  <div className=\"flex-1\">\n                                    <div className=\"font-medium\">{post.audioFile}</div>\n                                    <div className=\"text-sm text-muted-foreground\">Audio Recording • 2:43</div>\n                                  </div>\n                                  <Button size=\"icon\" variant=\"ghost\">\n                                    <Download className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                              )}\n                              \n                              <div className=\"flex flex-wrap gap-1 mb-3\">\n                                {post.tags.map((tag, index) => (\n                                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                    #{tag}\n                                  </Badge>\n                                ))}\n                              </div>\n                              \n                              <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n                                <button className=\"flex items-center gap-2 hover:text-primary transition-colors\">\n                                  <Heart className={`h-4 w-4 ${post.isLiked ? 'text-red-500 fill-red-500' : ''}`} />\n                                  {post.likes}\n                                </button>\n                                <button className=\"flex items-center gap-2 hover:text-primary transition-colors\">\n                                  <MessageCircle className=\"h-4 w-4\" />\n                                  {post.comments}\n                                </button>\n                                <button className=\"flex items-center gap-2 hover:text-primary transition-colors\">\n                                  <Share2 className=\"h-4 w-4\" />\n                                  {post.shares}\n                                </button>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Sidebar */}\n                <div className=\"space-y-6\">\n                  {/* Active Study Groups */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">My Study Groups</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {studyGroups.slice(0, 3).map((group) => (\n                          <div key={group.id} className=\"p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                            <h4 className=\"font-medium text-sm\">{group.name}</h4>\n                            <p className=\"text-xs text-muted-foreground mb-2\">{group.members} members</p>\n                            {group.nextSession && (\n                              <div className=\"flex items-center gap-1 text-xs text-primary\">\n                                <Clock className=\"h-3 w-3\" />\n                                {group.nextSession}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                          View All Groups\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Popular Tags */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Trending Topics</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {[\"#piano\", \"#guitar\", \"#practice-tips\", \"#jazz\", \"#classical\", \"#beginner\", \"#performance\"].map((tag) => (\n                          <Badge key={tag} variant=\"secondary\" className=\"cursor-pointer hover:bg-primary hover:text-primary-foreground transition-colors\">\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Featured Members */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Featured Members</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {[\n                        { name: \"Alex Chen\", instrument: \"Jazz Piano\", followers: \"2.3k\" },\n                        { name: \"Maria Santos\", instrument: \"Classical Guitar\", followers: \"1.8k\" },\n                        { name: \"David Kim\", instrument: \"Violin\", followers: \"1.5k\" }\n                      ].map((member, index) => (\n                        <div key={index} className=\"flex items-center gap-3\">\n                          <Avatar className=\"h-10 w-10\">\n                            <AvatarFallback>{member.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                          </Avatar>\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">{member.name}</div>\n                            <div className=\"text-sm text-muted-foreground\">{member.instrument}</div>\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">{member.followers}</div>\n                        </div>\n                      ))}\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"groups\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h2 className=\"text-2xl font-bold\">Practice Groups</h2>\n                  <p className=\"text-muted-foreground\">Join groups to practice and learn together</p>\n                </div>\n                <Button className=\"gap-2\">\n                  <Plus className=\"h-4 w-4\" />\n                  Create Group\n                </Button>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {studyGroups.map((group) => (\n                  <Card key={group.id} className=\"hover:shadow-lg transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"text-4xl mb-4 text-center\">{group.image}</div>\n                      <h3 className=\"text-xl font-semibold mb-2\">{group.name}</h3>\n                      <p className=\"text-muted-foreground text-sm mb-4\">{group.description}</p>\n                      \n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Users className=\"h-4 w-4\" />\n                          {group.members} members\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Music className=\"h-4 w-4\" />\n                          {group.category}\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Clock className=\"h-4 w-4\" />\n                          {group.nextSession}\n                        </div>\n                      </div>\n\n                      <Button className=\"w-full\" variant=\"outline\">Join Group</Button>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"forums\" className=\"space-y-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h2 className=\"text-2xl font-bold\">Discussion Forums</h2>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input placeholder=\"Search forums...\" className=\"pl-10 w-64\" />\n                  </div>\n                  <Button>New Topic</Button>\n                </div>\n              </div>\n\n              {forums.map((forum, index) => (\n                <Card key={index}>\n                  <CardHeader>\n                    <CardTitle>{forum.category}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {forum.topics.map((topic, topicIndex) => (\n                        <div \n                          key={topicIndex}\n                          className=\"flex items-center gap-3 p-3 rounded-lg border hover:bg-muted/50 cursor-pointer transition-colors\"\n                        >\n                          <div className=\"text-2xl\">{topic.icon}</div>\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">{topic.name}</div>\n                            <div className=\"text-sm text-muted-foreground\">{topic.posts} posts</div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </TabsContent>\n\n            <TabsContent value=\"events\" className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-2xl font-bold\">Community Events</h2>\n                <Button className=\"gap-2\">\n                  <Plus className=\"h-4 w-4\" />\n                  Create Event\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {events.map((event) => (\n                  <Card key={event.id} className=\"hover:shadow-lg transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between mb-4\">\n                        <h3 className=\"text-xl font-semibold\">{event.title}</h3>\n                        <Badge variant={event.type === \"Virtual\" ? \"secondary\" : event.type === \"Workshop\" ? \"default\" : \"outline\"}>\n                          {event.type}\n                        </Badge>\n                      </div>\n\n                      <p className=\"text-muted-foreground mb-4\">{event.description}</p>\n\n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Calendar className=\"h-4 w-4\" />\n                          {event.date} at {event.time}\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <Users className=\"h-4 w-4\" />\n                          {event.participants} participants\n                        </div>\n                        {event.location && (\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <MapPin className=\"h-4 w-4\" />\n                            {event.location}\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <Button className=\"flex-1\">Join Event</Button>\n                        <Button variant=\"outline\" size=\"icon\">\n                          <Share2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default StudentCommunity;","size_bytes":26103},"client/src/pages/StudentCourses.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Footer } from \"@/components/Footer\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  BookOpen, \n  Star, \n  Clock, \n  Play,\n  Search,\n  Filter,\n  Plus,\n  Music,\n  Users,\n  Award,\n  CheckCircle,\n  Headphones\n} from \"lucide-react\";\n\ninterface Course {\n  id: number;\n  title: string;\n  instructor: string;\n  category: string;\n  level: 'beginner' | 'intermediate' | 'advanced';\n  duration: string;\n  rating: number;\n  studentsCount: number;\n  price: number;\n  thumbnail: string;\n  description: string;\n  isEnrolled?: boolean;\n  progress?: number;\n  completedLessons?: number;\n  totalLessons?: number;\n}\n\nconst StudentCourses = () => {\n  const [, setLocation] = useLocation();\n  const [currentUser] = useState(() => {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  });\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [levelFilter, setLevelFilter] = useState(\"all\");\n\n  const handleCourseClick = (courseId: number) => {\n    setLocation(`/courses/${courseId}`);\n  };\n\n  // Fetch enrolled courses\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: ['/api/enrollments', { student: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Fetch all available courses\n  const { data: allCourses = [] } = useQuery<any[]>({\n    queryKey: ['/api/courses'],\n  });\n\n  // Transform data into Course interface\n  const enrolledCourses: Course[] = enrollments.map((enrollment: any) => ({\n    id: enrollment.courseId,\n    title: enrollment.courseTitle || 'Course Title',\n    instructor: enrollment.instructorName || 'Instructor',\n    category: enrollment.category || 'Music',\n    level: enrollment.level || 'beginner',\n    duration: enrollment.duration || '8 weeks',\n    rating: enrollment.courseRating || 4.5,\n    studentsCount: enrollment.studentsCount || 100,\n    price: parseFloat(enrollment.price) || 99,\n    thumbnail: enrollment.thumbnail || '',\n    description: enrollment.description || 'Course description',\n    isEnrolled: true,\n    progress: enrollment.completionPercentage || 0,\n    completedLessons: enrollment.completedLessons || 0,\n    totalLessons: enrollment.totalLessons || 10\n  }));\n\n  const availableCourses: Course[] = allCourses\n    .filter((course: any) => !enrollments.some((e: any) => e.courseId === course.id))\n    .map((course: any) => ({\n      id: course.id,\n      title: course.title,\n      instructor: course.mentorName || 'Instructor',\n      category: course.category,\n      level: course.level || 'beginner',\n      duration: course.duration || '8 weeks',\n      rating: course.averageRating || 4.5,\n      studentsCount: course.enrolledCount || 0,\n      price: parseFloat(course.price) || 99,\n      thumbnail: course.thumbnail || '',\n      description: course.description,\n      isEnrolled: false\n    }));\n\n  // Filter functions\n  const filterCourses = (courses: Course[]) => {\n    return courses.filter(course => {\n      const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           course.instructor.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesCategory = categoryFilter === \"all\" || course.category.toLowerCase() === categoryFilter.toLowerCase();\n      const matchesLevel = levelFilter === \"all\" || course.level === levelFilter;\n      return matchesSearch && matchesCategory && matchesLevel;\n    });\n  };\n\n  const filteredEnrolledCourses = filterCourses(enrolledCourses);\n  const filteredAvailableCourses = filterCourses(availableCourses);\n\n  const getLevelColor = (level: string) => {\n    switch (level) {\n      case 'beginner': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'intermediate': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'advanced': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'piano': return <Music className=\"h-4 w-4\" />;\n      case 'guitar': return <Music className=\"h-4 w-4\" />;\n      case 'violin': return <Music className=\"h-4 w-4\" />;\n      case 'drums': return <Music className=\"h-4 w-4\" />;\n      case 'vocals': return <Headphones className=\"h-4 w-4\" />;\n      default: return <BookOpen className=\"h-4 w-4\" />;\n    }\n  };\n\n  const CourseCard = ({ course, showProgress = false }: { course: Course; showProgress?: boolean }) => (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => handleCourseClick(course.id)}>\n      <div className=\"aspect-video bg-gradient-to-br from-blue-500 to-purple-600 relative\">\n        <div className=\"absolute inset-0 flex items-center justify-center text-white\">\n          {getCategoryIcon(course.category)}\n        </div>\n        <Badge className=\"absolute top-2 left-2\" variant=\"secondary\">\n          {course.category}\n        </Badge>\n        <Badge className={`absolute top-2 right-2 ${getLevelColor(course.level)}`}>\n          {course.level}\n        </Badge>\n        {showProgress && course.progress !== undefined && (\n          <Badge className=\"absolute bottom-2 right-2 bg-white/90 text-black\">\n            {course.progress}% Complete\n          </Badge>\n        )}\n      </div>\n      \n      <CardContent className=\"p-4\">\n        <div className=\"space-y-3\">\n          <div>\n            <h3 className=\"font-semibold line-clamp-2 mb-1\">{course.title}</h3>\n            <p className=\"text-sm text-muted-foreground\">by {course.instructor}</p>\n          </div>\n          \n          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n            {course.description}\n          </p>\n          \n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n              <span>{course.rating}</span>\n              <span className=\"text-muted-foreground\">({course.studentsCount})</span>\n            </div>\n            <div className=\"flex items-center gap-1 text-muted-foreground\">\n              <Clock className=\"h-3 w-3\" />\n              <span>{course.duration}</span>\n            </div>\n          </div>\n          \n          {showProgress && course.isEnrolled && (\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Progress</span>\n                <span>{course.progress}%</span>\n              </div>\n              <Progress value={course.progress} className=\"h-2\" />\n              <div className=\"text-sm text-muted-foreground\">\n                {course.completedLessons}/{course.totalLessons} lessons completed\n              </div>\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between pt-2\">\n            <span className=\"text-lg font-bold\">\n              {course.isEnrolled ? 'Enrolled' : `$${course.price}`}\n            </span>\n            <Button size=\"sm\" className=\"gap-2\">\n              {course.isEnrolled ? (\n                <>\n                  <Play className=\"h-4 w-4\" />\n                  Continue\n                </>\n              ) : (\n                <>\n                  <Plus className=\"h-4 w-4\" />\n                  Enroll\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">My Courses</h1>\n          <p className=\"text-muted-foreground\">\n            Continue your learning journey or explore new courses\n          </p>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search courses...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n              \n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"piano\">Piano</SelectItem>\n                  <SelectItem value=\"guitar\">Guitar</SelectItem>\n                  <SelectItem value=\"violin\">Violin</SelectItem>\n                  <SelectItem value=\"drums\">Drums</SelectItem>\n                  <SelectItem value=\"vocals\">Vocals</SelectItem>\n                  <SelectItem value=\"theory\">Music Theory</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={levelFilter} onValueChange={setLevelFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Levels</SelectItem>\n                  <SelectItem value=\"beginner\">Beginner</SelectItem>\n                  <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                  <SelectItem value=\"advanced\">Advanced</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Course Tabs */}\n        <Tabs defaultValue=\"enrolled\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"enrolled\" className=\"gap-2\">\n              <CheckCircle className=\"h-4 w-4\" />\n              My Courses ({filteredEnrolledCourses.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"available\" className=\"gap-2\">\n              <BookOpen className=\"h-4 w-4\" />\n              Available Courses ({filteredAvailableCourses.length})\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Enrolled Courses */}\n          <TabsContent value=\"enrolled\">\n            {filteredEnrolledCourses.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No enrolled courses found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {enrolledCourses.length === 0 \n                      ? \"You haven't enrolled in any courses yet. Start learning today!\"\n                      : \"No courses match your current search criteria.\"\n                    }\n                  </p>\n                  <Button>Browse Available Courses</Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredEnrolledCourses.map((course) => (\n                  <CourseCard key={course.id} course={course} showProgress={true} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Available Courses */}\n          <TabsContent value=\"available\">\n            {filteredAvailableCourses.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Search className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No courses found</h3>\n                  <p className=\"text-muted-foreground\">\n                    No courses match your current search criteria. Try adjusting your filters.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredAvailableCourses.map((course) => (\n                  <CourseCard key={course.id} course={course} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default StudentCourses;","size_bytes":13799},"client/src/pages/StudentDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Footer } from \"@/components/Footer\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Calendar, \n  BookOpen, \n  Star, \n  Trophy, \n  TrendingUp, \n  Clock, \n  Play,\n  Plus,\n  Video,\n  FileText,\n  Award,\n  Settings,\n  Users,\n  Target,\n  Headphones,\n  Music\n} from \"lucide-react\";\n\ninterface StudentStats {\n  coursesEnrolled: number;\n  coursesCompleted: number;\n  totalStudyHours: number;\n  averageProgress: number;\n  certificatesEarned: number;\n  currentStreak: number;\n}\n\ninterface EnrolledCourse {\n  id: number;\n  title: string;\n  instructor: string;\n  progress: number;\n  totalLessons: number;\n  completedLessons: number;\n  nextLesson: string;\n  category: string;\n  rating: number;\n  thumbnail: string;\n}\n\ninterface UpcomingSession {\n  id: number;\n  title: string;\n  instructor: string;\n  date: string;\n  time: string;\n  type: 'live' | 'practice' | 'assessment';\n  status: 'scheduled' | 'ongoing' | 'completed';\n}\n\ninterface Achievement {\n  id: number;\n  title: string;\n  description: string;\n  icon: string;\n  earnedDate: string;\n  category: 'progress' | 'skill' | 'participation';\n}\n\nconst StudentDashboard = () => {\n  // Get current user from localStorage\n  const [currentUser] = useState(() => {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  });\n\n  // Fetch student enrollments\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: ['/api/enrollments', { student: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Fetch student courses\n  const { data: studentCourses = [] } = useQuery<any[]>({\n    queryKey: ['/api/courses', { enrolled: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Fetch upcoming sessions\n  const { data: upcomingSessions = [] } = useQuery<any[]>({\n    queryKey: ['/api/live-sessions', { student: currentUser?.id, upcoming: true }],\n    enabled: !!currentUser?.id\n  });\n\n  // Calculate student stats from real data\n  const stats: StudentStats = {\n    coursesEnrolled: enrollments.length,\n    coursesCompleted: enrollments.filter((e: any) => e.completionPercentage === 100).length,\n    totalStudyHours: enrollments.reduce((total: number, e: any) => total + (e.studyHours || 0), 0),\n    averageProgress: enrollments.length > 0 ? \n      enrollments.reduce((total: number, e: any) => total + (e.completionPercentage || 0), 0) / enrollments.length : 0,\n    certificatesEarned: enrollments.filter((e: any) => e.certificateEarned).length,\n    currentStreak: 7 // This would come from actual tracking\n  };\n\n  // Transform enrollment data into course cards\n  const enrolledCourses: EnrolledCourse[] = enrollments.map((enrollment: any) => ({\n    id: enrollment.courseId,\n    title: enrollment.courseTitle || 'Course Title',\n    instructor: enrollment.instructorName || 'Instructor',\n    progress: enrollment.completionPercentage || 0,\n    totalLessons: enrollment.totalLessons || 10,\n    completedLessons: enrollment.completedLessons || 0,\n    nextLesson: enrollment.nextLesson || 'Introduction',\n    category: enrollment.category || 'Music',\n    rating: enrollment.courseRating || 4.5,\n    thumbnail: enrollment.thumbnail || ''\n  }));\n\n  // Sample achievements - in real app would come from API\n  const [achievements] = useState<Achievement[]>([\n    {\n      id: 1,\n      title: \"First Course Started\",\n      description: \"Enrolled in your first music course\",\n      icon: \"🎵\",\n      earnedDate: \"2025-01-15\",\n      category: 'progress'\n    },\n    {\n      id: 2,\n      title: \"Week Warrior\",\n      description: \"Practiced for 7 consecutive days\",\n      icon: \"🔥\",\n      earnedDate: \"2025-01-20\",\n      category: 'participation'\n    },\n    {\n      id: 3,\n      title: \"Scale Master\",\n      description: \"Completed all basic scale exercises\",\n      icon: \"🎼\",\n      earnedDate: \"2025-01-25\",\n      category: 'skill'\n    }\n  ]);\n\n  const getProgressColor = (progress: number) => {\n    if (progress >= 80) return 'bg-green-500';\n    if (progress >= 50) return 'bg-blue-500';\n    if (progress >= 20) return 'bg-yellow-500';\n    return 'bg-gray-500';\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'piano': return <Music className=\"h-4 w-4\" />;\n      case 'guitar': return <Music className=\"h-4 w-4\" />;\n      case 'violin': return <Music className=\"h-4 w-4\" />;\n      case 'drums': return <Music className=\"h-4 w-4\" />;\n      case 'vocals': return <Headphones className=\"h-4 w-4\" />;\n      default: return <BookOpen className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n      \n      {/* Welcome Section */}\n      <section className=\"py-8 bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Avatar className=\"h-16 w-16\">\n                <AvatarImage src=\"\" />\n                <AvatarFallback className=\"text-lg font-bold\">\n                  {currentUser?.firstName?.[0]}{currentUser?.lastName?.[0]}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div>\n                <h1 className=\"text-2xl font-bold text-white\">\n                  Welcome back, {currentUser?.firstName}!\n                </h1>\n                <p className=\"text-white/80\">Ready to continue your musical journey?</p>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"secondary\" \n                className=\"gap-2\"\n                onClick={() => window.location.href = '/student-achievements'}\n              >\n                <Trophy className=\"h-4 w-4\" />\n                Achievements\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"gap-2 bg-white/10 border-white/30 text-white hover:bg-white/20\"\n                onClick={() => window.location.href = '/community'}\n              >\n                <Users className=\"h-4 w-4\" />\n                Community\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"gap-2 bg-white/10 border-white/30 text-white hover:bg-white/20\"\n                onClick={() => window.location.href = '/tools'}\n              >\n                <Music className=\"h-4 w-4\" />\n                Practice Tools\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 mb-8\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{stats.coursesEnrolled}</p>\n                  <p className=\"text-xs text-muted-foreground\">Courses Enrolled</p>\n                </div>\n                <BookOpen className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{stats.coursesCompleted}</p>\n                  <p className=\"text-xs text-muted-foreground\">Completed</p>\n                </div>\n                <Trophy className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{Math.round(stats.averageProgress)}%</p>\n                  <p className=\"text-xs text-muted-foreground\">Avg Progress</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{stats.totalStudyHours}h</p>\n                  <p className=\"text-xs text-muted-foreground\">Study Hours</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{stats.certificatesEarned}</p>\n                  <p className=\"text-xs text-muted-foreground\">Certificates</p>\n                </div>\n                <Award className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{stats.currentStreak}</p>\n                  <p className=\"text-xs text-muted-foreground\">Day Streak</p>\n                </div>\n                <Target className=\"h-8 w-8 text-red-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold\">Quick Actions</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => window.location.href = '/student-courses'}>\n              <CardContent className=\"p-6 text-center\">\n                <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-blue-500\" />\n                <h3 className=\"font-semibold mb-2\">My Courses</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Continue learning and browse new courses\n                </p>\n                <Badge variant=\"secondary\">{stats.coursesEnrolled} enrolled</Badge>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => window.location.href = '/student-sessions'}>\n              <CardContent className=\"p-6 text-center\">\n                <Video className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n                <h3 className=\"font-semibold mb-2\">Live Sessions</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Join live classes and book sessions\n                </p>\n                <Badge variant=\"secondary\">{upcomingSessions.length} upcoming</Badge>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => window.location.href = '/student-progress'}>\n              <CardContent className=\"p-6 text-center\">\n                <TrendingUp className=\"h-12 w-12 mx-auto mb-4 text-purple-500\" />\n                <h3 className=\"font-semibold mb-2\">Progress</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Track your learning journey\n                </p>\n                <Badge variant=\"secondary\">{Math.round(stats.averageProgress)}% complete</Badge>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => window.location.href = '/community'}>\n              <CardContent className=\"p-6 text-center\">\n                <Users className=\"h-12 w-12 mx-auto mb-4 text-orange-500\" />\n                <h3 className=\"font-semibold mb-2\">Community</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Connect with other students\n                </p>\n                <Badge variant=\"secondary\">Join discussions</Badge>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold\">Recent Activity</h2>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Recent Courses */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  Continue Learning\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {enrolledCourses.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <BookOpen className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground mb-4\">No courses enrolled yet</p>\n                    <Button size=\"sm\" onClick={() => window.location.href = '/student-courses'}>\n                      Browse Courses\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {enrolledCourses.slice(0, 3).map((course) => (\n                      <div key={course.id} className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                        <div className=\"p-2 rounded bg-blue-100 dark:bg-blue-900\">\n                          {getCategoryIcon(course.category)}\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">{course.title}</p>\n                          <div className=\"flex items-center gap-2 mt-1\">\n                            <Progress value={course.progress} className=\"h-1 flex-1\" />\n                            <span className=\"text-xs text-muted-foreground\">{course.progress}%</span>\n                          </div>\n                        </div>\n                        <Button size=\"sm\" variant=\"ghost\">\n                          <Play className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    ))}\n                    {enrolledCourses.length > 3 && (\n                      <div className=\"text-center pt-2\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = '/student-courses'}>\n                          View All Courses\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Upcoming Sessions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5\" />\n                  Upcoming Sessions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {upcomingSessions.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Video className=\"h-8 w-8 mx-auto mb-2 text-muted-foreground\" />\n                    <p className=\"text-muted-foreground mb-4\">No upcoming sessions</p>\n                    <Button size=\"sm\" onClick={() => window.location.href = '/student-sessions'}>\n                      Book Session\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {upcomingSessions.slice(0, 3).map((session: any) => (\n                      <div key={session.id} className=\"flex items-center gap-3 p-3 border rounded-lg hover:bg-muted/50 transition-colors\">\n                        <div className=\"p-2 rounded bg-green-100 dark:bg-green-900\">\n                          <Video className=\"h-4 w-4 text-green-600\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium text-sm\">{session.title}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {session.date} at {session.time}\n                          </p>\n                        </div>\n                        <Button size=\"sm\" variant=\"ghost\">\n                          Join\n                        </Button>\n                      </div>\n                    ))}\n                    {upcomingSessions.length > 3 && (\n                      <div className=\"text-center pt-2\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = '/student-sessions'}>\n                          View All Sessions\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default StudentDashboard;","size_bytes":17949},"client/src/pages/StudentMentors.tsx":{"content":"import { useState } from \"react\";\nimport { Star, MapPin, Clock, Video, Calendar, MessageCircle, Award, TrendingUp, UserCheck, Filter, Search, Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\n// Create apiRequest function inline since it doesn't exist yet\nconst apiRequest = async (url: string, options: { method: string; body: any }) => {\n  const response = await fetch(url, {\n    method: options.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(options.body),\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    console.error('API Error:', response.status, errorData);\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n// Define extended mentor type with user data\ninterface MentorWithUser {\n  id: number;\n  userId: number | null;\n  firstName: string | null;\n  lastName: string | null;\n  specialization: string | null;\n  experience: string | null;\n  hourlyRate: string | null;\n  location: string | null;\n  languages: string[] | null;\n  badges: any;\n  bio: string | null;\n  availability: any;\n  totalStudents: number | null;\n  totalReviews: number | null;\n  averageRating: string | null;\n  nextAvailableSession: any;\n  isVerified: boolean | null;\n  createdAt: Date | null;\n}\nimport { EmptyState } from \"@/components/EmptyState\";\nimport { MentorCardSkeleton, LoadingGrid } from \"@/components/LoadingSkeletons\";\n\n// Form schema for mentorship request\nconst mentorshipRequestSchema = z.object({\n  message: z.string().min(10, \"Please provide a detailed message (at least 10 characters)\").max(500, \"Message too long\"),\n});\n\ntype MentorshipRequestForm = z.infer<typeof mentorshipRequestSchema>;\n\nexport const StudentMentors = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedSpecialization, setSelectedSpecialization] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"rating\");\n  const [selectedMentor, setSelectedMentor] = useState<MentorWithUser | null>(null);\n  const [requestDialogOpen, setRequestDialogOpen] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get current user from localStorage\n  const [currentUser] = useState(() => {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  });\n\n  const { data: mentors, isLoading, error } = useQuery<MentorWithUser[]>({\n    queryKey: ['/api/mentors'],\n  });\n\n  // Form for mentorship request\n  const form = useForm<MentorshipRequestForm>({\n    resolver: zodResolver(mentorshipRequestSchema),\n    defaultValues: {\n      message: \"\",\n    },\n  });\n\n  // Mutation for creating mentorship request\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: { mentorId: number; studentId: number; message: string }) => {\n      console.log('API Request data:', data);\n      return apiRequest(`/api/mentorship-requests`, {\n        method: \"POST\",\n        body: data,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Request Sent!\",\n        description: \"Your mentorship request has been sent successfully. The mentor will be notified.\",\n      });\n      setRequestDialogOpen(false);\n      form.reset();\n      setSelectedMentor(null);\n      // Optionally refetch mentorship requests\n      queryClient.invalidateQueries({ queryKey: ['/api/mentorship-requests'] });\n    },\n    onError: (error: any) => {\n      console.error('Mentorship request error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send mentorship request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter and sort mentors based on search and filters\n  const filteredMentors = mentors?.filter(mentor => {\n    const matchesSearch = mentor.bio?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         mentor.specialization?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSpecialization = selectedSpecialization === \"all\" || \n                                 mentor.specialization?.toLowerCase().includes(selectedSpecialization.toLowerCase());\n    return matchesSearch && matchesSpecialization;\n  }).sort((a, b) => {\n    if (sortBy === \"rating\") return (parseFloat(b.averageRating || \"0\") - parseFloat(a.averageRating || \"0\"));\n    if (sortBy === \"price\") return (parseFloat(a.hourlyRate || \"0\") - parseFloat(b.hourlyRate || \"0\"));\n    if (sortBy === \"experience\") return (b.totalStudents || 0) - (a.totalStudents || 0);\n    return 0;\n  });\n\n  const specializations = [\"Piano\", \"Guitar\", \"Violin\", \"Drums\", \"Voice\", \"Jazz\", \"Classical\"];\n\n  const handleRequestMentorship = (mentor: MentorWithUser) => {\n    if (!currentUser) {\n      toast({\n        title: \"Please Sign In\",\n        description: \"You need to be signed in to request mentorship.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setSelectedMentor(mentor);\n    setRequestDialogOpen(true);\n  };\n\n  const handleSendMessage = (mentorId: number) => {\n    if (!currentUser) {\n      toast({\n        title: \"Please Sign In\",\n        description: \"You need to be signed in to message mentors.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    // Navigate to mentor interactions page\n    window.location.href = `/mentor-interactions`;\n  };\n\n  const onSubmitRequest = async (data: MentorshipRequestForm) => {\n    if (!currentUser || !selectedMentor) {\n      console.error('Missing user or mentor data');\n      return;\n    }\n    \n    if (!selectedMentor.userId) {\n      console.error('Selected mentor missing userId');\n      toast({\n        title: \"Error\",\n        description: \"Invalid mentor data. Please try selecting the mentor again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const requestData = {\n      mentorId: selectedMentor.userId,\n      studentId: typeof currentUser.id === 'string' ? parseInt(currentUser.id) : currentUser.id,\n      message: data.message,\n    };\n    \n    console.log('Submitting mentorship request:', {\n      ...requestData,\n      selectedMentor\n    });\n    \n    createRequestMutation.mutate(requestData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Find Your Perfect Mentor</h1>\n          <p className=\"text-muted-foreground\">\n            Loading expert musicians and teachers...\n          </p>\n        </div>\n        <LoadingGrid count={6} className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <MentorCardSkeleton />\n        </LoadingGrid>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"text-center py-20\">\n          <div className=\"text-lg text-red-600\">Error loading mentors. Please try again later.</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Find Your Perfect Mentor</h1>\n        <p className=\"text-muted-foreground\">\n          Connect with expert musicians for personalized lessons and guidance\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"mb-8\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by instrument, style, or expertise...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <Select value={selectedSpecialization} onValueChange={setSelectedSpecialization}>\n              <SelectTrigger className=\"w-48\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue placeholder=\"Specialization\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Instruments</SelectItem>\n                {specializations.map(spec => (\n                  <SelectItem key={spec} value={spec.toLowerCase()}>{spec}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                <SelectItem value=\"price\">Lowest Price</SelectItem>\n                <SelectItem value=\"experience\">Most Experienced</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Mentors Grid */}\n      {filteredMentors && filteredMentors.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredMentors.map((mentor) => (\n            <Card key={mentor.id} className=\"group hover:shadow-musical transition-all duration-300 hover:-translate-y-1\">\n              <CardContent className=\"p-6\">\n                {/* Mentor Header */}\n                <div className=\"flex items-start gap-4 mb-4\">\n                  <Avatar className=\"h-16 w-16\">\n                    <AvatarFallback className=\"text-lg font-semibold bg-gradient-hero text-white\">\n                      {mentor.specialization?.charAt(0) || \"M\"}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"flex-1\">\n                    <h3 className=\"text-xl font-semibold group-hover:text-primary transition-colors\">\n                      {mentor.firstName && mentor.lastName \n                        ? `${mentor.firstName} ${mentor.lastName}`\n                        : `${mentor.specialization?.split(',')[0]?.trim() || 'Music'} Mentor`\n                      }\n                    </h3>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Star className=\"h-4 w-4 fill-secondary text-secondary\" />\n                      <span className=\"font-medium\">{mentor.averageRating || \"4.8\"}</span>\n                      <span className=\"text-muted-foreground text-sm\">\n                        ({mentor.totalReviews || 0} reviews)\n                      </span>\n                    </div>\n                    {mentor.location && (\n                      <div className=\"flex items-center gap-1 mt-1 text-sm text-muted-foreground\">\n                        <MapPin className=\"h-3 w-3\" />\n                        {mentor.location}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Specialization Tags */}\n                <div className=\"mb-4\">\n                  <div className=\"flex flex-wrap gap-1 mb-2\">\n                    {mentor.specialization?.split(',').map((spec, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                        {spec.trim()}\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <TrendingUp className=\"h-4 w-4\" />\n                    {mentor.totalStudents || 0} students taught\n                  </div>\n                </div>\n\n                {/* Bio */}\n                {mentor.bio && (\n                  <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\">\n                    {mentor.bio}\n                  </p>\n                )}\n\n                {/* Experience & Languages */}\n                <div className=\"space-y-2 mb-4 text-sm\">\n                  {mentor.experience && (\n                    <div className=\"flex items-center gap-2\">\n                      <Award className=\"h-4 w-4 text-primary\" />\n                      <span>{mentor.experience}</span>\n                    </div>\n                  )}\n                  {mentor.languages && mentor.languages.length > 0 && (\n                    <div className=\"flex items-center gap-2\">\n                      <MessageCircle className=\"h-4 w-4 text-primary\" />\n                      <span>Speaks: {mentor.languages.join(', ')}</span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Pricing & Actions */}\n                <div className=\"flex items-center justify-between pt-4 border-t\">\n                  <div className=\"text-lg font-bold text-primary\">\n                    ${mentor.hourlyRate || 50}/hour\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => handleSendMessage(mentor.id)}\n                    >\n                      <MessageCircle className=\"h-4 w-4\" />\n                    </Button>\n                    <Button \n                      size=\"sm\" \n                      className=\"shadow-musical\"\n                      onClick={() => handleRequestMentorship(mentor)}\n                    >\n                      <Send className=\"mr-2 h-4 w-4\" />\n                      Request\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <EmptyState\n          icon={UserCheck}\n          title=\"No Mentors Found\"\n          description=\"Try adjusting your search terms or filters to find the perfect mentor for your musical journey.\"\n          actionText=\"Clear Filters\"\n          onAction={() => {\n            setSearchTerm(\"\");\n            setSelectedSpecialization(\"all\");\n            setSortBy(\"rating\");\n          }}\n        />\n      )}\n\n      {/* Stats Section */}\n      {filteredMentors && filteredMentors.length > 0 && (\n        <div className=\"mt-12 p-6 bg-muted/30 rounded-xl\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">{filteredMentors.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Expert Mentors</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">\n                {filteredMentors.reduce((sum, mentor) => sum + (mentor.totalStudents || 0), 0)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Students Taught</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">\n                {(filteredMentors.reduce((sum, mentor) => sum + parseFloat(mentor.averageRating || \"0\"), 0) / filteredMentors.length).toFixed(1)}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Average Rating</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-primary\">24/7</div>\n              <div className=\"text-sm text-muted-foreground\">Support Available</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Mentorship Request Dialog */}\n      <Dialog open={requestDialogOpen} onOpenChange={setRequestDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Request Mentorship</DialogTitle>\n            <DialogDescription>\n              Send a mentorship request to {selectedMentor?.firstName && selectedMentor?.lastName \n                ? `${selectedMentor.firstName} ${selectedMentor.lastName}`\n                : 'this mentor'\n              }. Tell them about your musical goals and why you'd like their guidance.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitRequest)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"message\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Your Message</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Hi! I'm interested in learning [instrument/skill] and would love to have you as my mentor. My current level is... My goals are...\"\n                        className=\"min-h-[120px]\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Introduce yourself and explain what you hope to achieve through mentorship.\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <DialogFooter>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setRequestDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createRequestMutation.isPending}\n                  className=\"shadow-musical\"\n                >\n                  {createRequestMutation.isPending ? \"Sending...\" : \"Send Request\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default StudentMentors;","size_bytes":18645},"client/src/pages/StudentProgress.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Footer } from \"@/components/Footer\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  TrendingUp, \n  Award, \n  Clock, \n  Target,\n  Calendar,\n  BookOpen,\n  Star,\n  Trophy,\n  Activity,\n  BarChart3,\n  CheckCircle,\n  Music\n} from \"lucide-react\";\n\ninterface ProgressData {\n  overallProgress: number;\n  coursesCompleted: number;\n  totalCourses: number;\n  studyHours: number;\n  currentStreak: number;\n  achievements: number;\n  weeklyGoal: number;\n  weeklyProgress: number;\n}\n\ninterface CourseProgress {\n  id: number;\n  title: string;\n  category: string;\n  progress: number;\n  timeSpent: number;\n  lastActivity: string;\n  nextMilestone: string;\n}\n\ninterface WeeklyActivity {\n  day: string;\n  hours: number;\n  completed: boolean;\n}\n\nconst StudentProgress = () => {\n  const [currentUser] = useState(() => {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  });\n\n  // Fetch student progress data\n  const { data: enrollments = [] } = useQuery<any[]>({\n    queryKey: ['/api/enrollments', { student: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Calculate progress metrics\n  const progressData: ProgressData = {\n    overallProgress: enrollments.length > 0 ? \n      enrollments.reduce((total: number, e: any) => total + (e.completionPercentage || 0), 0) / enrollments.length : 0,\n    coursesCompleted: enrollments.filter((e: any) => e.completionPercentage === 100).length,\n    totalCourses: enrollments.length,\n    studyHours: enrollments.reduce((total: number, e: any) => total + (e.studyHours || 0), 0),\n    currentStreak: 7, // Would come from actual tracking\n    achievements: 12, // Would come from achievements system\n    weeklyGoal: 10, // Hours per week\n    weeklyProgress: 8.5 // Current week progress\n  };\n\n  // Transform enrollment data\n  const courseProgress: CourseProgress[] = enrollments.map((enrollment: any) => ({\n    id: enrollment.courseId,\n    title: enrollment.courseTitle || 'Course Title',\n    category: enrollment.category || 'Music',\n    progress: enrollment.completionPercentage || 0,\n    timeSpent: enrollment.studyHours || 0,\n    lastActivity: enrollment.lastActivity || '2 days ago',\n    nextMilestone: enrollment.nextMilestone || 'Complete Module 3'\n  }));\n\n  // Sample weekly activity data\n  const weeklyActivity: WeeklyActivity[] = [\n    { day: 'Mon', hours: 1.5, completed: true },\n    { day: 'Tue', hours: 2.0, completed: true },\n    { day: 'Wed', hours: 1.0, completed: true },\n    { day: 'Thu', hours: 2.5, completed: true },\n    { day: 'Fri', hours: 1.5, completed: true },\n    { day: 'Sat', hours: 0, completed: false },\n    { day: 'Sun', hours: 0, completed: false }\n  ];\n\n  const getProgressColor = (progress: number) => {\n    if (progress >= 80) return 'bg-green-500';\n    if (progress >= 50) return 'bg-blue-500';\n    if (progress >= 20) return 'bg-yellow-500';\n    return 'bg-gray-500';\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: { [key: string]: string } = {\n      'piano': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',\n      'guitar': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',\n      'violin': 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',\n      'drums': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300',\n      'vocals': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',\n      'theory': 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300'\n    };\n    return colors[category.toLowerCase()] || colors['theory'];\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Learning Progress</h1>\n          <p className=\"text-muted-foreground\">\n            Track your musical journey and celebrate your achievements\n          </p>\n        </div>\n\n        {/* Overview Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{Math.round(progressData.overallProgress)}%</p>\n                  <p className=\"text-sm text-muted-foreground\">Overall Progress</p>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-blue-500\" />\n              </div>\n              <Progress value={progressData.overallProgress} className=\"mt-3\" />\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{progressData.coursesCompleted}/{progressData.totalCourses}</p>\n                  <p className=\"text-sm text-muted-foreground\">Courses Completed</p>\n                </div>\n                <Trophy className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{progressData.studyHours}h</p>\n                  <p className=\"text-sm text-muted-foreground\">Total Study Time</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{progressData.currentStreak}</p>\n                  <p className=\"text-sm text-muted-foreground\">Day Streak</p>\n                </div>\n                <Target className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Progress Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"courses\">Course Progress</TabsTrigger>\n            <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n            <TabsTrigger value=\"goals\">Goals</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Weekly Progress */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    This Week's Progress\n                  </CardTitle>\n                  <CardDescription>\n                    {progressData.weeklyProgress} / {progressData.weeklyGoal} hours completed\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <Progress \n                      value={(progressData.weeklyProgress / progressData.weeklyGoal) * 100} \n                      className=\"h-3\"\n                    />\n                    <div className=\"grid grid-cols-7 gap-2\">\n                      {weeklyActivity.map((day) => (\n                        <div key={day.day} className=\"text-center\">\n                          <div className={`w-full h-8 rounded text-xs flex items-center justify-center mb-1 ${\n                            day.completed ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : \n                            'bg-gray-100 text-gray-500 dark:bg-gray-800 dark:text-gray-400'\n                          }`}>\n                            {day.hours > 0 ? `${day.hours}h` : '-'}\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\">{day.day}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Achievements Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Award className=\"h-5 w-5\" />\n                    Recent Achievements\n                  </CardTitle>\n                  <CardDescription>\n                    {progressData.achievements} total achievements earned\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                      <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white text-sm\">\n                        🎵\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">First Course Completed</p>\n                        <p className=\"text-xs text-muted-foreground\">2 days ago</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                      <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white text-sm\">\n                        🔥\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">7-Day Streak</p>\n                        <p className=\"text-xs text-muted-foreground\">1 week ago</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-3 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                      <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm\">\n                        🎼\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">Scale Master</p>\n                        <p className=\"text-xs text-muted-foreground\">2 weeks ago</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Course Progress Tab */}\n          <TabsContent value=\"courses\">\n            <div className=\"space-y-4\">\n              {courseProgress.length === 0 ? (\n                <Card>\n                  <CardContent className=\"text-center py-12\">\n                    <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">No courses enrolled</h3>\n                    <p className=\"text-muted-foreground\">\n                      Start learning by enrolling in your first course!\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                courseProgress.map((course) => (\n                  <Card key={course.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-2 rounded-lg bg-blue-100 dark:bg-blue-900\">\n                            <Music className=\"h-5 w-5 text-blue-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">{course.title}</h3>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Badge variant=\"outline\" className={getCategoryColor(course.category)}>\n                                {course.category}\n                              </Badge>\n                              <span className=\"text-sm text-muted-foreground\">\n                                Last activity: {course.lastActivity}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"text-2xl font-bold\">{course.progress}%</p>\n                          <p className=\"text-sm text-muted-foreground\">{course.timeSpent}h spent</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Progress value={course.progress} className=\"h-2\" />\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Next milestone:</span>\n                          <span className=\"font-medium\">{course.nextMilestone}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Activity Tab */}\n          <TabsContent value=\"activity\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Learning Activity\n                </CardTitle>\n                <CardDescription>\n                  Your practice and study patterns over time\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Activity Chart</h3>\n                  <p className=\"text-muted-foreground\">\n                    Detailed activity tracking and analytics coming soon\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Goals Tab */}\n          <TabsContent value=\"goals\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"h-5 w-5\" />\n                    Weekly Goal\n                  </CardTitle>\n                  <CardDescription>\n                    Practice at least {progressData.weeklyGoal} hours per week\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Progress this week</span>\n                      <span className=\"font-semibold\">\n                        {progressData.weeklyProgress} / {progressData.weeklyGoal} hours\n                      </span>\n                    </div>\n                    <Progress \n                      value={(progressData.weeklyProgress / progressData.weeklyGoal) * 100} \n                      className=\"h-3\"\n                    />\n                    <div className=\"flex justify-between text-sm text-muted-foreground\">\n                      <span>\n                        {Math.round(((progressData.weeklyProgress / progressData.weeklyGoal) * 100))}% complete\n                      </span>\n                      <span>\n                        {Math.max(0, progressData.weeklyGoal - progressData.weeklyProgress).toFixed(1)} hours remaining\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-5 w-5\" />\n                    Monthly Targets\n                  </CardTitle>\n                  <CardDescription>\n                    Goals to achieve this month\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3\">\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      <span className=\"line-through text-muted-foreground\">Complete 1 course</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-5 w-5 border-2 border-gray-300 rounded-full\" />\n                      <span>Practice 40 hours total</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-5 w-5 border-2 border-gray-300 rounded-full\" />\n                      <span>Earn 3 new achievements</span>\n                    </div>\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"h-5 w-5 border-2 border-gray-300 rounded-full\" />\n                      <span>Maintain 15-day streak</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default StudentProgress;","size_bytes":18445},"client/src/pages/StudentSessions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Footer } from \"@/components/Footer\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Video, \n  Calendar, \n  Clock, \n  Users,\n  Plus,\n  Play,\n  User,\n  BookOpen,\n  MessageCircle,\n  Star,\n  Phone,\n  Settings\n} from \"lucide-react\";\n\ninterface LiveSession {\n  id: number;\n  title: string;\n  instructor: string;\n  instructorAvatar?: string;\n  date: string;\n  time: string;\n  duration: number;\n  type: 'one-on-one' | 'group' | 'masterclass';\n  status: 'scheduled' | 'ongoing' | 'completed' | 'cancelled';\n  participantCount?: number;\n  maxParticipants?: number;\n  description: string;\n  meetingLink?: string;\n  category: string;\n}\n\nconst StudentSessions = () => {\n  const [currentUser] = useState(() => {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  });\n\n  // Fetch student's live sessions\n  const { data: sessions = [] } = useQuery<any[]>({\n    queryKey: ['/api/live-sessions', { student: currentUser?.id }],\n    enabled: !!currentUser?.id\n  });\n\n  // Transform API data to LiveSession interface\n  const liveSessions: LiveSession[] = sessions.map((session: any) => ({\n    id: session.id,\n    title: session.title,\n    instructor: session.mentorName || 'Instructor',\n    instructorAvatar: session.mentorAvatar || '',\n    date: new Date(session.scheduledDate).toLocaleDateString(),\n    time: new Date(session.scheduledDate).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n    duration: session.durationMinutes || 60,\n    type: session.type || 'one-on-one',\n    status: session.status,\n    participantCount: session.participantCount || 1,\n    maxParticipants: session.maxParticipants || 1,\n    description: session.description || 'Live learning session',\n    meetingLink: session.meetingLink,\n    category: session.category || 'Music'\n  }));\n\n  // Separate sessions by status\n  const upcomingSessions = liveSessions.filter(s => s.status === 'scheduled');\n  const ongoingSessions = liveSessions.filter(s => s.status === 'ongoing');\n  const completedSessions = liveSessions.filter(s => s.status === 'completed');\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'ongoing': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'completed': return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n      case 'cancelled': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'one-on-one': return <User className=\"h-4 w-4\" />;\n      case 'group': return <Users className=\"h-4 w-4\" />;\n      case 'masterclass': return <BookOpen className=\"h-4 w-4\" />;\n      default: return <Video className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'one-on-one': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300';\n      case 'group': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n      case 'masterclass': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const SessionCard = ({ session }: { session: LiveSession }) => (\n    <Card className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 rounded-lg bg-blue-100 dark:bg-blue-900\">\n              <Video className=\"h-5 w-5 text-blue-600\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\">{session.title}</h3>\n              <p className=\"text-sm text-muted-foreground\">with {session.instructor}</p>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Badge variant=\"outline\" className={getStatusColor(session.status)}>\n              {session.status}\n            </Badge>\n            <Badge variant=\"outline\" className={getTypeColor(session.type)}>\n              <span className=\"flex items-center gap-1\">\n                {getTypeIcon(session.type)}\n                {session.type}\n              </span>\n            </Badge>\n          </div>\n        </div>\n\n        <p className=\"text-sm text-muted-foreground mb-4\">{session.description}</p>\n\n        <div className=\"grid grid-cols-2 gap-4 mb-4\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            <span>{session.date}</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            <span>{session.time} ({session.duration}min)</span>\n          </div>\n        </div>\n\n        {session.type !== 'one-on-one' && (\n          <div className=\"flex items-center gap-2 text-sm mb-4\">\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n            <span>{session.participantCount}/{session.maxParticipants} participants</span>\n          </div>\n        )}\n\n        <div className=\"flex items-center gap-2\">\n          {session.status === 'ongoing' && (\n            <Button className=\"flex-1 gap-2\">\n              <Play className=\"h-4 w-4\" />\n              Join Now\n            </Button>\n          )}\n          {session.status === 'scheduled' && (\n            <>\n              <Button className=\"flex-1 gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                Join Session\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <MessageCircle className=\"h-4 w-4\" />\n              </Button>\n            </>\n          )}\n          {session.status === 'completed' && (\n            <Button variant=\"outline\" className=\"flex-1 gap-2\">\n              <Play className=\"h-4 w-4\" />\n              Watch Recording\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Live Sessions</h1>\n            <p className=\"text-muted-foreground\">\n              Join live learning sessions with expert instructors\n            </p>\n          </div>\n          <Button className=\"gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Book Session\n          </Button>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{upcomingSessions.length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Upcoming</p>\n                </div>\n                <Calendar className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{ongoingSessions.length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Live Now</p>\n                </div>\n                <Video className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{completedSessions.length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Completed</p>\n                </div>\n                <Users className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{liveSessions.length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Total Sessions</p>\n                </div>\n                <BookOpen className=\"h-8 w-8 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sessions Tabs */}\n        <Tabs defaultValue=\"upcoming\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"upcoming\" className=\"gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Upcoming ({upcomingSessions.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"live\" className=\"gap-2\">\n              <Video className=\"h-4 w-4\" />\n              Live Now ({ongoingSessions.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"completed\" className=\"gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Completed ({completedSessions.length})\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Upcoming Sessions */}\n          <TabsContent value=\"upcoming\">\n            {upcomingSessions.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Calendar className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No upcoming sessions</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Book a live session with your instructor to accelerate your learning!\n                  </p>\n                  <Button>Book a Session</Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {upcomingSessions.map((session) => (\n                  <SessionCard key={session.id} session={session} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Live Sessions */}\n          <TabsContent value=\"live\">\n            {ongoingSessions.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Video className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No live sessions</h3>\n                  <p className=\"text-muted-foreground\">\n                    No sessions are currently live. Check back for upcoming sessions!\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {ongoingSessions.map((session) => (\n                  <SessionCard key={session.id} session={session} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Completed Sessions */}\n          <TabsContent value=\"completed\">\n            {completedSessions.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No completed sessions</h3>\n                  <p className=\"text-muted-foreground\">\n                    Your completed sessions and recordings will appear here.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {completedSessions.map((session) => (\n                  <SessionCard key={session.id} session={session} />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* Quick Actions */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Session Preferences\n            </CardTitle>\n            <CardDescription>\n              Manage your session settings and availability\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button variant=\"outline\" className=\"gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                Set Availability\n              </Button>\n              <Button variant=\"outline\" className=\"gap-2\">\n                <Phone className=\"h-4 w-4\" />\n                Test Audio/Video\n              </Button>\n              <Button variant=\"outline\" className=\"gap-2\">\n                <Star className=\"h-4 w-4\" />\n                Rate Instructors\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n        <Footer />\n      </div>\n    </div>\n  );\n};\n\nexport default StudentSessions;","size_bytes":14148},"client/src/pages/StudentSignIn.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { BookOpen, Music, Users, Loader2 } from \"lucide-react\";\n\nconst StudentSignIn = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        // Check if user is actually a student\n        if (data.user.role !== 'student') {\n          toast({\n            title: \"Access Denied\",\n            description: \"This is the student portal. Please use the mentor portal to sign in.\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n\n        toast({\n          title: \"Welcome Student!\",\n          description: \"Logged in successfully. Start your musical journey!\",\n        });\n        \n        // Store student session data using centralized auth utility\n        const userData = {\n          id: data.user.id.toString(),\n          username: data.user.username,\n          firstName: data.user.firstName,\n          lastName: data.user.lastName,\n          email: data.user.email,\n          role: data.user.role as 'student'\n        };\n        \n        // Store in centralized auth system\n        localStorage.setItem('currentUser', JSON.stringify(userData));\n        \n        // Dispatch login event for other components\n        window.dispatchEvent(new CustomEvent('user-login', { detail: userData }));\n        \n        // Redirect to student dashboard\n        setLocation(\"/student-dashboard\");\n      } else {\n        toast({\n          title: \"Sign In Failed\",\n          description: data.error || \"Please check your email and password.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to connect to the server. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSocialLogin = (provider: string) => {\n    toast({\n      title: `${provider} Login`,\n      description: `${provider} authentication would be integrated here.`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-16 flex items-center justify-center\">\n        <div className=\"w-full max-w-md\">\n          {/* Student-specific branding */}\n          <div className=\"text-center mb-8 animate-slide-up\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-hero rounded-full mb-4 shadow-glow\">\n              <BookOpen className=\"w-8 h-8 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-3xl font-bold bg-gradient-hero bg-clip-text text-transparent\">\n              Student Portal\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">Begin your musical learning adventure</p>\n          </div>\n\n          <Card className=\"shadow-musical border-0 bg-card/80 backdrop-blur-sm animate-slide-up\">\n            <CardHeader className=\"space-y-1 pb-4\">\n              <CardTitle className=\"text-2xl text-center font-semibold\">Welcome Back</CardTitle>\n              <CardDescription className=\"text-center\">\n                Sign in to continue your musical journey\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Social Login Buttons */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"transition-rhythm hover:shadow-warm\"\n                  onClick={() => handleSocialLogin(\"Google\")}\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                    <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                    <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                    <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                  </svg>\n                  Google\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"transition-rhythm hover:shadow-warm\"\n                  onClick={() => handleSocialLogin(\"Facebook\")}\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                  </svg>\n                  Facebook\n                </Button>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <Separator className=\"flex-1\" />\n                <span className=\"text-muted-foreground text-sm\">or continue with email</span>\n                <Separator className=\"flex-1\" />\n              </div>\n\n              {/* Email/Password Form */}\n              <form onSubmit={handleSignIn} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"student@example.com\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"transition-rhythm focus:shadow-glow\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"password\" className=\"text-sm font-medium\">Password</Label>\n                    <Link \n                      to=\"#\" \n                      className=\"text-sm text-primary hover:text-primary-glow transition-beat\"\n                    >\n                      Forgot password?\n                    </Link>\n                  </div>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"transition-rhythm focus:shadow-glow\"\n                    required\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  disabled={isSubmitting}\n                  className=\"w-full bg-gradient-hero hover:opacity-90 transition-rhythm shadow-musical font-medium\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Signing In...\n                    </>\n                  ) : (\n                    <>\n                      <Music className=\"w-4 h-4 mr-2\" />\n                      Sign In to Learn\n                    </>\n                  )}\n                </Button>\n              </form>\n\n              {/* Additional Options */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 transition-rhythm hover:border-primary\"\n                    onClick={() => handleSocialLogin(\"Apple\")}\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"currentColor\" d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n                    </svg>\n                    Apple\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 transition-rhythm hover:border-primary\"\n                    onClick={() => handleSocialLogin(\"GitHub\")}\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"currentColor\" d=\"M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z\"/>\n                    </svg>\n                    GitHub\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"text-center pt-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  New to HarmonyLearn?{\" \"}\n                  <Link \n                    to=\"/student-signup\" \n                    className=\"text-primary hover:text-primary-glow transition-beat font-medium\"\n                  >\n                    Create student account\n                  </Link>\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Are you a mentor?{\" \"}\n                  <Link \n                    to=\"/mentor-signin\" \n                    className=\"text-accent hover:text-accent/80 transition-beat font-medium\"\n                  >\n                    Sign in here\n                  </Link>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default StudentSignIn;","size_bytes":11798},"client/src/pages/StudentSignUp.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { BookOpen, Music, Star, Loader2 } from \"lucide-react\";\n\nconst StudentSignUp = () => {\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    acceptTerms: false\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleInputChange = (field: string, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password mismatch\",\n        description: \"Passwords do not match.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!formData.acceptTerms) {\n      toast({\n        title: \"Accept terms\",\n        description: \"Please accept the terms and conditions.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          username: formData.email, // Use email as username for simplicity\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          email: formData.email,\n          password: formData.password,\n          role: 'student'\n        }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Welcome to HarmonyLearn!\",\n          description: `Account created for ${formData.firstName} ${formData.lastName}. Please sign in to start your musical journey!`,\n        });\n        setLocation(\"/student-signin\");\n      } else {\n        toast({\n          title: \"Registration Failed\",\n          description: data.error || \"Unable to create account. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to connect to the server. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSocialSignUp = (provider: string) => {\n    toast({\n      title: `${provider} Sign Up`,\n      description: `${provider} registration would be integrated here.`,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-subtle\">\n      <Header />\n      <div className=\"container mx-auto px-4 py-16 flex items-center justify-center\">\n        <div className=\"w-full max-w-md\">\n          {/* Student-specific branding */}\n          <div className=\"text-center mb-8 animate-slide-up\">\n            <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-hero rounded-full mb-4 shadow-glow animate-pulse-glow\">\n              <BookOpen className=\"w-8 h-8 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-3xl font-bold bg-gradient-hero bg-clip-text text-transparent\">\n              Join as Student\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">Start learning music with expert guidance</p>\n          </div>\n\n          <Card className=\"shadow-musical border-0 bg-card/80 backdrop-blur-sm animate-slide-up\">\n            <CardHeader className=\"space-y-1 pb-4\">\n              <CardTitle className=\"text-2xl text-center font-semibold\">Create Your Account</CardTitle>\n              <CardDescription className=\"text-center\">\n                Join thousands of students learning music\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Social Sign Up Buttons */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button \n                  variant=\"outline\" \n                  className=\"transition-rhythm hover:shadow-warm\"\n                  onClick={() => handleSocialSignUp(\"Google\")}\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                    <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                    <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                    <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                  </svg>\n                  Google\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"transition-rhythm hover:shadow-warm\"\n                  onClick={() => handleSocialSignUp(\"Facebook\")}\n                >\n                  <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                    <path fill=\"currentColor\" d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                  </svg>\n                  Facebook\n                </Button>\n              </div>\n\n              <div className=\"flex items-center gap-4\">\n                <Separator className=\"flex-1\" />\n                <span className=\"text-muted-foreground text-sm\">or continue with email</span>\n                <Separator className=\"flex-1\" />\n              </div>\n\n              {/* Registration Form */}\n              <form onSubmit={handleSignUp} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\" className=\"text-sm font-medium\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      placeholder=\"First name\"\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                      className=\"transition-rhythm focus:shadow-glow\"\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastName\" className=\"text-sm font-medium\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      placeholder=\"Last name\"\n                      value={formData.lastName}\n                      onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                      className=\"transition-rhythm focus:shadow-glow\"\n                      required\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-sm font-medium\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"student@example.com\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    className=\"transition-rhythm focus:shadow-glow\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-sm font-medium\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a secure password\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange(\"password\", e.target.value)}\n                    className=\"transition-rhythm focus:shadow-glow\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\" className=\"text-sm font-medium\">Confirm Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Confirm your password\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange(\"confirmPassword\", e.target.value)}\n                    className=\"transition-rhythm focus:shadow-glow\"\n                    required\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"terms\" \n                    checked={formData.acceptTerms}\n                    onCheckedChange={(checked) => handleInputChange(\"acceptTerms\", checked)}\n                  />\n                  <Label htmlFor=\"terms\" className=\"text-sm text-muted-foreground\">\n                    I agree to the{\" \"}\n                    <Link to=\"#\" className=\"text-primary hover:text-primary-glow transition-beat\">\n                      Terms of Service\n                    </Link>{\" \"}\n                    and{\" \"}\n                    <Link to=\"#\" className=\"text-primary hover:text-primary-glow transition-beat\">\n                      Privacy Policy\n                    </Link>\n                  </Label>\n                </div>\n                \n                <Button \n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"w-full bg-gradient-hero hover:opacity-90 transition-rhythm shadow-musical font-medium\"\n                >\n                  {isSubmitting ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Creating Account...\n                    </>\n                  ) : (\n                    <>\n                      <Star className=\"w-4 h-4 mr-2\" />\n                      Start Learning Music\n                    </>\n                  )}\n                </Button>\n              </form>\n\n              {/* Additional Options */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-3\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 transition-rhythm hover:border-primary\"\n                    onClick={() => handleSocialSignUp(\"Apple\")}\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"currentColor\" d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n                    </svg>\n                    Apple\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex-1 transition-rhythm hover:border-primary\"\n                    onClick={() => handleSocialSignUp(\"GitHub\")}\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"currentColor\" d=\"M12 0C5.374 0 0 5.373 0 12 0 17.302 3.438 21.8 8.207 23.387c.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23A11.509 11.509 0 0112 5.803c1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576C20.566 21.797 24 17.3 24 12c0-6.627-5.373-12-12-12z\"/>\n                    </svg>\n                    GitHub\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"text-center pt-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Already have an account?{\" \"}\n                  <Link \n                    to=\"/student-signin\" \n                    className=\"text-primary hover:text-primary-glow transition-beat font-medium\"\n                  >\n                    Sign in\n                  </Link>\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Want to teach?{\" \"}\n                  <Link \n                    to=\"/mentor-signup\" \n                    className=\"text-accent hover:text-accent/80 transition-beat font-medium\"\n                  >\n                    Become a mentor\n                  </Link>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default StudentSignUp;","size_bytes":14268},"client/src/pages/StudentTools.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { StudentSidebar } from \"@/components/student/StudentSidebar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Music, \n  Timer, \n  Target, \n  Radio, \n  Play, \n  Pause, \n  Volume2, \n  Settings, \n  Headphones, \n  RotateCcw,\n  Zap,\n  Clock,\n  BookOpen,\n  Mic,\n  Circle,\n  Square,\n  Download\n} from \"lucide-react\";\n\nexport default function StudentTools() {\n  // State for all tools\n  const [bpm, setBpm] = useState<number[]>([120]);\n  const [timeSignature, setTimeSignature] = useState(\"4/4\");\n  const [metronomeActive, setMetronomeActive] = useState(false);\n  \n  const [practiceTime, setPracticeTime] = useState(25);\n  const [timeRemaining, setTimeRemaining] = useState(25 * 60);\n  const [timerActive, setTimerActive] = useState(false);\n  \n  const [selectedScale, setSelectedScale] = useState(\"C Major\");\n  const [scaleMode, setScaleMode] = useState(\"ascending\");\n  \n  const [tunerNote, setTunerNote] = useState(\"A4\");\n  const [tunerFrequency] = useState(\"440 Hz\");\n\n  const [selectedKey, setSelectedKey] = useState(\"C\");\n  const [selectedChordProgression, setSelectedChordProgression] = useState(\"I-V-vi-IV\");\n  \n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  // Timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (timerActive && timeRemaining > 0) {\n      interval = setInterval(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      setTimerActive(false);\n    }\n    return () => clearInterval(interval);\n  }, [timerActive, timeRemaining]);\n\n  // Recording timer effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isRecording) {\n      interval = setInterval(() => {\n        setRecordingTime(time => time + 1);\n      }, 1000);\n    } else {\n      setRecordingTime(0);\n    }\n    return () => clearInterval(interval);\n  }, [isRecording]);\n\n  // Sample data\n  const practiceStats = {\n    todayTime: 25,\n    averageSession: 32,\n    streakDays: 7\n  };\n\n  const chordProgressions = [\n    { name: \"I-V-vi-IV\", chords: [\"C\", \"G\", \"Am\", \"F\"], description: \"Pop progression\" },\n    { name: \"ii-V-I\", chords: [\"Dm\", \"G\", \"C\"], description: \"Jazz standard\" },\n    { name: \"I-vi-ii-V\", chords: [\"C\", \"Am\", \"Dm\", \"G\"], description: \"Circle progression\" },\n    { name: \"I-IV-V\", chords: [\"C\", \"F\", \"G\"], description: \"Blues progression\" }\n  ];\n\n  const recentSessions = [\n    { id: 1, tool: \"Metronome\", duration: 15, exercises: 3, date: \"Today\" },\n    { id: 2, tool: \"Scale Trainer\", duration: 20, exercises: 5, date: \"Yesterday\" },\n    { id: 3, tool: \"Tuner\", duration: 8, exercises: 2, date: \"2 days ago\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        <StudentSidebar />\n        \n        <div className=\"flex-1 p-6 lg:p-8\">\n          <div className=\"max-w-7xl mx-auto space-y-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold mb-2\">Practice Tools</h1>\n              <p className=\"text-muted-foreground\">Professional tools to enhance your practice sessions</p>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-3 gap-4\">\n              <Card className=\"border-border/50\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-2xl font-bold\">{practiceStats.todayTime}m</p>\n                      <p className=\"text-xs text-muted-foreground\">Today's Practice</p>\n                    </div>\n                    <Clock className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"border-border/50\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-2xl font-bold\">{practiceStats.averageSession}m</p>\n                      <p className=\"text-xs text-muted-foreground\">Average Session</p>\n                    </div>\n                    <Timer className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"border-border/50\">\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-2xl font-bold\">{practiceStats.streakDays}</p>\n                      <p className=\"text-xs text-muted-foreground\">Day Streak</p>\n                    </div>\n                    <Zap className=\"h-6 w-6 text-yellow-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Practice Essentials */}\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Practice Essentials</h2>\n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                {/* Metronome Tool */}\n                <Card className=\"border-blue-200 dark:border-blue-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n                        <Music className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                      </div>\n                      Metronome\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* BPM Display */}\n                    <div className=\"text-center bg-muted/30 rounded-lg p-4\">\n                      <div className=\"text-4xl font-bold text-blue-600 dark:text-blue-400 mb-1\">\n                        {bpm[0]}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">BPM • {timeSignature}</div>\n                    </div>\n\n                    {/* BPM Slider */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>40</span>\n                        <span>220</span>\n                      </div>\n                      <Slider\n                        value={bpm}\n                        onValueChange={setBpm}\n                        max={220}\n                        min={40}\n                        step={1}\n                        className=\"w-full\"\n                      />\n                    </div>\n\n                    {/* Controls */}\n                    <div className=\"flex items-center gap-2\">\n                      <Select value={timeSignature} onValueChange={setTimeSignature}>\n                        <SelectTrigger className=\"w-16 h-8 text-xs\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"4/4\">4/4</SelectItem>\n                          <SelectItem value=\"3/4\">3/4</SelectItem>\n                          <SelectItem value=\"2/4\">2/4</SelectItem>\n                          <SelectItem value=\"6/8\">6/8</SelectItem>\n                        </SelectContent>\n                      </Select>\n\n                      <Button\n                        size=\"sm\"\n                        onClick={() => setMetronomeActive(!metronomeActive)}\n                        className=\"flex-1\"\n                      >\n                        {metronomeActive ? (\n                          <>\n                            <Pause className=\"h-4 w-4 mr-1\" />\n                            Stop\n                          </>\n                        ) : (\n                          <>\n                            <Play className=\"h-4 w-4 mr-1\" />\n                            Start\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Chromatic Tuner */}\n                <Card className=\"border-green-200 dark:border-green-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\n                        <Target className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                      </div>\n                      Chromatic Tuner\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {/* Tuner Display */}\n                    <div className=\"text-center bg-muted/30 rounded-lg p-4\">\n                      <div className=\"text-3xl font-bold text-green-600 dark:text-green-400 mb-1\">\n                        {tunerNote}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">{tunerFrequency}</div>\n                    </div>\n                    \n                    {/* Tuning indicator */}\n                    <div className=\"w-full\">\n                      <div className=\"h-4 bg-muted rounded-full relative\">\n                        <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 w-0.5 h-4 bg-green-600 rounded-full\"></div>\n                      </div>\n                      <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                        <span>♭</span>\n                        <span>Perfect</span>\n                        <span>♯</span>\n                      </div>\n                    </div>\n\n                    {/* Note Selection */}\n                    <div className=\"grid grid-cols-7 gap-1\">\n                      {['C', 'D', 'E', 'F', 'G', 'A', 'B'].map((note) => (\n                        <Button\n                          key={note}\n                          variant={tunerNote.startsWith(note) ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => setTunerNote(`${note}4`)}\n                          className=\"h-8 text-xs\"\n                        >\n                          {note}\n                        </Button>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Scale Trainer */}\n                <Card className=\"border-purple-200 dark:border-purple-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-purple-100 dark:bg-purple-900 rounded-lg\">\n                        <Music className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                      </div>\n                      Scale Trainer\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <div>\n                        <Label className=\"text-xs\">Scale</Label>\n                        <Select value={selectedScale} onValueChange={setSelectedScale}>\n                          <SelectTrigger className=\"h-8\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"C Major\">C Major</SelectItem>\n                            <SelectItem value=\"G Major\">G Major</SelectItem>\n                            <SelectItem value=\"D Major\">D Major</SelectItem>\n                            <SelectItem value=\"A Major\">A Major</SelectItem>\n                            <SelectItem value=\"A minor\">A minor</SelectItem>\n                            <SelectItem value=\"E minor\">E minor</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-xs\">Mode</Label>\n                        <Select value={scaleMode} onValueChange={setScaleMode}>\n                          <SelectTrigger className=\"h-8\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"ascending\">Ascending</SelectItem>\n                            <SelectItem value=\"descending\">Descending</SelectItem>\n                            <SelectItem value=\"both\">Both</SelectItem>\n                            <SelectItem value=\"random\">Random</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    {/* Note sequence */}\n                    <div className=\"flex justify-center gap-1\">\n                      {['C', 'D', 'E', 'F', 'G', 'A', 'B', 'C'].map((note, index) => (\n                        <div key={index} className=\"w-6 h-6 bg-purple-500 text-white rounded-full flex items-center justify-center text-xs font-medium\">\n                          {note}\n                        </div>\n                      ))}\n                    </div>\n\n                    <Button size=\"sm\" className=\"w-full\">\n                      <Play className=\"h-4 w-4 mr-1\" />\n                      Play Scale\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Theory & Training Tools */}\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Theory & Training</h2>\n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                {/* Practice Timer */}\n                <Card className=\"border-orange-200 dark:border-orange-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-orange-100 dark:bg-orange-900 rounded-lg\">\n                        <Timer className=\"h-5 w-5 text-orange-600 dark:text-orange-400\" />\n                      </div>\n                      Practice Timer\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center bg-muted/30 rounded-lg p-4\">\n                      <div className=\"text-3xl font-bold text-orange-600 dark:text-orange-400 mb-1\">\n                        {formatTime(timeRemaining)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {timerActive ? \"Active\" : \"Ready\"}\n                      </div>\n                      <div className=\"w-full bg-muted rounded-full h-1 mt-2\">\n                        <div \n                          className=\"bg-orange-500 h-1 rounded-full transition-all\" \n                          style={{ width: `${((practiceTime * 60 - timeRemaining) / (practiceTime * 60)) * 100}%` }}\n                        ></div>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-4 gap-1\">\n                      {[15, 25, 45, 60].map((minutes) => (\n                        <Button\n                          key={minutes}\n                          variant={practiceTime === minutes ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => {\n                            setPracticeTime(minutes);\n                            setTimeRemaining(minutes * 60);\n                          }}\n                          className=\"h-8 text-xs\"\n                        >\n                          {minutes}m\n                        </Button>\n                      ))}\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        onClick={() => setTimerActive(!timerActive)}\n                        className=\"flex-1\"\n                      >\n                        {timerActive ? <Pause className=\"h-4 w-4 mr-1\" /> : <Play className=\"h-4 w-4 mr-1\" />}\n                        {timerActive ? \"Pause\" : \"Start\"}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setTimerActive(false);\n                          setTimeRemaining(practiceTime * 60);\n                        }}\n                      >\n                        <RotateCcw className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Interval Trainer */}\n                <Card className=\"border-yellow-200 dark:border-yellow-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-yellow-100 dark:bg-yellow-900 rounded-lg\">\n                        <Zap className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400\" />\n                      </div>\n                      Interval Trainer\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center bg-muted/30 rounded-lg p-4\">\n                      <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400 mb-1\">\n                        Perfect 5th\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">C - G</div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Play className=\"h-4 w-4 mr-1\" />\n                        Play\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Volume2 className=\"h-4 w-4 mr-1\" />\n                        Together\n                      </Button>\n                    </div>\n\n                    <Button size=\"sm\" className=\"w-full\">\n                      Next Interval\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Chord Progressions */}\n                <Card className=\"border-indigo-200 dark:border-indigo-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-indigo-100 dark:bg-indigo-900 rounded-lg\">\n                        <BookOpen className=\"h-5 w-5 text-indigo-600 dark:text-indigo-400\" />\n                      </div>\n                      Chord Progressions\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-xs\">Key</Label>\n                      <Select value={selectedKey} onValueChange={setSelectedKey}>\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"C\">C Major</SelectItem>\n                          <SelectItem value=\"G\">G Major</SelectItem>\n                          <SelectItem value=\"D\">D Major</SelectItem>\n                          <SelectItem value=\"A\">A Major</SelectItem>\n                          <SelectItem value=\"Am\">A minor</SelectItem>\n                          <SelectItem value=\"Em\">E minor</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-xs\">Progression</Label>\n                      <Select value={selectedChordProgression} onValueChange={setSelectedChordProgression}>\n                        <SelectTrigger className=\"h-8\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {chordProgressions.map((prog) => (\n                            <SelectItem key={prog.name} value={prog.name}>{prog.name}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"text-center bg-muted/30 rounded-lg p-3\">\n                      <div className=\"text-sm font-medium mb-1\">\n                        {chordProgressions.find(p => p.name === selectedChordProgression)?.chords.join(\" - \") || \"C - G - Am - F\"}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {chordProgressions.find(p => p.name === selectedChordProgression)?.description || \"Pop progression\"}\n                      </div>\n                    </div>\n\n                    <Button size=\"sm\" className=\"w-full\">\n                      <Play className=\"h-4 w-4 mr-1\" />\n                      Play Progression\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Recording & Analysis Tools */}\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Recording & Analysis</h2>\n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                {/* Practice Recorder */}\n                <Card className=\"border-pink-200 dark:border-pink-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-pink-100 dark:bg-pink-900 rounded-lg\">\n                        <Mic className=\"h-5 w-5 text-pink-600 dark:text-pink-400\" />\n                      </div>\n                      Practice Recorder\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center bg-muted/30 rounded-lg p-4\">\n                      <div className=\"text-2xl font-bold text-pink-600 dark:text-pink-400 mb-1\">\n                        {formatTime(recordingTime)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {isRecording ? \"Recording...\" : \"Ready to Record\"}\n                      </div>\n                      {isRecording && (\n                        <div className=\"flex justify-center mt-2\">\n                          <div className=\"w-2 h-2 bg-red-500 rounded-full animate-pulse\"></div>\n                        </div>\n                      )}\n                    </div>\n\n                    <Button\n                      size=\"sm\"\n                      onClick={() => setIsRecording(!isRecording)}\n                      className=\"w-full\"\n                      variant={isRecording ? \"destructive\" : \"default\"}\n                    >\n                      {isRecording ? (\n                        <>\n                          <Square className=\"h-4 w-4 mr-1\" />\n                          Stop Recording\n                        </>\n                      ) : (\n                        <>\n                          <Circle className=\"h-4 w-4 mr-1\" />\n                          Start Recording\n                        </>\n                      )}\n                    </Button>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-xs text-muted-foreground\">Recent recordings will appear here</p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Rhythm Trainer */}\n                <Card className=\"border-red-200 dark:border-red-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-red-100 dark:bg-red-900 rounded-lg\">\n                        <Circle className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                      </div>\n                      Rhythm Trainer\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center bg-muted/30 rounded-lg p-4\">\n                      <div className=\"text-lg font-bold text-red-600 dark:text-red-400 mb-1\">\n                        4/4 Pattern\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">♩ ♪♪ ♩ ♪♪</div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Play className=\"h-4 w-4 mr-1\" />\n                        Play\n                      </Button>\n                      <Button size=\"sm\" variant=\"outline\">\n                        Practice\n                      </Button>\n                    </div>\n\n                    <Button size=\"sm\" className=\"w-full\">\n                      Next Pattern\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Pitch Analyzer */}\n                <Card className=\"border-teal-200 dark:border-teal-800 shadow-sm hover:shadow-md transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <div className=\"p-2 bg-teal-100 dark:bg-teal-900 rounded-lg\">\n                        <Volume2 className=\"h-5 w-5 text-teal-600 dark:text-teal-400\" />\n                      </div>\n                      Pitch Analyzer\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"text-center bg-muted/30 rounded-lg p-4\">\n                      <div className=\"text-2xl font-bold text-teal-600 dark:text-teal-400 mb-1\">\n                        A4\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">442 Hz (+4¢)</div>\n                    </div>\n\n                    <div className=\"w-full h-16 bg-muted/30 rounded-lg flex items-center justify-center\">\n                      <div className=\"text-sm text-muted-foreground\">Pitch visualization</div>\n                    </div>\n\n                    <Button size=\"sm\" className=\"w-full\">\n                      <Mic className=\"h-4 w-4 mr-1\" />\n                      Start Analysis\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Recent Practice Sidebar */}\n            <div className=\"grid lg:grid-cols-4 gap-6\">\n              <div className=\"lg:col-span-1\">\n                <Card className=\"border-border/50\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg\">Recent Practice</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {recentSessions.map((session) => (\n                        <div key={session.id} className=\"p-3 border rounded-lg\">\n                          <div className=\"flex justify-between items-start mb-1\">\n                            <h4 className=\"font-medium text-sm\">{session.tool}</h4>\n                            <span className=\"text-xs text-muted-foreground\">{session.date}</span>\n                          </div>\n                          <div className=\"flex justify-between text-xs text-muted-foreground\">\n                            <span>{session.duration} min</span>\n                            <span>{session.exercises} exercises</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":29205},"client/src/pages/Tools.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AuthDialog } from \"@/components/AuthDialog\";\nimport { getCurrentUser, isAuthenticated, onAuthStateChange } from \"@/lib/auth\";\nimport { \n  Music, \n  Timer,\n  Target,\n  Zap,\n  BookOpen,\n  TrendingUp\n} from \"lucide-react\";\n\nconst Tools = () => {\n  const [authDialogOpen, setAuthDialogOpen] = useState(false);\n  const [selectedFeature, setSelectedFeature] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState(getCurrentUser());\n\n  // Listen for auth state changes\n  useEffect(() => {\n    const cleanup = onAuthStateChange((user) => {\n      setCurrentUser(user);\n    });\n    \n    return cleanup;\n  }, []);\n\n  const handleToolClick = (tool: any) => {\n    // Always show sign-in dialog for demo - this is a preview page\n    setSelectedFeature(tool.title);\n    setAuthDialogOpen(true);\n  };\n  const tools = [\n    {\n      category: \"Practice Essentials\",\n      items: [\n        {\n          title: \"Metronome\",\n          description: \"Professional metronome with customizable beats and subdivisions\",\n          icon: Timer,\n          color: \"bg-blue-500\",\n          featured: true,\n          href: \"/tools/metronome\"\n        },\n        {\n          title: \"Chromatic Tuner\",\n          description: \"Accurate tuning for all instruments with visual feedback\",\n          icon: Target,\n          color: \"bg-green-500\",\n          featured: true,\n          href: \"/tools/tuner\"\n        },\n        {\n          title: \"Scale Trainer\",\n          description: \"Practice scales and modes with audio playback\",\n          icon: Music,\n          color: \"bg-purple-500\",\n          featured: true,\n          href: \"/tools/scale-trainer\"\n        }\n      ]\n    },\n    {\n      category: \"Theory & Training\",\n      items: [\n        {\n          title: \"Rhythm Trainer\",\n          description: \"Master complex rhythms with visual and audio cues\",\n          icon: Zap,\n          color: \"bg-yellow-500\",\n          featured: false,\n          href: \"/tools/rhythm-trainer\"\n        },\n        {\n          title: \"Practice Planner\",\n          description: \"Organize effective practice sessions with goals and timing\",\n          icon: BookOpen,\n          color: \"bg-red-500\",\n          featured: false,\n          href: \"/tools/practice-planner\"\n        },\n        {\n          title: \"Progress Analytics\",\n          description: \"Track your musical growth with detailed performance metrics\",\n          icon: TrendingUp,\n          color: \"bg-indigo-500\",\n          featured: false,\n          href: \"/tools/progress-analytics\"\n        }\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Welcome Banner */}\n        <div className=\"mb-8\">\n          <Card className=\"border-2 border-primary/20 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-pink-500/5\">\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center gap-2 mb-3\">\n                <Music className=\"h-6 w-6 text-primary\" />\n                <h3 className=\"text-xl font-semibold bg-gradient-hero bg-clip-text text-transparent\">\n                  Professional Practice Tools\n                </h3>\n              </div>\n              <p className=\"text-muted-foreground mb-4\">\n                Enhance your musical journey with our comprehensive suite of practice tools. From metronomes to ear training, everything you need to excel.\n              </p>\n              <Button onClick={() => handleToolClick({ title: \"practice tools\" })} className=\"bg-gradient-hero hover:opacity-90\">\n                Start Practicing\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Practice Tools Grid with Overlay */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-t from-background/95 via-background/20 to-transparent z-10 pointer-events-none\" />\n          <div className=\"absolute bottom-0 left-0 right-0 h-32 bg-gradient-to-t from-background via-background/80 to-transparent z-20 pointer-events-none\" />\n          <div className=\"space-y-12 relative\">\n            {tools.map((category) => (\n              <div key={category.category}>\n                <h2 className=\"text-2xl font-bold mb-6 flex items-center gap-3\">\n                  {category.category}\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {category.items.length} tools\n                  </Badge>\n                </h2>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {category.items.map((tool) => (\n                    <Card \n                      key={tool.title} \n                      className=\"group hover:shadow-lg transition-all duration-300 hover:scale-105 cursor-pointer\"\n                      onClick={() => handleToolClick(tool)}\n                    >\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-center mb-4\">\n                          <div className={`p-3 rounded-lg ${tool.color} text-white mr-4 group-hover:scale-110 transition-transform`}>\n                            <tool.icon className=\"h-6 w-6\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{tool.title}</h3>\n                            {tool.featured && (\n                              <Badge variant=\"default\" className=\"text-xs mt-1\">Featured</Badge>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <p className=\"text-muted-foreground mb-6 text-sm leading-relaxed\">\n                          {tool.description}\n                        </p>\n                        \n                        <Button \n                          className=\"w-full group-hover:bg-primary group-hover:text-primary-foreground transition-all duration-300\"\n                          variant=\"outline\"\n                        >\n                          Open {tool.title}\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      <Footer />\n      \n      <AuthDialog \n        open={authDialogOpen} \n        onOpenChange={setAuthDialogOpen}\n        featureName={selectedFeature}\n      />\n    </div>\n  );\n};\n\nexport default Tools;","size_bytes":6851},"client/src/components/admin/AnalyticsDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, AreaChart, Area\n} from 'recharts';\nimport { \n  TrendingUp, Users, BookOpen, DollarSign, Video, Calendar, \n  Download, Filter, RefreshCw, Eye, Clock, Star, Award\n} from \"lucide-react\";\n\nexport const AnalyticsDashboard = () => {\n  const [timeRange, setTimeRange] = useState(\"7d\");\n  const [metric, setMetric] = useState(\"overview\");\n\n  // Sample data - in real app this would come from API\n  const revenueData = [\n    { month: 'Jan', revenue: 12500, students: 245, courses: 15 },\n    { month: 'Feb', revenue: 15200, students: 298, courses: 18 },\n    { month: 'Mar', revenue: 18900, students: 356, courses: 22 },\n    { month: 'Apr', revenue: 22100, students: 412, courses: 25 },\n    { month: 'May', revenue: 26800, students: 478, courses: 28 },\n    { month: 'Jun', revenue: 31200, students: 534, courses: 32 },\n  ];\n\n  const userActivityData = [\n    { day: 'Mon', active: 1240, new: 45, returning: 890 },\n    { day: 'Tue', active: 1350, new: 52, returning: 920 },\n    { day: 'Wed', active: 1180, new: 38, returning: 850 },\n    { day: 'Thu', active: 1420, new: 68, returning: 980 },\n    { day: 'Fri', active: 1580, new: 85, returning: 1100 },\n    { day: 'Sat', active: 980, new: 32, returning: 720 },\n    { day: 'Sun', active: 1120, new: 41, returning: 810 },\n  ];\n\n  const coursePopularityData = [\n    { name: 'Piano Basics', students: 892, revenue: 26760, rating: 4.8 },\n    { name: 'Guitar Mastery', students: 756, revenue: 37800, rating: 4.9 },\n    { name: 'Vocal Training', students: 634, revenue: 31700, rating: 4.7 },\n    { name: 'Drum Fundamentals', students: 523, revenue: 15690, rating: 4.6 },\n    { name: 'Music Theory', students: 445, revenue: 22250, rating: 4.5 },\n  ];\n\n  const deviceData = [\n    { name: 'Desktop', value: 45, color: '#8884d8' },\n    { name: 'Mobile', value: 35, color: '#82ca9d' },\n    { name: 'Tablet', value: 20, color: '#ffc658' },\n  ];\n\n  const topMetrics = [\n    { \n      title: \"Total Revenue\", \n      value: \"$89,450\", \n      change: \"+18.2%\", \n      changeType: \"increase\", \n      icon: DollarSign,\n      description: \"This month\"\n    },\n    { \n      title: \"Active Students\", \n      value: \"52,847\", \n      change: \"+12.5%\", \n      changeType: \"increase\", \n      icon: Users,\n      description: \"Total registered\"\n    },\n    { \n      title: \"Course Completions\", \n      value: \"3,247\", \n      change: \"+8.1%\", \n      changeType: \"increase\", \n      icon: Award,\n      description: \"This month\"\n    },\n    { \n      title: \"Avg. Session Time\", \n      value: \"45m\", \n      change: \"-2.3%\", \n      changeType: \"decrease\", \n      icon: Clock,\n      description: \"Per user\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <TrendingUp className=\"h-6 w-6 text-primary\" />\n          <h2 className=\"text-2xl font-bold\">Analytics Dashboard</h2>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-[120px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"24h\">Last 24h</SelectItem>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n              <SelectItem value=\"1y\">Last year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n            Refresh\n          </Button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {topMetrics.map((metric) => (\n          <Card key={metric.title}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">{metric.title}</p>\n                  <p className=\"text-2xl font-bold\">{metric.value}</p>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge \n                      variant={metric.changeType === 'increase' ? 'default' : 'destructive'}\n                      className=\"text-xs\"\n                    >\n                      {metric.change}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">{metric.description}</span>\n                  </div>\n                </div>\n                <metric.icon className=\"h-8 w-8 text-muted-foreground\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Chart */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Revenue & Growth</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <AreaChart data={revenueData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis />\n                <Tooltip />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"revenue\" \n                  stroke=\"#8884d8\" \n                  fill=\"#8884d8\" \n                  fillOpacity={0.3}\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* User Activity */}\n        <Card>\n          <CardHeader>\n            <CardTitle>User Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={userActivityData}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"day\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"new\" fill=\"#82ca9d\" name=\"New Users\" />\n                <Bar dataKey=\"returning\" fill=\"#8884d8\" name=\"Returning Users\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Device Usage */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Device Usage</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={deviceData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, value }) => `${name}: ${value}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                >\n                  {deviceData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Top Courses */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Top Performing Courses</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {coursePopularityData.map((course, index) => (\n                <div key={course.name} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <span className=\"text-sm font-bold\">#{index + 1}</span>\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{course.name}</p>\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <Users className=\"h-3 w-3\" />\n                        <span>{course.students} students</span>\n                        <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                        <span>{course.rating}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-green-600\">${course.revenue.toLocaleString()}</p>\n                    <p className=\"text-sm text-muted-foreground\">Revenue</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <Video className=\"h-8 w-8 mx-auto mb-2 text-blue-500\" />\n              <p className=\"text-2xl font-bold\">1,234</p>\n              <p className=\"text-sm text-muted-foreground\">Live Sessions</p>\n              <Badge variant=\"default\" className=\"mt-2\">+23% this week</Badge>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <BookOpen className=\"h-8 w-8 mx-auto mb-2 text-green-500\" />\n              <p className=\"text-2xl font-bold\">3,156</p>\n              <p className=\"text-sm text-muted-foreground\">Total Courses</p>\n              <Badge variant=\"default\" className=\"mt-2\">+15% this month</Badge>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center\">\n              <Award className=\"h-8 w-8 mx-auto mb-2 text-purple-500\" />\n              <p className=\"text-2xl font-bold\">1,240</p>\n              <p className=\"text-sm text-muted-foreground\">Active Mentors</p>\n              <Badge variant=\"default\" className=\"mt-2\">+8% this month</Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};","size_bytes":10797},"client/src/components/admin/ContentModeration.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  Shield, Search, Flag, CheckCircle, X, Eye, MessageCircle, \n  FileText, Video, AlertTriangle, Calendar, User \n} from \"lucide-react\";\n\ninterface Report {\n  id: number;\n  type: 'Course' | 'Comment' | 'Message' | 'Profile' | 'Live Session';\n  title: string;\n  reportedBy: string;\n  reportedUser: string;\n  reason: string;\n  description: string;\n  status: 'Pending' | 'Approved' | 'Rejected' | 'Under Review';\n  severity: 'Low' | 'Medium' | 'High' | 'Critical';\n  reportDate: string;\n  lastUpdated: string;\n}\n\nexport const ContentModeration = () => {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [severityFilter, setSeverityFilter] = useState(\"all\");\n\n  const reports: Report[] = [\n    {\n      id: 1,\n      type: 'Course',\n      title: 'Advanced Piano Techniques',\n      reportedBy: 'student123@email.com',\n      reportedUser: 'pianist_pro',\n      reason: 'Inappropriate Content',\n      description: 'Course contains copyrighted material without permission',\n      status: 'Pending',\n      severity: 'High',\n      reportDate: '2024-12-20',\n      lastUpdated: '2024-12-20'\n    },\n    {\n      id: 2,\n      type: 'Comment',\n      title: 'Comment on \"Guitar Basics\"',\n      reportedBy: 'user456@email.com',\n      reportedUser: 'guitar_master',\n      reason: 'Harassment',\n      description: 'User made inappropriate comments about other students',\n      status: 'Under Review',\n      severity: 'Medium',\n      reportDate: '2024-12-19',\n      lastUpdated: '2024-12-20'\n    },\n    {\n      id: 3,\n      type: 'Profile',\n      title: 'User Profile: musiclover99',\n      reportedBy: 'mentor@email.com',\n      reportedUser: 'musiclover99',\n      reason: 'Fake Profile',\n      description: 'Profile appears to be using stolen images and credentials',\n      status: 'Approved',\n      severity: 'High',\n      reportDate: '2024-12-18',\n      lastUpdated: '2024-12-19'\n    }\n  ];\n\n  const filteredReports = reports.filter(report => {\n    const matchesSearch = report.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         report.reportedUser.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || report.status.toLowerCase().replace(' ', '') === statusFilter;\n    const matchesType = typeFilter === \"all\" || report.type.toLowerCase() === typeFilter;\n    const matchesSeverity = severityFilter === \"all\" || report.severity.toLowerCase() === severityFilter;\n    \n    return matchesSearch && matchesStatus && matchesType && matchesSeverity;\n  });\n\n  const handleReportAction = (action: string, reportId: number) => {\n    toast({\n      title: `Report ${action}`,\n      description: `Report has been ${action.toLowerCase()} successfully.`,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Pending': return 'secondary';\n      case 'Under Review': return 'default';\n      case 'Approved': return 'destructive';\n      case 'Rejected': return 'outline';\n      default: return 'secondary';\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'Critical': return 'destructive';\n      case 'High': return 'destructive';\n      case 'Medium': return 'default';\n      case 'Low': return 'secondary';\n      default: return 'secondary';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'Course': return <FileText className=\"h-4 w-4\" />;\n      case 'Comment': return <MessageCircle className=\"h-4 w-4\" />;\n      case 'Message': return <MessageCircle className=\"h-4 w-4\" />;\n      case 'Profile': return <User className=\"h-4 w-4\" />;\n      case 'Live Session': return <Video className=\"h-4 w-4\" />;\n      default: return <Flag className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Shield className=\"h-6 w-6 text-primary\" />\n          <h2 className=\"text-2xl font-bold\">Content Moderation</h2>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"destructive\">\n            <AlertTriangle className=\"mr-1 h-3 w-3\" />\n            {reports.filter(r => r.status === 'Pending').length} Pending\n          </Badge>\n          <Badge variant=\"default\">\n            <Eye className=\"mr-1 h-3 w-3\" />\n            {reports.filter(r => r.status === 'Under Review').length} Under Review\n          </Badge>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Reports</p>\n                <p className=\"text-2xl font-bold\">{reports.length}</p>\n              </div>\n              <Flag className=\"h-8 w-8 text-primary\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pending</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">\n                  {reports.filter(r => r.status === 'Pending').length}\n                </p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Under Review</p>\n                <p className=\"text-2xl font-bold text-blue-600\">\n                  {reports.filter(r => r.status === 'Under Review').length}\n                </p>\n              </div>\n              <Eye className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">High Priority</p>\n                <p className=\"text-2xl font-bold text-red-600\">\n                  {reports.filter(r => r.severity === 'High' || r.severity === 'Critical').length}\n                </p>\n              </div>\n              <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search reports...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"underreview\">Under Review</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"course\">Course</SelectItem>\n                <SelectItem value=\"comment\">Comment</SelectItem>\n                <SelectItem value=\"message\">Message</SelectItem>\n                <SelectItem value=\"profile\">Profile</SelectItem>\n                <SelectItem value=\"live session\">Live Session</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={severityFilter} onValueChange={setSeverityFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Severity\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Severity</SelectItem>\n                <SelectItem value=\"critical\">Critical</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reports Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Content</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Reported User</TableHead>\n                <TableHead>Reason</TableHead>\n                <TableHead>Severity</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredReports.map((report) => (\n                <TableRow key={report.id}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{report.title}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Reported by: {report.reportedBy}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      {getTypeIcon(report.type)}\n                      <span>{report.type}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>{report.reportedUser}</TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{report.reason}</p>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {report.description}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getSeverityColor(report.severity)}>\n                      {report.severity}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getStatusColor(report.status)}>\n                      {report.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{report.reportDate}</TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      <Button size=\"sm\" variant=\"ghost\">\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => handleReportAction('Approved', report.id)}\n                      >\n                        <CheckCircle className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => handleReportAction('Rejected', report.id)}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":13108},"client/src/components/admin/CourseManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  BookOpen, Search, Plus, Edit, Trash2, Eye, Play, Users, \n  Star, DollarSign, Calendar, Clock, Award, TrendingUp\n} from \"lucide-react\";\n\ninterface Course {\n  id: number;\n  title: string;\n  instructor: string;\n  category: string;\n  price: number;\n  duration: string;\n  students: number;\n  rating: number;\n  status: 'Published' | 'Draft' | 'Review' | 'Archived';\n  createdDate: string;\n  lastUpdated: string;\n  revenue: number;\n  completion: number;\n  thumbnail: string;\n}\n\nexport const CourseManagement = () => {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);\n\n  const courses: Course[] = [\n    {\n      id: 1,\n      title: \"Advanced Jazz Piano Techniques\",\n      instructor: \"Marcus Johnson\",\n      category: \"Piano\",\n      price: 199.99,\n      duration: \"12 hours\",\n      students: 892,\n      rating: 4.9,\n      status: \"Published\",\n      createdDate: \"2024-01-15\",\n      lastUpdated: \"2024-12-10\",\n      revenue: 178668,\n      completion: 87,\n      thumbnail: \"/placeholder.svg\"\n    },\n    {\n      id: 2,\n      title: \"Guitar Fundamentals for Beginners\",\n      instructor: \"Sarah Chen\",\n      category: \"Guitar\",\n      price: 89.99,\n      duration: \"8 hours\",\n      students: 1245,\n      rating: 4.8,\n      status: \"Published\",\n      createdDate: \"2023-11-20\",\n      lastUpdated: \"2024-12-05\",\n      revenue: 112043,\n      completion: 92,\n      thumbnail: \"/placeholder.svg\"\n    },\n    {\n      id: 3,\n      title: \"Classical Violin Masterclass\",\n      instructor: \"Elena Volkov\",\n      category: \"Violin\",\n      price: 299.99,\n      duration: \"16 hours\",\n      students: 234,\n      rating: 4.7,\n      status: \"Review\",\n      createdDate: \"2024-12-01\",\n      lastUpdated: \"2024-12-18\",\n      revenue: 70197,\n      completion: 45,\n      thumbnail: \"/placeholder.svg\"\n    },\n    {\n      id: 4,\n      title: \"Modern Drum Techniques\",\n      instructor: \"Alex Rodriguez\",\n      category: \"Drums\",\n      price: 149.99,\n      duration: \"10 hours\",\n      students: 567,\n      rating: 4.6,\n      status: \"Draft\",\n      createdDate: \"2024-10-12\",\n      lastUpdated: \"2024-12-15\",\n      revenue: 85043,\n      completion: 78,\n      thumbnail: \"/placeholder.svg\"\n    }\n  ];\n\n  const filteredCourses = courses.filter(course => {\n    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         course.instructor.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || course.status.toLowerCase() === statusFilter;\n    const matchesCategory = categoryFilter === \"all\" || course.category.toLowerCase() === categoryFilter;\n    \n    return matchesSearch && matchesStatus && matchesCategory;\n  });\n\n  const handleCourseAction = (action: string, courseId: number) => {\n    toast({\n      title: `Course ${action}`,\n      description: `Course has been ${action.toLowerCase()} successfully.`,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Published': return 'default';\n      case 'Draft': return 'secondary';\n      case 'Review': return 'outline';\n      case 'Archived': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <BookOpen className=\"h-6 w-6 text-primary\" />\n          <h2 className=\"text-2xl font-bold\">Course Management</h2>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\">\n            <TrendingUp className=\"mr-2 h-4 w-4\" />\n            Course Analytics\n          </Button>\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Course\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Course</DialogTitle>\n              </DialogHeader>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"courseTitle\">Course Title</Label>\n                  <Input id=\"courseTitle\" placeholder=\"Enter course title\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"instructor\">Instructor</Label>\n                  <Select>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select instructor\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"marcus\">Marcus Johnson</SelectItem>\n                      <SelectItem value=\"sarah\">Sarah Chen</SelectItem>\n                      <SelectItem value=\"elena\">Elena Volkov</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"piano\">Piano</SelectItem>\n                      <SelectItem value=\"guitar\">Guitar</SelectItem>\n                      <SelectItem value=\"violin\">Violin</SelectItem>\n                      <SelectItem value=\"drums\">Drums</SelectItem>\n                      <SelectItem value=\"vocals\">Vocals</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"price\">Price ($)</Label>\n                  <Input id=\"price\" type=\"number\" placeholder=\"0.00\" />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"description\">Course Description</Label>\n                  <Textarea id=\"description\" placeholder=\"Enter course description\" />\n                </div>\n                <div className=\"col-span-2 flex justify-end space-x-2\">\n                  <Button variant=\"outline\">Save as Draft</Button>\n                  <Button>Create Course</Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Course Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Courses</p>\n                <p className=\"text-2xl font-bold\">{courses.length}</p>\n              </div>\n              <BookOpen className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Published</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  {courses.filter(c => c.status === 'Published').length}\n                </p>\n              </div>\n              <Award className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                <p className=\"text-2xl font-bold text-green-600\">\n                  ${courses.reduce((sum, course) => sum + course.revenue, 0).toLocaleString()}\n                </p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Avg Rating</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">\n                  {(courses.reduce((sum, course) => sum + course.rating, 0) / courses.length).toFixed(1)}\n                </p>\n              </div>\n              <Star className=\"h-8 w-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search courses...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"published\">Published</SelectItem>\n                <SelectItem value=\"draft\">Draft</SelectItem>\n                <SelectItem value=\"review\">Review</SelectItem>\n                <SelectItem value=\"archived\">Archived</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"piano\">Piano</SelectItem>\n                <SelectItem value=\"guitar\">Guitar</SelectItem>\n                <SelectItem value=\"violin\">Violin</SelectItem>\n                <SelectItem value=\"drums\">Drums</SelectItem>\n                <SelectItem value=\"vocals\">Vocals</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Courses Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Course</TableHead>\n                <TableHead>Instructor</TableHead>\n                <TableHead>Category</TableHead>\n                <TableHead>Price</TableHead>\n                <TableHead>Students</TableHead>\n                <TableHead>Rating</TableHead>\n                <TableHead>Revenue</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCourses.map((course) => (\n                <TableRow key={course.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-8 bg-primary/10 rounded flex items-center justify-center\">\n                        <BookOpen className=\"h-4 w-4\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{course.title}</p>\n                        <p className=\"text-sm text-muted-foreground\">{course.duration}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>{course.instructor}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{course.category}</Badge>\n                  </TableCell>\n                  <TableCell>${course.price}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <Users className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{course.students}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                      <span>{course.rating}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-green-600 font-medium\">\n                    ${course.revenue.toLocaleString()}\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getStatusColor(course.status)}>\n                      {course.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" variant=\"ghost\" onClick={() => setSelectedCourse(course)}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl\">\n                          <DialogHeader>\n                            <DialogTitle>Course Details</DialogTitle>\n                          </DialogHeader>\n                          {selectedCourse && (\n                            <div className=\"grid grid-cols-2 gap-6\">\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Title</Label>\n                                  <p className=\"text-sm\">{selectedCourse.title}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Instructor</Label>\n                                  <p className=\"text-sm\">{selectedCourse.instructor}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Category</Label>\n                                  <Badge variant=\"outline\">{selectedCourse.category}</Badge>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Duration</Label>\n                                  <p className=\"text-sm\">{selectedCourse.duration}</p>\n                                </div>\n                              </div>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Price</Label>\n                                  <p className=\"text-sm\">${selectedCourse.price}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Students Enrolled</Label>\n                                  <p className=\"text-sm\">{selectedCourse.students}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Rating</Label>\n                                  <div className=\"flex items-center space-x-1\">\n                                    <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                                    <span className=\"text-sm\">{selectedCourse.rating}</span>\n                                  </div>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Total Revenue</Label>\n                                  <p className=\"text-sm text-green-600 font-medium\">${selectedCourse.revenue.toLocaleString()}</p>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => handleCourseAction('Preview', course.id)}\n                      >\n                        <Play className=\"h-4 w-4\" />\n                      </Button>\n                      <Button size=\"sm\" variant=\"ghost\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\" \n                        onClick={() => handleCourseAction('Deleted', course.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":18341},"client/src/components/admin/LiveSessionsManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  Video, Search, Plus, Edit, Trash2, Eye, Play, Users, \n  Calendar, Clock, CircleDot, Square, Pause, Settings,\n  MessageCircle, Share2, Download\n} from \"lucide-react\";\n\ninterface LiveSession {\n  id: number;\n  title: string;\n  instructor: string;\n  instructorAvatar: string;\n  topic: string;\n  category: string;\n  scheduledDate: string;\n  duration: number;\n  maxParticipants: number;\n  currentParticipants: number;\n  status: 'Scheduled' | 'Live' | 'Completed' | 'Cancelled';\n  price: number;\n  description: string;\n  recordingAvailable: boolean;\n  chatEnabled: boolean;\n  qnaEnabled: boolean;\n}\n\nexport const LiveSessionsManagement = () => {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [selectedSession, setSelectedSession] = useState<LiveSession | null>(null);\n\n  const liveSessions: LiveSession[] = [\n    {\n      id: 1,\n      title: \"Advanced Jazz Improvisation Workshop\",\n      instructor: \"Marcus Johnson\",\n      instructorAvatar: \"/placeholder.svg\",\n      topic: \"Jazz Piano Techniques\",\n      category: \"Piano\",\n      scheduledDate: \"2024-12-25T15:00:00Z\",\n      duration: 90,\n      maxParticipants: 50,\n      currentParticipants: 42,\n      status: \"Scheduled\",\n      price: 49.99,\n      description: \"Deep dive into jazz improvisation techniques with practical exercises.\",\n      recordingAvailable: true,\n      chatEnabled: true,\n      qnaEnabled: true\n    },\n    {\n      id: 2,\n      title: \"Guitar Fingerpicking Masterclass\",\n      instructor: \"Sarah Chen\",\n      instructorAvatar: \"/placeholder.svg\",\n      topic: \"Acoustic Guitar Techniques\",\n      category: \"Guitar\",\n      scheduledDate: \"2024-12-22T18:00:00Z\",\n      duration: 120,\n      maxParticipants: 30,\n      currentParticipants: 28,\n      status: \"Live\",\n      price: 39.99,\n      description: \"Learn advanced fingerpicking patterns and techniques.\",\n      recordingAvailable: true,\n      chatEnabled: true,\n      qnaEnabled: true\n    },\n    {\n      id: 3,\n      title: \"Classical Music Theory Fundamentals\",\n      instructor: \"Elena Volkov\",\n      instructorAvatar: \"/placeholder.svg\",\n      topic: \"Music Theory\",\n      category: \"Theory\",\n      scheduledDate: \"2024-12-20T14:00:00Z\",\n      duration: 60,\n      maxParticipants: 100,\n      currentParticipants: 85,\n      status: \"Completed\",\n      price: 29.99,\n      description: \"Essential music theory concepts for classical musicians.\",\n      recordingAvailable: true,\n      chatEnabled: false,\n      qnaEnabled: true\n    },\n    {\n      id: 4,\n      title: \"Drum Solo Techniques\",\n      instructor: \"Alex Rodriguez\",\n      instructorAvatar: \"/placeholder.svg\",\n      topic: \"Advanced Drumming\",\n      category: \"Drums\",\n      scheduledDate: \"2024-12-28T16:00:00Z\",\n      duration: 75,\n      maxParticipants: 25,\n      currentParticipants: 0,\n      status: \"Cancelled\",\n      price: 44.99,\n      description: \"Master complex drum solo patterns and fills.\",\n      recordingAvailable: false,\n      chatEnabled: true,\n      qnaEnabled: true\n    }\n  ];\n\n  const filteredSessions = liveSessions.filter(session => {\n    const matchesSearch = session.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         session.instructor.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         session.topic.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || session.status.toLowerCase() === statusFilter;\n    const matchesCategory = categoryFilter === \"all\" || session.category.toLowerCase() === categoryFilter;\n    \n    return matchesSearch && matchesStatus && matchesCategory;\n  });\n\n  const handleSessionAction = (action: string, sessionId: number) => {\n    toast({\n      title: `Session ${action}`,\n      description: `Live session has been ${action.toLowerCase()} successfully.`,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Live': return 'destructive';\n      case 'Scheduled': return 'default';\n      case 'Completed': return 'secondary';\n      case 'Cancelled': return 'outline';\n      default: return 'secondary';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'Live': return <CircleDot className=\"h-4 w-4 text-red-500\" />;\n      case 'Scheduled': return <Calendar className=\"h-4 w-4\" />;\n      case 'Completed': return <Square className=\"h-4 w-4\" />;\n      case 'Cancelled': return <Pause className=\"h-4 w-4\" />;\n      default: return <Calendar className=\"h-4 w-4\" />;\n    }\n  };\n\n  const liveSessionsCount = liveSessions.filter(s => s.status === 'Live').length;\n  const scheduledCount = liveSessions.filter(s => s.status === 'Scheduled').length;\n  const totalParticipants = liveSessions.reduce((sum, session) => sum + session.currentParticipants, 0);\n  const totalRevenue = liveSessions\n    .filter(s => s.status === 'Completed' || s.status === 'Live')\n    .reduce((sum, session) => sum + (session.price * session.currentParticipants), 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Video className=\"h-6 w-6 text-primary\" />\n          <h2 className=\"text-2xl font-bold\">Live Sessions Management</h2>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\">\n            <Settings className=\"mr-2 h-4 w-4\" />\n            Stream Settings\n          </Button>\n          <Dialog>\n            <DialogTrigger asChild>\n              <Button>\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Schedule Session\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Schedule New Live Session</DialogTitle>\n              </DialogHeader>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"sessionTitle\">Session Title</Label>\n                  <Input id=\"sessionTitle\" placeholder=\"Enter session title\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"instructor\">Instructor</Label>\n                  <Select>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select instructor\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"marcus\">Marcus Johnson</SelectItem>\n                      <SelectItem value=\"sarah\">Sarah Chen</SelectItem>\n                      <SelectItem value=\"elena\">Elena Volkov</SelectItem>\n                      <SelectItem value=\"alex\">Alex Rodriguez</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"piano\">Piano</SelectItem>\n                      <SelectItem value=\"guitar\">Guitar</SelectItem>\n                      <SelectItem value=\"violin\">Violin</SelectItem>\n                      <SelectItem value=\"drums\">Drums</SelectItem>\n                      <SelectItem value=\"theory\">Theory</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"price\">Price ($)</Label>\n                  <Input id=\"price\" type=\"number\" placeholder=\"0.00\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"scheduledDate\">Date & Time</Label>\n                  <Input id=\"scheduledDate\" type=\"datetime-local\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"duration\">Duration (minutes)</Label>\n                  <Input id=\"duration\" type=\"number\" placeholder=\"60\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"maxParticipants\">Max Participants</Label>\n                  <Input id=\"maxParticipants\" type=\"number\" placeholder=\"50\" />\n                </div>\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea id=\"description\" placeholder=\"Enter session description\" />\n                </div>\n                <div className=\"col-span-2 flex justify-end space-x-2\">\n                  <Button variant=\"outline\">Save as Draft</Button>\n                  <Button>Schedule Session</Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Session Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Live Now</p>\n                <p className=\"text-2xl font-bold text-red-600\">{liveSessionsCount}</p>\n              </div>\n              <CircleDot className=\"h-8 w-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Scheduled</p>\n                <p className=\"text-2xl font-bold text-blue-600\">{scheduledCount}</p>\n              </div>\n              <Calendar className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Participants</p>\n                <p className=\"text-2xl font-bold\">{totalParticipants}</p>\n              </div>\n              <Users className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Session Revenue</p>\n                <p className=\"text-2xl font-bold text-green-600\">${totalRevenue.toFixed(2)}</p>\n              </div>\n              <Video className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search sessions...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"live\">Live</SelectItem>\n                <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"piano\">Piano</SelectItem>\n                <SelectItem value=\"guitar\">Guitar</SelectItem>\n                <SelectItem value=\"violin\">Violin</SelectItem>\n                <SelectItem value=\"drums\">Drums</SelectItem>\n                <SelectItem value=\"theory\">Theory</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sessions Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Session</TableHead>\n                <TableHead>Instructor</TableHead>\n                <TableHead>Category</TableHead>\n                <TableHead>Scheduled</TableHead>\n                <TableHead>Participants</TableHead>\n                <TableHead>Price</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredSessions.map((session) => (\n                <TableRow key={session.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-6 bg-primary/10 rounded flex items-center justify-center\">\n                        <Video className=\"h-4 w-4\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{session.title}</p>\n                        <p className=\"text-sm text-muted-foreground\">{session.topic}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>{session.instructor}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{session.category}</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"text-sm\">{new Date(session.scheduledDate).toLocaleDateString()}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(session.scheduledDate).toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Users className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{session.currentParticipants}/{session.maxParticipants}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>${session.price}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(session.status)}\n                      <Badge variant={getStatusColor(session.status)}>\n                        {session.status}\n                      </Badge>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" variant=\"ghost\" onClick={() => setSelectedSession(session)}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl\">\n                          <DialogHeader>\n                            <DialogTitle>Session Details</DialogTitle>\n                          </DialogHeader>\n                          {selectedSession && (\n                            <div className=\"grid grid-cols-2 gap-6\">\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Title</Label>\n                                  <p className=\"text-sm\">{selectedSession.title}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Instructor</Label>\n                                  <p className=\"text-sm\">{selectedSession.instructor}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Category</Label>\n                                  <Badge variant=\"outline\">{selectedSession.category}</Badge>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Duration</Label>\n                                  <p className=\"text-sm\">{selectedSession.duration} minutes</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Description</Label>\n                                  <p className=\"text-sm\">{selectedSession.description}</p>\n                                </div>\n                              </div>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Scheduled Date</Label>\n                                  <p className=\"text-sm\">{new Date(selectedSession.scheduledDate).toLocaleString()}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Participants</Label>\n                                  <p className=\"text-sm\">{selectedSession.currentParticipants} / {selectedSession.maxParticipants}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Price</Label>\n                                  <p className=\"text-sm\">${selectedSession.price}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Features</Label>\n                                  <div className=\"flex flex-wrap gap-2\">\n                                    {selectedSession.recordingAvailable && <Badge variant=\"secondary\">Recording</Badge>}\n                                    {selectedSession.chatEnabled && <Badge variant=\"secondary\">Chat</Badge>}\n                                    {selectedSession.qnaEnabled && <Badge variant=\"secondary\">Q&A</Badge>}\n                                  </div>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Status</Label>\n                                  <Badge variant={getStatusColor(selectedSession.status)}>{selectedSession.status}</Badge>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                      {session.status === 'Scheduled' && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => handleSessionAction('Started', session.id)}\n                        >\n                          <Play className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      {session.status === 'Live' && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => handleSessionAction('Monitored', session.id)}\n                        >\n                          <MessageCircle className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button size=\"sm\" variant=\"ghost\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      {session.status === 'Completed' && session.recordingAvailable && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => handleSessionAction('Downloaded', session.id)}\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\" \n                        onClick={() => handleSessionAction('Deleted', session.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":22299},"client/src/components/admin/MasterRoleRequestManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { Crown, Eye, CheckCircle, XCircle, Clock, User } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst apiRequest = async (url: string, options: { method: string; body?: string }) => {\n  const response = await fetch(url, {\n    method: options.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: options.body,\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\ninterface MasterRoleRequest {\n  id: number;\n  mentorId: number;\n  reason: string;\n  experience: string;\n  plannedClassrooms: string;\n  additionalQualifications?: string;\n  status: 'pending' | 'approved' | 'rejected';\n  adminNotes?: string;\n  reviewedBy?: number;\n  reviewedAt?: Date;\n  approvedAt?: Date;\n  rejectedAt?: Date;\n  createdAt: Date;\n}\n\nconst reviewSchema = z.object({\n  status: z.enum(['approved', 'rejected']),\n  adminNotes: z.string().optional(),\n});\n\ntype ReviewFormData = z.infer<typeof reviewSchema>;\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'pending':\n      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n    case 'approved':\n      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n    case 'rejected':\n      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n    default:\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n  }\n};\n\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case 'pending':\n      return <Clock className=\"w-4 h-4\" />;\n    case 'approved':\n      return <CheckCircle className=\"w-4 h-4\" />;\n    case 'rejected':\n      return <XCircle className=\"w-4 h-4\" />;\n    default:\n      return <User className=\"w-4 h-4\" />;\n  }\n};\n\ninterface RequestDetailsDialogProps {\n  request: MasterRoleRequest;\n  onReview: (requestId: number, data: ReviewFormData) => void;\n  isReviewing: boolean;\n}\n\nfunction RequestDetailsDialog({ request, onReview, isReviewing }: RequestDetailsDialogProps) {\n  const [open, setOpen] = useState(false);\n  \n  const form = useForm<ReviewFormData>({\n    resolver: zodResolver(reviewSchema),\n    defaultValues: {\n      adminNotes: \"\",\n    },\n  });\n\n  const onSubmit = (data: ReviewFormData) => {\n    onReview(request.id, data);\n    setOpen(false);\n    form.reset();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\">\n          <Eye className=\"w-4 h-4 mr-2\" />\n          Review\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Crown className=\"w-5 h-5 text-yellow-500\" />\n            Master Role Request Details\n          </DialogTitle>\n          <DialogDescription>\n            Review and approve or reject this master role request\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Request Details */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <Badge className={getStatusColor(request.status)}>\n                {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n              </Badge>\n              <span className=\"text-sm text-muted-foreground\">\n                Submitted: {format(new Date(request.createdAt), \"MMM d, yyyy 'at' h:mm a\")}\n              </span>\n            </div>\n\n            <div className=\"grid gap-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">Why they want to become a master:</h4>\n                <p className=\"text-sm bg-muted p-3 rounded-lg\">{request.reason}</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold mb-2\">Teaching & Classroom Management Experience:</h4>\n                <p className=\"text-sm bg-muted p-3 rounded-lg\">{request.experience}</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold mb-2\">Planned Classrooms & Teaching Approach:</h4>\n                <p className=\"text-sm bg-muted p-3 rounded-lg\">{request.plannedClassrooms}</p>\n              </div>\n\n              {request.additionalQualifications && (\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Additional Qualifications:</h4>\n                  <p className=\"text-sm bg-muted p-3 rounded-lg\">{request.additionalQualifications}</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Review Form - Only show if pending */}\n          {request.status === 'pending' && (\n            <div className=\"border-t pt-6\">\n              <h4 className=\"font-semibold mb-4\">Review Decision</h4>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Decision</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select decision\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"approved\">Approve Request</SelectItem>\n                            <SelectItem value=\"rejected\">Reject Request</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"adminNotes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Admin Notes (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Add notes about your decision...\"\n                            className=\"min-h-[100px]\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-2\">\n                    <Button\n                      type=\"submit\"\n                      disabled={isReviewing || !form.watch('status')}\n                    >\n                      {isReviewing ? \"Processing...\" : \"Submit Review\"}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </div>\n          )}\n\n          {/* Previous Review Info */}\n          {request.status !== 'pending' && (\n            <div className=\"border-t pt-6\">\n              <h4 className=\"font-semibold mb-2\">Review Information</h4>\n              <div className=\"text-sm space-y-1\">\n                <p><strong>Status:</strong> {request.status.charAt(0).toUpperCase() + request.status.slice(1)}</p>\n                {request.reviewedAt && (\n                  <p><strong>Reviewed:</strong> {format(new Date(request.reviewedAt), \"MMM d, yyyy 'at' h:mm a\")}</p>\n                )}\n                {request.adminNotes && (\n                  <div className=\"mt-2\">\n                    <strong>Admin Notes:</strong>\n                    <p className=\"bg-muted p-2 rounded mt-1\">{request.adminNotes}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function MasterRoleRequestManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const currentUser = getCurrentUser();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n\n  const { data: requests, isLoading } = useQuery({\n    queryKey: ['/api/master-role-requests', statusFilter],\n    queryFn: async () => {\n      const url = statusFilter === 'all' \n        ? '/api/master-role-requests' \n        : `/api/master-role-requests?status=${statusFilter}`;\n      return fetch(url).then(res => res.json());\n    },\n  });\n\n  // Fetch all mentors to get names\n  const { data: mentors } = useQuery({\n    queryKey: ['/api/users', 'mentors'],\n    queryFn: async () => {\n      return fetch('/api/users?role=mentor').then(res => res.json());\n    },\n  });\n\n  const getMentorName = (mentorId: number) => {\n    const mentor = mentors?.find((m: any) => m.id === mentorId);\n    return mentor ? `${mentor.firstName || ''} ${mentor.lastName || ''}`.trim() || mentor.username : `Mentor ${mentorId}`;\n  };\n\n  const reviewRequest = useMutation({\n    mutationFn: async ({ requestId, data }: { requestId: number; data: ReviewFormData }) => {\n      return apiRequest(`/api/master-role-requests/${requestId}/status`, {\n        method: 'PATCH',\n        body: JSON.stringify({\n          ...data,\n          reviewedBy: parseInt(currentUser?.id || '0'),\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Request Reviewed\",\n        description: \"The master role request has been reviewed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/master-role-requests'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to review request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReview = (requestId: number, data: ReviewFormData) => {\n    reviewRequest.mutate({ requestId, data });\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const requestList = Array.isArray(requests) ? requests as MasterRoleRequest[] : [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Crown className=\"w-5 h-5 text-yellow-500\" />\n          Master Role Requests\n        </CardTitle>\n        <CardDescription>\n          Review and approve mentor applications for master status\n        </CardDescription>\n        \n        <div className=\"flex gap-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Requests</SelectItem>\n              <SelectItem value=\"pending\">Pending</SelectItem>\n              <SelectItem value=\"approved\">Approved</SelectItem>\n              <SelectItem value=\"rejected\">Rejected</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {requestList.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            No master role requests found.\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {requestList.map((request) => (\n              <div key={request.id} className=\"border rounded-lg p-4 space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {getStatusIcon(request.status)}\n                    <div>\n                      <p className=\"font-medium\">{getMentorName(request.mentorId)}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Submitted {format(new Date(request.createdAt), \"MMM d, yyyy\")}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className={getStatusColor(request.status)}>\n                      {request.status.charAt(0).toUpperCase() + request.status.slice(1)}\n                    </Badge>\n                    <RequestDetailsDialog\n                      request={request}\n                      onReview={handleReview}\n                      isReviewing={reviewRequest.isPending}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"text-sm\">\n                  <p className=\"line-clamp-2\">{request.reason}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14170},"client/src/components/admin/MentorApplicationManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  GraduationCap, Search, Filter, Eye, CheckCircle, X, Clock, \n  Award, User, Calendar, FileText, MessageSquare\n} from \"lucide-react\";\n\ninterface MentorApplication {\n  id: number;\n  userId: number;\n  name: string;\n  email: string;\n  specialization: string;\n  experience: string;\n  bio: string;\n  credentials: string;\n  portfolio?: string;\n  status: 'pending' | 'approved' | 'rejected';\n  adminNotes?: string;\n  reviewedBy?: number;\n  reviewedAt?: string;\n  createdAt: string;\n}\n\nexport const MentorApplicationManagement = () => {\n  const { toast } = useToast();\n  const [applications, setApplications] = useState<MentorApplication[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedApplication, setSelectedApplication] = useState<MentorApplication | null>(null);\n  const [reviewNotes, setReviewNotes] = useState(\"\");\n  const [isReviewing, setIsReviewing] = useState(false);\n\n  const fetchApplications = async () => {\n    try {\n      const response = await fetch('/api/mentor-applications');\n      if (response.ok) {\n        const data = await response.json();\n        setApplications(data);\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to fetch mentor applications\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to fetch applications\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchApplications();\n  }, []);\n\n  const filteredApplications = applications.filter(app => {\n    const matchesSearch = app.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         app.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         app.specialization.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || app.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const handleReviewApplication = async (applicationId: number, status: 'approved' | 'rejected') => {\n    setIsReviewing(true);\n    \n    try {\n      const response = await fetch(`/api/mentor-applications/${applicationId}/status`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          status,\n          adminNotes: reviewNotes,\n          reviewedBy: 1 // TODO: Get actual admin user ID\n        }),\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Application Updated\",\n          description: `Application ${status} successfully`,\n        });\n        \n        // Refresh applications\n        await fetchApplications();\n        setSelectedApplication(null);\n        setReviewNotes(\"\");\n      } else {\n        const data = await response.json();\n        toast({\n          title: \"Update Failed\",\n          description: data.error || \"Failed to update application\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to update application\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsReviewing(false);\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\"><Clock className=\"w-3 h-3 mr-1\" />Pending</Badge>;\n      case 'approved':\n        return <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\"><CheckCircle className=\"w-3 h-3 mr-1\" />Approved</Badge>;\n      case 'rejected':\n        return <Badge variant=\"outline\" className=\"bg-red-50 text-red-700 border-red-200\"><X className=\"w-3 h-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-3\">\n          <GraduationCap className=\"w-6 h-6 text-secondary\" />\n          <h2 className=\"text-2xl font-bold\">Mentor Applications</h2>\n        </div>\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n              <p className=\"text-muted-foreground mt-2\">Loading applications...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-3\">\n          <GraduationCap className=\"w-6 h-6 text-secondary\" />\n          <h2 className=\"text-2xl font-bold\">Mentor Applications</h2>\n          <Badge variant=\"secondary\">{applications.length} Total</Badge>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"flex items-center p-6\">\n            <Clock className=\"w-8 h-8 text-yellow-500 mr-3\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{applications.filter(a => a.status === 'pending').length}</p>\n              <p className=\"text-xs text-muted-foreground\">Pending Review</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"flex items-center p-6\">\n            <CheckCircle className=\"w-8 h-8 text-green-500 mr-3\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{applications.filter(a => a.status === 'approved').length}</p>\n              <p className=\"text-xs text-muted-foreground\">Approved</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"flex items-center p-6\">\n            <X className=\"w-8 h-8 text-red-500 mr-3\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{applications.filter(a => a.status === 'rejected').length}</p>\n              <p className=\"text-xs text-muted-foreground\">Rejected</p>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"flex items-center p-6\">\n            <Award className=\"w-8 h-8 text-blue-500 mr-3\" />\n            <div>\n              <p className=\"text-2xl font-bold\">{applications.length}</p>\n              <p className=\"text-xs text-muted-foreground\">Total Applications</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search applications...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Applications Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Applications ({filteredApplications.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Applicant</TableHead>\n                <TableHead>Specialization</TableHead>\n                <TableHead>Experience</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Applied</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredApplications.map((application) => (\n                <TableRow key={application.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <User className=\"w-8 h-8 text-gray-400\" />\n                      <div>\n                        <div className=\"font-medium\">{application.name || 'Unknown User'}</div>\n                        <div className=\"text-sm text-muted-foreground\">{application.email || 'No email'}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>{application.specialization}</TableCell>\n                  <TableCell className=\"max-w-xs truncate\">{application.experience}</TableCell>\n                  <TableCell>{getStatusBadge(application.status)}</TableCell>\n                  <TableCell className=\"text-sm text-muted-foreground\">\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"w-4 h-4 mr-1\" />\n                      {formatDate(application.createdAt)}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setSelectedApplication(application)}\n                        >\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          Review\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>Review Mentor Application</DialogTitle>\n                        </DialogHeader>\n                        {selectedApplication && (\n                          <div className=\"space-y-6\">\n                            {/* Applicant Info */}\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <Label className=\"text-sm font-medium\">Applicant Name</Label>\n                                <p className=\"mt-1\">{selectedApplication.name || 'Unknown User'}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-sm font-medium\">Email</Label>\n                                <p className=\"mt-1\">{selectedApplication.email || 'No email'}</p>\n                              </div>\n                            </div>\n\n                            {/* Application Details */}\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label className=\"text-sm font-medium\">Specialization</Label>\n                                <p className=\"mt-1\">{selectedApplication.specialization}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-sm font-medium\">Experience</Label>\n                                <p className=\"mt-1\">{selectedApplication.experience}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-sm font-medium\">Bio</Label>\n                                <p className=\"mt-1\">{selectedApplication.bio}</p>\n                              </div>\n                              <div>\n                                <Label className=\"text-sm font-medium\">Credentials</Label>\n                                <p className=\"mt-1\">{selectedApplication.credentials}</p>\n                              </div>\n                            </div>\n\n                            {/* Review Notes */}\n                            <div>\n                              <Label htmlFor=\"reviewNotes\" className=\"text-sm font-medium\">Admin Notes</Label>\n                              <Textarea\n                                id=\"reviewNotes\"\n                                placeholder=\"Add notes about this application...\"\n                                value={reviewNotes}\n                                onChange={(e) => setReviewNotes(e.target.value)}\n                                className=\"mt-1\"\n                                rows={3}\n                              />\n                            </div>\n\n                            {/* Action Buttons */}\n                            {selectedApplication.status === 'pending' && (\n                              <div className=\"flex gap-3 pt-4\">\n                                <Button\n                                  onClick={() => handleReviewApplication(selectedApplication.id, 'approved')}\n                                  disabled={isReviewing}\n                                  className=\"bg-green-600 hover:bg-green-700\"\n                                >\n                                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                                  Approve Application\n                                </Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  onClick={() => handleReviewApplication(selectedApplication.id, 'rejected')}\n                                  disabled={isReviewing}\n                                >\n                                  <X className=\"w-4 h-4 mr-2\" />\n                                  Reject Application\n                                </Button>\n                              </div>\n                            )}\n\n                            {/* Existing Review Info */}\n                            {selectedApplication.status !== 'pending' && (\n                              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                                <div className=\"flex items-center gap-2 mb-2\">\n                                  <MessageSquare className=\"w-4 h-4\" />\n                                  <span className=\"font-medium\">Review Status: {getStatusBadge(selectedApplication.status)}</span>\n                                </div>\n                                {selectedApplication.adminNotes && (\n                                  <div>\n                                    <p className=\"text-sm font-medium\">Admin Notes:</p>\n                                    <p className=\"text-sm text-muted-foreground mt-1\">{selectedApplication.adminNotes}</p>\n                                  </div>\n                                )}\n                                {selectedApplication.reviewedAt && (\n                                  <p className=\"text-xs text-muted-foreground mt-2\">\n                                    Reviewed on {formatDate(selectedApplication.reviewedAt)}\n                                  </p>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </DialogContent>\n                    </Dialog>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          \n          {filteredApplications.length === 0 && (\n            <div className=\"text-center py-12\">\n              <GraduationCap className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No applications found</h3>\n              <p className=\"text-gray-500\">No mentor applications match your current filters.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":17342},"client/src/components/admin/PaymentManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  CreditCard, Search, Download, RefreshCw, Eye, AlertCircle, \n  DollarSign, TrendingUp, Users, Calendar, CheckCircle, X\n} from \"lucide-react\";\n\ninterface Payment {\n  id: string;\n  userId: number;\n  userName: string;\n  userEmail: string;\n  courseId: number;\n  courseName: string;\n  amount: number;\n  currency: string;\n  status: 'Completed' | 'Pending' | 'Failed' | 'Refunded';\n  paymentMethod: 'Credit Card' | 'PayPal' | 'Bank Transfer';\n  transactionId: string;\n  date: string;\n  processingFee: number;\n  netAmount: number;\n}\n\nexport const PaymentManagement = () => {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [methodFilter, setMethodFilter] = useState(\"all\");\n  const [dateRange, setDateRange] = useState(\"7d\");\n  const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);\n\n  const payments: Payment[] = [\n    {\n      id: \"txn_001\",\n      userId: 1,\n      userName: \"John Doe\",\n      userEmail: \"john@example.com\",\n      courseId: 1,\n      courseName: \"Advanced Jazz Piano\",\n      amount: 199.99,\n      currency: \"USD\",\n      status: \"Completed\",\n      paymentMethod: \"Credit Card\",\n      transactionId: \"ch_3OvqKr2eZvKYlo2C0K8jdnr1\",\n      date: \"2024-12-20T10:30:00Z\",\n      processingFee: 6.10,\n      netAmount: 193.89\n    },\n    {\n      id: \"txn_002\",\n      userId: 2,\n      userName: \"Sarah Johnson\",\n      userEmail: \"sarah@example.com\",\n      courseId: 2,\n      courseName: \"Guitar Fundamentals\",\n      amount: 89.99,\n      currency: \"USD\",\n      status: \"Pending\",\n      paymentMethod: \"PayPal\",\n      transactionId: \"PAYID-MZ3XJ6A12345678901234567\",\n      date: \"2024-12-20T14:15:00Z\",\n      processingFee: 2.90,\n      netAmount: 87.09\n    },\n    {\n      id: \"txn_003\",\n      userId: 3,\n      userName: \"Mike Chen\",\n      userEmail: \"mike@example.com\",\n      courseId: 3,\n      courseName: \"Classical Violin\",\n      amount: 299.99,\n      currency: \"USD\",\n      status: \"Failed\",\n      paymentMethod: \"Credit Card\",\n      transactionId: \"ch_3OvqKr2eZvKYlo2C0K8jdnr2\",\n      date: \"2024-12-19T16:45:00Z\",\n      processingFee: 0,\n      netAmount: 0\n    },\n    {\n      id: \"txn_004\",\n      userId: 4,\n      userName: \"Elena Rodriguez\",\n      userEmail: \"elena@example.com\",\n      courseId: 1,\n      courseName: \"Advanced Jazz Piano\",\n      amount: 199.99,\n      currency: \"USD\",\n      status: \"Refunded\",\n      paymentMethod: \"Credit Card\",\n      transactionId: \"ch_3OvqKr2eZvKYlo2C0K8jdnr3\",\n      date: \"2024-12-18T09:20:00Z\",\n      processingFee: -6.10,\n      netAmount: -193.89\n    }\n  ];\n\n  const filteredPayments = payments.filter(payment => {\n    const matchesSearch = payment.userName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payment.userEmail.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payment.courseName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payment.transactionId.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || payment.status.toLowerCase() === statusFilter;\n    const matchesMethod = methodFilter === \"all\" || payment.paymentMethod.toLowerCase().replace(' ', '') === methodFilter;\n    \n    return matchesSearch && matchesStatus && matchesMethod;\n  });\n\n  const handlePaymentAction = (action: string, paymentId: string) => {\n    toast({\n      title: `Payment ${action}`,\n      description: `Payment has been ${action.toLowerCase()} successfully.`,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Completed': return 'default';\n      case 'Pending': return 'secondary';\n      case 'Failed': return 'destructive';\n      case 'Refunded': return 'outline';\n      default: return 'secondary';\n    }\n  };\n\n  const getMethodIcon = (method: string) => {\n    switch (method) {\n      case 'Credit Card': return <CreditCard className=\"h-4 w-4\" />;\n      case 'PayPal': return <span className=\"text-xs font-bold\">PP</span>;\n      case 'Bank Transfer': return <span className=\"text-xs font-bold\">BT</span>;\n      default: return <CreditCard className=\"h-4 w-4\" />;\n    }\n  };\n\n  const totalRevenue = payments\n    .filter(p => p.status === 'Completed')\n    .reduce((sum, payment) => sum + payment.amount, 0);\n\n  const pendingAmount = payments\n    .filter(p => p.status === 'Pending')\n    .reduce((sum, payment) => sum + payment.amount, 0);\n\n  const refundedAmount = payments\n    .filter(p => p.status === 'Refunded')\n    .reduce((sum, payment) => sum + Math.abs(payment.amount), 0);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <CreditCard className=\"h-6 w-6 text-primary\" />\n          <h2 className=\"text-2xl font-bold\">Payment Management</h2>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export Reports\n          </Button>\n          <Button variant=\"outline\">\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n            Sync Payments\n          </Button>\n          <Button variant=\"hero\">\n            <TrendingUp className=\"mr-2 h-4 w-4\" />\n            Revenue Analytics\n          </Button>\n        </div>\n      </div>\n\n      {/* Payment Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                <p className=\"text-2xl font-bold text-green-600\">${totalRevenue.toFixed(2)}</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pending Payments</p>\n                <p className=\"text-2xl font-bold text-yellow-600\">${pendingAmount.toFixed(2)}</p>\n              </div>\n              <AlertCircle className=\"h-8 w-8 text-yellow-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Refunded</p>\n                <p className=\"text-2xl font-bold text-red-600\">${refundedAmount.toFixed(2)}</p>\n              </div>\n              <X className=\"h-8 w-8 text-red-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Transactions</p>\n                <p className=\"text-2xl font-bold\">{payments.length}</p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search payments...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"refunded\">Refunded</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={methodFilter} onValueChange={setMethodFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Method\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Methods</SelectItem>\n                <SelectItem value=\"creditcard\">Credit Card</SelectItem>\n                <SelectItem value=\"paypal\">PayPal</SelectItem>\n                <SelectItem value=\"banktransfer\">Bank Transfer</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={dateRange} onValueChange={setDateRange}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Date Range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"24h\">Last 24h</SelectItem>\n                <SelectItem value=\"7d\">Last 7 days</SelectItem>\n                <SelectItem value=\"30d\">Last 30 days</SelectItem>\n                <SelectItem value=\"90d\">Last 90 days</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payments Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Transaction</TableHead>\n                <TableHead>Customer</TableHead>\n                <TableHead>Course</TableHead>\n                <TableHead>Amount</TableHead>\n                <TableHead>Method</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredPayments.map((payment) => (\n                <TableRow key={payment.id}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{payment.id}</p>\n                      <p className=\"text-sm text-muted-foreground\">{payment.transactionId}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{payment.userName}</p>\n                      <p className=\"text-sm text-muted-foreground\">{payment.userEmail}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <p className=\"font-medium\">{payment.courseName}</p>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">${payment.amount}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Net: ${payment.netAmount.toFixed(2)}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      {getMethodIcon(payment.paymentMethod)}\n                      <span className=\"text-sm\">{payment.paymentMethod}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getStatusColor(payment.status)}>\n                      {payment.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    {new Date(payment.date).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" variant=\"ghost\" onClick={() => setSelectedPayment(payment)}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle>Payment Details</DialogTitle>\n                          </DialogHeader>\n                          {selectedPayment && (\n                            <div className=\"grid grid-cols-2 gap-6\">\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Transaction ID</Label>\n                                  <p className=\"text-sm font-mono\">{selectedPayment.transactionId}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Customer</Label>\n                                  <p className=\"text-sm\">{selectedPayment.userName}</p>\n                                  <p className=\"text-sm text-muted-foreground\">{selectedPayment.userEmail}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Course</Label>\n                                  <p className=\"text-sm\">{selectedPayment.courseName}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Payment Method</Label>\n                                  <p className=\"text-sm\">{selectedPayment.paymentMethod}</p>\n                                </div>\n                              </div>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Amount</Label>\n                                  <p className=\"text-sm\">${selectedPayment.amount}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Processing Fee</Label>\n                                  <p className=\"text-sm\">${selectedPayment.processingFee.toFixed(2)}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Net Amount</Label>\n                                  <p className=\"text-sm font-medium text-green-600\">${selectedPayment.netAmount.toFixed(2)}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Status</Label>\n                                  <Badge variant={getStatusColor(selectedPayment.status)}>{selectedPayment.status}</Badge>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Date</Label>\n                                  <p className=\"text-sm\">{new Date(selectedPayment.date).toLocaleString()}</p>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                      {payment.status === 'Completed' && (\n                        <Button \n                          size=\"sm\" \n                          variant=\"ghost\"\n                          onClick={() => handlePaymentAction('Refunded', payment.id)}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => handlePaymentAction('Downloaded', payment.id)}\n                      >\n                        <Download className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":17466},"client/src/components/admin/SystemSettings.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Settings, Globe, Bell, Shield, CreditCard, Mail, \n  Database, Server, Lock, Eye, EyeOff, Save, Upload,\n  Trash2, RefreshCw, Download, AlertTriangle\n} from \"lucide-react\";\n\nexport const SystemSettings = () => {\n  const { toast } = useToast();\n  const [showApiKeys, setShowApiKeys] = useState(false);\n  const [settings, setSettings] = useState({\n    siteName: \"HarmonyLearn\",\n    siteDescription: \"Learn music with expert instructors\",\n    allowRegistration: true,\n    requireEmailVerification: true,\n    enableSocialLogin: true,\n    enableNotifications: true,\n    maintenanceMode: false,\n    maxFileSize: \"50\",\n    allowedFileTypes: \"mp4,mp3,pdf,jpg,png\",\n    sessionTimeout: \"60\",\n    emailProvider: \"smtp\",\n    smtpHost: \"smtp.example.com\",\n    smtpPort: \"587\",\n    smtpUsername: \"\",\n    smtpPassword: \"\",\n    stripeApiKey: \"\",\n    paypalClientId: \"\",\n    timezone: \"UTC\",\n    currency: \"USD\",\n    taxRate: \"0\",\n    enableAnalytics: true,\n    googleAnalyticsId: \"\",\n    enableCookieConsent: true\n  });\n\n  const handleSettingChange = (key: string, value: any) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleSaveSettings = () => {\n    toast({\n      title: \"Settings Saved\",\n      description: \"System settings have been updated successfully.\",\n    });\n  };\n\n  const handleBackup = () => {\n    toast({\n      title: \"Backup Created\",\n      description: \"System backup has been created successfully.\",\n    });\n  };\n\n  const handleClearCache = () => {\n    toast({\n      title: \"Cache Cleared\",\n      description: \"System cache has been cleared successfully.\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Settings className=\"h-6 w-6 text-primary\" />\n          <h2 className=\"text-2xl font-bold\">System Settings</h2>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" onClick={handleBackup}>\n            <Download className=\"mr-2 h-4 w-4\" />\n            Backup\n          </Button>\n          <Button variant=\"outline\" onClick={handleClearCache}>\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n            Clear Cache\n          </Button>\n          <Button onClick={handleSaveSettings}>\n            <Save className=\"mr-2 h-4 w-4\" />\n            Save Changes\n          </Button>\n        </div>\n      </div>\n\n      {/* System Status */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Server className=\"mr-2 h-5 w-5\" />\n            System Status\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium\">Server Status</p>\n                <p className=\"text-xs text-muted-foreground\">Online</p>\n              </div>\n              <Badge variant=\"default\" className=\"bg-green-500\">Healthy</Badge>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium\">Database</p>\n                <p className=\"text-xs text-muted-foreground\">Connected</p>\n              </div>\n              <Badge variant=\"default\" className=\"bg-blue-500\">Active</Badge>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-yellow-50 rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium\">Storage</p>\n                <p className=\"text-xs text-muted-foreground\">75% Used</p>\n              </div>\n              <Badge variant=\"secondary\">OK</Badge>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-purple-50 rounded-lg\">\n              <div>\n                <p className=\"text-sm font-medium\">CDN</p>\n                <p className=\"text-xs text-muted-foreground\">Global</p>\n              </div>\n              <Badge variant=\"default\" className=\"bg-purple-500\">Fast</Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* General Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Globe className=\"mr-2 h-5 w-5\" />\n              General Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"siteName\">Site Name</Label>\n              <Input\n                id=\"siteName\"\n                value={settings.siteName}\n                onChange={(e) => handleSettingChange('siteName', e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"siteDescription\">Site Description</Label>\n              <Textarea\n                id=\"siteDescription\"\n                value={settings.siteDescription}\n                onChange={(e) => handleSettingChange('siteDescription', e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"timezone\">Timezone</Label>\n              <Select value={settings.timezone} onValueChange={(value) => handleSettingChange('timezone', value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"UTC\">UTC</SelectItem>\n                  <SelectItem value=\"EST\">Eastern Time</SelectItem>\n                  <SelectItem value=\"PST\">Pacific Time</SelectItem>\n                  <SelectItem value=\"GMT\">Greenwich Mean Time</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"currency\">Default Currency</Label>\n              <Select value={settings.currency} onValueChange={(value) => handleSettingChange('currency', value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"USD\">USD ($)</SelectItem>\n                  <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                  <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                  <SelectItem value=\"CAD\">CAD (C$)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Security Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Shield className=\"mr-2 h-5 w-5\" />\n              Security Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Allow User Registration</Label>\n                <p className=\"text-sm text-muted-foreground\">Enable new user sign-ups</p>\n              </div>\n              <Switch\n                checked={settings.allowRegistration}\n                onCheckedChange={(checked) => handleSettingChange('allowRegistration', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Require Email Verification</Label>\n                <p className=\"text-sm text-muted-foreground\">Users must verify email</p>\n              </div>\n              <Switch\n                checked={settings.requireEmailVerification}\n                onCheckedChange={(checked) => handleSettingChange('requireEmailVerification', checked)}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Label>Enable Social Login</Label>\n                <p className=\"text-sm text-muted-foreground\">Google, Facebook login</p>\n              </div>\n              <Switch\n                checked={settings.enableSocialLogin}\n                onCheckedChange={(checked) => handleSettingChange('enableSocialLogin', checked)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"sessionTimeout\">Session Timeout (minutes)</Label>\n              <Input\n                id=\"sessionTimeout\"\n                type=\"number\"\n                value={settings.sessionTimeout}\n                onChange={(e) => handleSettingChange('sessionTimeout', e.target.value)}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Email Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Mail className=\"mr-2 h-5 w-5\" />\n              Email Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"emailProvider\">Email Provider</Label>\n              <Select value={settings.emailProvider} onValueChange={(value) => handleSettingChange('emailProvider', value)}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"smtp\">SMTP</SelectItem>\n                  <SelectItem value=\"sendgrid\">SendGrid</SelectItem>\n                  <SelectItem value=\"mailgun\">Mailgun</SelectItem>\n                  <SelectItem value=\"ses\">Amazon SES</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"smtpHost\">SMTP Host</Label>\n              <Input\n                id=\"smtpHost\"\n                value={settings.smtpHost}\n                onChange={(e) => handleSettingChange('smtpHost', e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"smtpPort\">SMTP Port</Label>\n              <Input\n                id=\"smtpPort\"\n                value={settings.smtpPort}\n                onChange={(e) => handleSettingChange('smtpPort', e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"smtpUsername\">SMTP Username</Label>\n              <Input\n                id=\"smtpUsername\"\n                value={settings.smtpUsername}\n                onChange={(e) => handleSettingChange('smtpUsername', e.target.value)}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <CreditCard className=\"mr-2 h-5 w-5\" />\n              Payment Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"stripeApiKey\">Stripe API Key</Label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  id=\"stripeApiKey\"\n                  type={showApiKeys ? \"text\" : \"password\"}\n                  value={settings.stripeApiKey}\n                  onChange={(e) => handleSettingChange('stripeApiKey', e.target.value)}\n                  placeholder=\"sk_test_...\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"icon\"\n                  onClick={() => setShowApiKeys(!showApiKeys)}\n                >\n                  {showApiKeys ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"paypalClientId\">PayPal Client ID</Label>\n              <Input\n                id=\"paypalClientId\"\n                type={showApiKeys ? \"text\" : \"password\"}\n                value={settings.paypalClientId}\n                onChange={(e) => handleSettingChange('paypalClientId', e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"taxRate\">Tax Rate (%)</Label>\n              <Input\n                id=\"taxRate\"\n                type=\"number\"\n                step=\"0.01\"\n                value={settings.taxRate}\n                onChange={(e) => handleSettingChange('taxRate', e.target.value)}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* System Maintenance */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <AlertTriangle className=\"mr-2 h-5 w-5\" />\n            System Maintenance\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between p-4 bg-yellow-50 rounded-lg\">\n            <div>\n              <Label className=\"text-base font-medium\">Maintenance Mode</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Enable to make the site temporarily unavailable for maintenance\n              </p>\n            </div>\n            <Switch\n              checked={settings.maintenanceMode}\n              onCheckedChange={(checked) => handleSettingChange('maintenanceMode', checked)}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":13904},"client/src/components/admin/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { \n  Users, Search, Filter, Plus, Edit, Trash2, Eye, Ban, CheckCircle, \n  Mail, Phone, Calendar, Award, BookOpen, Clock, DollarSign \n} from \"lucide-react\";\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n  role: 'Student' | 'Mentor' | 'Admin';\n  status: 'Active' | 'Suspended' | 'Pending' | 'Banned';\n  joinDate: string;\n  lastActive: string;\n  totalCourses: number;\n  totalSpent: number;\n  avatar: string;\n}\n\nexport const UserManagement = () => {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const users: User[] = [\n    {\n      id: 1,\n      name: \"John Doe\",\n      email: \"john@example.com\",\n      phone: \"+1 (555) 123-4567\",\n      role: \"Student\",\n      status: \"Active\",\n      joinDate: \"2024-01-15\",\n      lastActive: \"2024-12-20\",\n      totalCourses: 5,\n      totalSpent: 299.99,\n      avatar: \"/placeholder.svg\"\n    },\n    {\n      id: 2,\n      name: \"Sarah Johnson\", \n      email: \"sarah@example.com\",\n      phone: \"+1 (555) 987-6543\",\n      role: \"Mentor\",\n      status: \"Active\",\n      joinDate: \"2023-08-22\",\n      lastActive: \"2024-12-20\",\n      totalCourses: 12,\n      totalSpent: 0,\n      avatar: \"/placeholder.svg\"\n    },\n    {\n      id: 3,\n      name: \"Mike Chen\",\n      email: \"mike@example.com\", \n      phone: \"+1 (555) 456-7890\",\n      role: \"Student\",\n      status: \"Suspended\",\n      joinDate: \"2024-03-10\",\n      lastActive: \"2024-12-15\",\n      totalCourses: 2,\n      totalSpent: 89.99,\n      avatar: \"/placeholder.svg\"\n    }\n  ];\n\n  const filteredUsers = users.filter(user => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || user.status.toLowerCase() === statusFilter;\n    const matchesRole = roleFilter === \"all\" || user.role.toLowerCase() === roleFilter;\n    \n    return matchesSearch && matchesStatus && matchesRole;\n  });\n\n  const handleUserAction = (action: string, userId: number) => {\n    toast({\n      title: `User ${action}`,\n      description: `User has been ${action.toLowerCase()} successfully.`,\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'Active': return 'default';\n      case 'Suspended': return 'destructive';\n      case 'Pending': return 'secondary';\n      case 'Banned': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case 'Admin': return 'destructive';\n      case 'Mentor': return 'default';\n      case 'Student': return 'secondary';\n      default: return 'secondary';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Users className=\"h-6 w-6 text-primary\" />\n          <h2 className=\"text-2xl font-bold\">User Management</h2>\n        </div>\n        <Dialog>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add User\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New User</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"userName\">Full Name</Label>\n                <Input id=\"userName\" placeholder=\"Enter full name\" />\n              </div>\n              <div>\n                <Label htmlFor=\"userEmail\">Email</Label>\n                <Input id=\"userEmail\" type=\"email\" placeholder=\"Enter email\" />\n              </div>\n              <div>\n                <Label htmlFor=\"userRole\">Role</Label>\n                <Select>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select role\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"student\">Student</SelectItem>\n                    <SelectItem value=\"mentor\">Mentor</SelectItem>\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button className=\"w-full\">Create User</Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search users...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"suspended\">Suspended</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"banned\">Banned</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-full md:w-[150px]\">\n                <SelectValue placeholder=\"Role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Roles</SelectItem>\n                <SelectItem value=\"student\">Student</SelectItem>\n                <SelectItem value=\"mentor\">Mentor</SelectItem>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>User</TableHead>\n                <TableHead>Role</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Join Date</TableHead>\n                <TableHead>Last Active</TableHead>\n                <TableHead>Courses</TableHead>\n                <TableHead>Spent</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredUsers.map((user) => (\n                <TableRow key={user.id}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <span className=\"text-sm font-medium\">\n                          {user.name.split(' ').map(n => n[0]).join('')}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{user.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getRoleColor(user.role)}>\n                      {user.role}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant={getStatusColor(user.status)}>\n                      {user.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>{user.joinDate}</TableCell>\n                  <TableCell>{user.lastActive}</TableCell>\n                  <TableCell>{user.totalCourses}</TableCell>\n                  <TableCell>${user.totalSpent}</TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-1\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" variant=\"ghost\" onClick={() => setSelectedUser(user)}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle>User Details</DialogTitle>\n                          </DialogHeader>\n                          {selectedUser && (\n                            <div className=\"grid grid-cols-2 gap-6\">\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Name</Label>\n                                  <p className=\"text-sm\">{selectedUser.name}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Email</Label>\n                                  <p className=\"text-sm\">{selectedUser.email}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Phone</Label>\n                                  <p className=\"text-sm\">{selectedUser.phone}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Role</Label>\n                                  <Badge variant={getRoleColor(selectedUser.role)}>{selectedUser.role}</Badge>\n                                </div>\n                              </div>\n                              <div className=\"space-y-4\">\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Status</Label>\n                                  <Badge variant={getStatusColor(selectedUser.status)}>{selectedUser.status}</Badge>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Join Date</Label>\n                                  <p className=\"text-sm\">{selectedUser.joinDate}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Total Courses</Label>\n                                  <p className=\"text-sm\">{selectedUser.totalCourses}</p>\n                                </div>\n                                <div>\n                                  <Label className=\"text-sm font-medium text-muted-foreground\">Total Spent</Label>\n                                  <p className=\"text-sm\">${selectedUser.totalSpent}</p>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                      <Button size=\"sm\" variant=\"ghost\">\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => handleUserAction(user.status === 'Active' ? 'Suspended' : 'Activated', user.id)}\n                      >\n                        {user.status === 'Active' ? <Ban className=\"h-4 w-4\" /> : <CheckCircle className=\"h-4 w-4\" />}\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\" \n                        onClick={() => handleUserAction('Deleted', user.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":13480},"client/src/components/classroom/AcademyCreationForm.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { \n  Music, \n  Plus, \n  X, \n  Palette, \n  Globe, \n  MapPin,\n  Phone,\n  Mail,\n  Star,\n  DollarSign,\n  Calendar,\n  Image,\n  Settings\n} from \"lucide-react\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertClassroomSchema } from \"@shared/schema\";\n\n// Create a simplified schema for frontend form validation\nconst academyCreationSchema = z.object({\n  academyName: z.string().min(3, \"Academy name must be at least 3 characters\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  about: z.string().min(20, \"About section must be at least 20 characters\"),\n  curriculum: z.string().min(20, \"Curriculum must be at least 20 characters\"),\n  customSlug: z.string()\n    .min(3, \"URL slug must be at least 3 characters\")\n    .regex(/^[a-z0-9-]+$/, \"URL slug can only contain lowercase letters, numbers, and hyphens\"),\n  instruments: z.array(z.string()).min(1, \"Select at least one instrument\"),\n  features: z.array(z.string()).min(1, \"Add at least one feature\"),\n  maxStudents: z.number().min(1, \"Must allow at least 1 student\").max(1000, \"Cannot exceed 1000 students\"),\n  primaryColor: z.string().regex(/^#[0-9A-F]{6}$/i, \"Must be a valid hex color\"),\n  contactEmail: z.string().email(\"Must be a valid email\").optional().or(z.literal(\"\")),\n  contactPhone: z.string().optional(),\n  website: z.string().url(\"Must be a valid URL\").optional().or(z.literal(\"\")),\n  address: z.string().optional(),\n  isPublic: z.boolean().default(true),\n});\n\ntype AcademyCreationFormData = z.infer<typeof academyCreationSchema>;\n\nconst instrumentOptions = [\n  \"Piano\", \"Keyboard\", \"Acoustic Guitar\", \"Electric Guitar\", \"Bass Guitar\",\n  \"Violin\", \"Viola\", \"Cello\", \"Double Bass\", \"Flute\", \"Clarinet\", \"Saxophone\",\n  \"Trumpet\", \"Trombone\", \"French Horn\", \"Drums\", \"Percussion\", \"Voice\",\n  \"Ukulele\", \"Mandolin\", \"Banjo\", \"Harmonica\", \"Accordion\"\n];\n\nconst defaultFeatures = [\n  \"Expert Instructors\", \"Flexible Scheduling\", \"Small Class Sizes\", \n  \"Performance Opportunities\", \"Practice Rooms\", \"Recording Studio\",\n  \"Music Theory Classes\", \"Ensemble Playing\", \"Individual Lessons\",\n  \"Group Classes\", \"Online Learning\", \"Student Recitals\"\n];\n\ninterface AcademyCreationFormProps {\n  onSuccess?: () => void;\n}\n\nexport function AcademyCreationForm({ onSuccess }: AcademyCreationFormProps) {\n  const [user, setUser] = useState<any>(null);\n  const [selectedInstruments, setSelectedInstruments] = useState<string[]>([]);\n  const [selectedFeatures, setSelectedFeatures] = useState<string[]>([]);\n  const [customFeature, setCustomFeature] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    const currentUser = getCurrentUser();\n    setUser(currentUser);\n  }, []);\n\n  const form = useForm<AcademyCreationFormData>({\n    resolver: zodResolver(academyCreationSchema),\n    defaultValues: {\n      academyName: \"\",\n      description: \"\",\n      about: \"\",\n      curriculum: \"\",\n      customSlug: \"\",\n      instruments: [],\n      features: [],\n      maxStudents: 50,\n      primaryColor: \"#3B82F6\",\n      contactEmail: \"\",\n      contactPhone: \"\",\n      website: \"\",\n      address: \"\",\n      isPublic: true,\n    },\n  });\n\n  // No need for masterId in form since it's handled in submission\n\n  // Update form instruments and features when selected arrays change\n  useEffect(() => {\n    form.setValue(\"instruments\", selectedInstruments);\n  }, [selectedInstruments, form]);\n\n  useEffect(() => {\n    form.setValue(\"features\", selectedFeatures);\n  }, [selectedFeatures, form]);\n\n  const createAcademyMutation = useMutation({\n    mutationFn: (data: AcademyCreationFormData) => \n      apiRequest(\"/api/classrooms\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          // Required legacy fields for database compatibility\n          title: data.academyName,\n          subject: selectedInstruments.join(', ') || \"Music\",\n          level: \"All Levels\",\n          description: data.description,\n          masterId: parseInt(user?.id?.toString() || \"0\"),\n          maxStudents: data.maxStudents,\n          isActive: true,\n          // New academy fields (using camelCase for schema validation)\n          academyName: data.academyName,\n          about: data.about,\n          curriculum: data.curriculum,\n          customSlug: data.customSlug,\n          instruments: selectedInstruments,\n          features: selectedFeatures,\n          primaryColor: data.primaryColor,\n          contactEmail: data.contactEmail || null,\n          contactPhone: data.contactPhone || null,\n          website: data.website || null,\n          address: data.address || null,\n          isPublic: data.isPublic,\n        }),\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"Academy Created!\",\n        description: \"Your music academy has been successfully created and is now live.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\"] });\n      form.reset();\n      setSelectedInstruments([]);\n      setSelectedFeatures([]);\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create academy\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: AcademyCreationFormData) => {\n    createAcademyMutation.mutate(data);\n  };\n\n  const addInstrument = (instrument: string) => {\n    if (!selectedInstruments.includes(instrument)) {\n      setSelectedInstruments([...selectedInstruments, instrument]);\n    }\n  };\n\n  const removeInstrument = (instrument: string) => {\n    setSelectedInstruments(selectedInstruments.filter(i => i !== instrument));\n  };\n\n  const addFeature = (feature: string) => {\n    if (!selectedFeatures.includes(feature) && feature.trim()) {\n      setSelectedFeatures([...selectedFeatures, feature.trim()]);\n    }\n  };\n\n  const removeFeature = (feature: string) => {\n    setSelectedFeatures(selectedFeatures.filter(f => f !== feature));\n  };\n\n  const generateSlug = (name: string) => {\n    return name\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s-]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .trim();\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      <div className=\"text-center\">\n        <h2 className=\"text-3xl font-bold mb-2\">Create Your Music Academy</h2>\n        <p className=\"text-muted-foreground\">\n          Set up your personalized music academy with custom branding and curriculum\n        </p>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-8\">\n          {/* Basic Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Music className=\"h-5 w-5\" />\n                Basic Information\n              </CardTitle>\n              <CardDescription>\n                Tell us about your music academy\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"academyName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Academy Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"e.g., Harmony Music Academy\"\n                          {...field}\n                          onChange={(e) => {\n                            field.onChange(e);\n                            form.setValue(\"customSlug\", generateSlug(e.target.value));\n                          }}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"customSlug\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>URL Slug</FormLabel>\n                      <FormControl>\n                        <div className=\"flex items-center\">\n                          <span className=\"text-sm text-muted-foreground mr-1\">harmonylearn.com/academy/</span>\n                          <Input placeholder=\"harmony-music-academy\" {...field} />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Short Description</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Brief description for academy listings\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"about\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>About Your Academy</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Detailed description of your academy, teaching philosophy, and what makes you unique...\"\n                        rows={4}\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"curriculum\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Curriculum & Teaching Approach</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe your curriculum, teaching methods, and learning progression...\"\n                        rows={4}\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Instruments */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Instruments Taught</CardTitle>\n              <CardDescription>\n                Select the instruments you teach at your academy\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <Select onValueChange={addInstrument}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Add an instrument\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {instrumentOptions\n                      .filter(instrument => !selectedInstruments.includes(instrument))\n                      .map((instrument) => (\n                      <SelectItem key={instrument} value={instrument}>\n                        {instrument}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedInstruments.map((instrument) => (\n                    <Badge key={instrument} variant=\"outline\" className=\"text-sm py-2 px-3\">\n                      {instrument}\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"ml-2 h-auto p-0\"\n                        onClick={() => removeInstrument(instrument)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Features */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Academy Features</CardTitle>\n              <CardDescription>\n                Highlight what makes your academy special\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                  {defaultFeatures\n                    .filter(feature => !selectedFeatures.includes(feature))\n                    .map((feature) => (\n                    <Button\n                      key={feature}\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => addFeature(feature)}\n                      className=\"justify-start\"\n                    >\n                      <Plus className=\"h-3 w-3 mr-1\" />\n                      {feature}\n                    </Button>\n                  ))}\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Add custom feature...\"\n                    value={customFeature}\n                    onChange={(e) => setCustomFeature(e.target.value)}\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        addFeature(customFeature);\n                        setCustomFeature(\"\");\n                      }\n                    }}\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      addFeature(customFeature);\n                      setCustomFeature(\"\");\n                    }}\n                  >\n                    Add\n                  </Button>\n                </div>\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedFeatures.map((feature) => (\n                    <Badge key={feature} className=\"text-sm py-2 px-3\">\n                      {feature}\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"ml-2 h-auto p-0 text-primary-foreground\"\n                        onClick={() => removeFeature(feature)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                Academy Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"maxStudents\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Maximum Students</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"primaryColor\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Palette className=\"h-4 w-4\" />\n                        Primary Color\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"flex gap-2\">\n                          <Input type=\"color\" {...field} className=\"w-16\" />\n                          <Input {...field} placeholder=\"#3B82F6\" />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"isPublic\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center justify-between\">\n                    <div>\n                      <FormLabel>Public Academy</FormLabel>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Allow your academy to be discovered and listed publicly\n                      </p>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Contact Information</CardTitle>\n              <CardDescription>\n                How students and mentors can reach you\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"contactEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Mail className=\"h-4 w-4\" />\n                        Contact Email\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"academy@example.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"contactPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        Phone Number\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"website\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <Globe className=\"h-4 w-4\" />\n                      Website\n                    </FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"https://www.yourwebsite.com\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4\" />\n                      Address\n                    </FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"123 Music St, City, State 12345\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Submit */}\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex justify-end gap-4\">\n                <Button \n                  type=\"submit\" \n                  size=\"lg\"\n                  disabled={createAcademyMutation.isPending || selectedInstruments.length === 0 || selectedFeatures.length === 0}\n                  className=\"min-w-32\"\n                >\n                  {createAcademyMutation.isPending ? \"Creating...\" : \"Create Academy\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </form>\n      </Form>\n    </div>\n  );\n}","size_bytes":22223},"client/src/components/classroom/AcademyEditor.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Save, \n  Upload, \n  Image as ImageIcon, \n  Palette, \n  Type, \n  Star,\n  Plus,\n  X,\n  Eye,\n  Settings,\n  Globe,\n  Phone,\n  Mail,\n  MapPin,\n  Instagram,\n  Facebook,\n  Twitter,\n  Youtube,\n  DollarSign\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Classroom } from \"@shared/schema\";\n\ninterface AcademyEditorProps {\n  classroom: Classroom;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst academyEditorSchema = z.object({\n  academyName: z.string().min(1, \"Academy name is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  about: z.string().optional(),\n  curriculum: z.string().optional(),\n  heroImage: z.string().url().optional().or(z.literal(\"\")),\n  logoImage: z.string().url().optional().or(z.literal(\"\")),\n  aboutImage: z.string().url().optional().or(z.literal(\"\")),\n  primaryColor: z.string().optional(),\n  secondaryColor: z.string().optional(),\n  features: z.array(z.string()).optional(),\n  instruments: z.array(z.string()).optional(),\n  contactEmail: z.string().email().optional().or(z.literal(\"\")),\n  contactPhone: z.string().optional(),\n  website: z.string().url().optional().or(z.literal(\"\")),\n  address: z.string().optional(),\n  socialLinks: z.object({\n    instagram: z.string().url().optional().or(z.literal(\"\")),\n    facebook: z.string().url().optional().or(z.literal(\"\")),\n    twitter: z.string().url().optional().or(z.literal(\"\")),\n    youtube: z.string().url().optional().or(z.literal(\"\")),\n  }).optional(),\n  pricing: z.array(z.object({\n    name: z.string(),\n    price: z.string(),\n    description: z.string().optional(),\n    features: z.array(z.string()).optional(),\n  })).optional(),\n  testimonials: z.array(z.object({\n    name: z.string(),\n    text: z.string(),\n    rating: z.number().min(1).max(5).optional(),\n    role: z.string().optional(),\n    avatar: z.string().url().optional().or(z.literal(\"\")),\n  })).optional(),\n});\n\ntype AcademyEditorFormData = z.infer<typeof academyEditorSchema>;\n\nexport function AcademyEditor({ classroom, isOpen, onClose }: AcademyEditorProps) {\n  const [activeTab, setActiveTab] = useState<'general' | 'design' | 'content' | 'contact' | 'pricing'>('general');\n  const [newFeature, setNewFeature] = useState(\"\");\n  const [newInstrument, setNewInstrument] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Safe JSON parsing with comprehensive error handling\n  const safeJsonParse = (jsonString: string | null | undefined, fallback: any) => {\n    if (!jsonString || jsonString.trim() === '' || jsonString === 'null' || jsonString === 'undefined') {\n      return fallback;\n    }\n    \n    // Check for malformed JSON patterns\n    if (jsonString.includes('<!DOCTYPE') || jsonString.includes('<html')) {\n      console.warn('Received HTML instead of JSON:', jsonString.substring(0, 100));\n      return fallback;\n    }\n    \n    try {\n      const parsed = JSON.parse(jsonString);\n      return parsed;\n    } catch (error) {\n      console.warn('Failed to parse JSON in AcademyEditor:', {\n        input: jsonString.substring(0, 200) + (jsonString.length > 200 ? '...' : ''),\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return fallback;\n    }\n  };\n\n  const parsedSocialLinks = safeJsonParse(classroom?.socialLinks, {});\n  const parsedPricing = safeJsonParse(classroom?.pricing, []);\n  const parsedTestimonials = safeJsonParse(classroom?.testimonials, []);\n\n  const form = useForm<AcademyEditorFormData>({\n    resolver: zodResolver(academyEditorSchema),\n    defaultValues: {\n      academyName: classroom.academyName || \"\",\n      description: classroom.description || \"\",\n      about: classroom.about || \"\",\n      curriculum: classroom.curriculum || \"\",\n      heroImage: classroom.heroImage || \"\",\n      logoImage: classroom.logoImage || \"\",\n      aboutImage: classroom.aboutImage || \"\",\n      primaryColor: classroom.primaryColor || \"#3B82F6\",\n      secondaryColor: classroom.secondaryColor || \"#10B981\",\n      features: classroom.features || [],\n      instruments: classroom.instruments || [],\n      contactEmail: classroom.contactEmail || \"\",\n      contactPhone: classroom.contactPhone || \"\",\n      website: classroom.website || \"\",\n      address: classroom.address || \"\",\n      socialLinks: parsedSocialLinks,\n      pricing: parsedPricing,\n      testimonials: parsedTestimonials,\n    },\n  });\n\n  const updateAcademyMutation = useMutation({\n    mutationFn: (data: AcademyEditorFormData) => {\n      try {\n        // Clean and prepare the data for JSON serialization\n        const cleanData = {\n          ...data,\n          // Remove any undefined values that might cause JSON issues\n          academyName: data.academyName || \"\",\n          description: data.description || \"\",\n          about: data.about || \"\",\n          curriculum: data.curriculum || \"\",\n          heroImage: data.heroImage || \"\",\n          logoImage: data.logoImage || \"\",\n          aboutImage: data.aboutImage || \"\",\n          primaryColor: data.primaryColor || \"#3B82F6\",\n          secondaryColor: data.secondaryColor || \"#10B981\",\n          features: data.features || [],\n          instruments: data.instruments || [],\n          contactEmail: data.contactEmail || \"\",\n          contactPhone: data.contactPhone || \"\",\n          website: data.website || \"\",\n          address: data.address || \"\",\n        };\n\n        // Safely stringify JSON fields\n        const requestBody = {\n          ...cleanData,\n          socialLinks: JSON.stringify(data.socialLinks || {}),\n          pricing: JSON.stringify(data.pricing || []),\n          testimonials: JSON.stringify(data.testimonials || []),\n        };\n\n        console.log('Sending update request with data:', requestBody);\n        \n        return apiRequest(`/api/classrooms/${classroom.id}`, {\n          method: \"PUT\",\n          body: JSON.stringify(requestBody),\n        });\n      } catch (error) {\n        console.error('Error preparing academy data for update:', error);\n        console.error('Form data causing error:', data);\n        throw new Error(`Failed to prepare data: ${error instanceof Error ? error.message : String(error)}`);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Academy Updated!\",\n        description: \"Your academy landing page has been successfully updated.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms/slug\", classroom.customSlug] });\n      onClose();\n    },\n    onError: (error: any) => {\n      console.error('Academy update error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update academy\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: AcademyEditorFormData) => {\n    updateAcademyMutation.mutate(data);\n  };\n\n  const addFeature = () => {\n    if (newFeature.trim()) {\n      const currentFeatures = form.getValues(\"features\") || [];\n      form.setValue(\"features\", [...currentFeatures, newFeature.trim()]);\n      setNewFeature(\"\");\n    }\n  };\n\n  const removeFeature = (index: number) => {\n    const currentFeatures = form.getValues(\"features\") || [];\n    form.setValue(\"features\", currentFeatures.filter((_, i) => i !== index));\n  };\n\n  const addInstrument = () => {\n    if (newInstrument.trim()) {\n      const currentInstruments = form.getValues(\"instruments\") || [];\n      form.setValue(\"instruments\", [...currentInstruments, newInstrument.trim()]);\n      setNewInstrument(\"\");\n    }\n  };\n\n  const removeInstrument = (index: number) => {\n    const currentInstruments = form.getValues(\"instruments\") || [];\n    form.setValue(\"instruments\", currentInstruments.filter((_, i) => i !== index));\n  };\n\n  const addPricingPlan = () => {\n    const currentPricing = form.getValues(\"pricing\") || [];\n    form.setValue(\"pricing\", [...currentPricing, {\n      name: \"New Plan\",\n      price: \"$0\",\n      description: \"\",\n      features: [],\n    }]);\n  };\n\n  const removePricingPlan = (index: number) => {\n    const currentPricing = form.getValues(\"pricing\") || [];\n    form.setValue(\"pricing\", currentPricing.filter((_, i) => i !== index));\n  };\n\n  const addTestimonial = () => {\n    const currentTestimonials = form.getValues(\"testimonials\") || [];\n    form.setValue(\"testimonials\", [...currentTestimonials, {\n      name: \"Student Name\",\n      text: \"Amazing academy! Highly recommended.\",\n      rating: 5,\n      role: \"Student\",\n      avatar: \"\",\n    }]);\n  };\n\n  const removeTestimonial = (index: number) => {\n    const currentTestimonials = form.getValues(\"testimonials\") || [];\n    form.setValue(\"testimonials\", currentTestimonials.filter((_, i) => i !== index));\n  };\n\n  const tabs = [\n    { id: 'general' as const, label: 'General', icon: Settings },\n    { id: 'design' as const, label: 'Design', icon: Palette },\n    { id: 'content' as const, label: 'Content', icon: Type },\n    { id: 'contact' as const, label: 'Contact', icon: Phone },\n    { id: 'pricing' as const, label: 'Pricing', icon: DollarSign },\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] p-0\">\n        <DialogHeader className=\"p-6 pb-0\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Edit Academy Landing Page\n          </DialogTitle>\n          <DialogDescription>\n            Customize your academy's landing page to attract and engage students\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex flex-1 overflow-hidden\">\n          {/* Sidebar Navigation */}\n          <div className=\"w-48 border-r bg-muted/30\">\n            <div className=\"p-4 space-y-1\">\n              {tabs.map((tab) => {\n                const Icon = tab.icon;\n                return (\n                  <Button\n                    key={tab.id}\n                    variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n                    className=\"w-full justify-start\"\n                    onClick={() => setActiveTab(tab.id)}\n                  >\n                    <Icon className=\"h-4 w-4 mr-2\" />\n                    {tab.label}\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Content Area */}\n          <div className=\"flex-1 overflow-hidden\">\n            <ScrollArea className=\"h-[70vh]\">\n              <div className=\"p-6\">\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                    \n                    {/* General Tab */}\n                    {activeTab === 'general' && (\n                      <div className=\"space-y-6\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                          <FormField\n                            control={form.control}\n                            name=\"academyName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Academy Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Your Academy Name\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"description\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Short Description</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Brief description of your academy\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name=\"about\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>About Your Academy</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Tell students about your academy's mission, teaching philosophy, and what makes it special...\"\n                                  className=\"min-h-[120px]\"\n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"curriculum\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Curriculum Overview</FormLabel>\n                              <FormControl>\n                                <Textarea \n                                  placeholder=\"Describe your teaching approach, curriculum structure, and learning outcomes...\"\n                                  className=\"min-h-[100px]\"\n                                  {...field} \n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        {/* Instruments */}\n                        <div>\n                          <FormLabel>Instruments Taught</FormLabel>\n                          <div className=\"mt-2 space-y-3\">\n                            <div className=\"flex flex-wrap gap-2\">\n                              {(form.watch(\"instruments\") || []).map((instrument, index) => (\n                                <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                                  {instrument}\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"h-auto p-0 ml-1\"\n                                    onClick={() => removeInstrument(index)}\n                                  >\n                                    <X className=\"h-3 w-3\" />\n                                  </Button>\n                                </Badge>\n                              ))}\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Input\n                                placeholder=\"Add instrument (e.g., Piano, Guitar)\"\n                                value={newInstrument}\n                                onChange={(e) => setNewInstrument(e.target.value)}\n                                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addInstrument())}\n                              />\n                              <Button type=\"button\" onClick={addInstrument}>\n                                <Plus className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Design Tab */}\n                    {activeTab === 'design' && (\n                      <div className=\"space-y-6\">\n                        <Card>\n                          <CardHeader>\n                            <CardTitle className=\"flex items-center gap-2\">\n                              <ImageIcon className=\"h-5 w-5\" />\n                              Images\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"logoImage\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Academy Logo</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"https://example.com/logo.png\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"heroImage\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Hero Background Image</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"https://example.com/hero.jpg\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"aboutImage\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>About Section Image</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"https://example.com/about.jpg\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </CardContent>\n                        </Card>\n\n                        <Card>\n                          <CardHeader>\n                            <CardTitle className=\"flex items-center gap-2\">\n                              <Palette className=\"h-5 w-5\" />\n                              Colors\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <FormField\n                                control={form.control}\n                                name=\"primaryColor\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Primary Color</FormLabel>\n                                    <FormControl>\n                                      <div className=\"flex gap-2\">\n                                        <Input type=\"color\" className=\"w-16 h-10\" {...field} />\n                                        <Input placeholder=\"#3B82F6\" {...field} />\n                                      </div>\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={form.control}\n                                name=\"secondaryColor\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Secondary Color</FormLabel>\n                                    <FormControl>\n                                      <div className=\"flex gap-2\">\n                                        <Input type=\"color\" className=\"w-16 h-10\" {...field} />\n                                        <Input placeholder=\"#10B981\" {...field} />\n                                      </div>\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </div>\n                    )}\n\n                    {/* Content Tab */}\n                    {activeTab === 'content' && (\n                      <div className=\"space-y-6\">\n                        {/* Features */}\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>Academy Features</CardTitle>\n                            <CardDescription>Highlight what makes your academy special</CardDescription>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            <div className=\"flex flex-wrap gap-2\">\n                              {(form.watch(\"features\") || []).map((feature, index) => (\n                                <Badge key={index} variant=\"outline\" className=\"flex items-center gap-1\">\n                                  {feature}\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    className=\"h-auto p-0 ml-1\"\n                                    onClick={() => removeFeature(index)}\n                                  >\n                                    <X className=\"h-3 w-3\" />\n                                  </Button>\n                                </Badge>\n                              ))}\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Input\n                                placeholder=\"Add feature (e.g., One-on-one lessons)\"\n                                value={newFeature}\n                                onChange={(e) => setNewFeature(e.target.value)}\n                                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addFeature())}\n                              />\n                              <Button type=\"button\" onClick={addFeature}>\n                                <Plus className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n\n                        {/* Testimonials */}\n                        <Card>\n                          <CardHeader>\n                            <CardTitle className=\"flex items-center justify-between\">\n                              <span>Student Testimonials</span>\n                              <Button type=\"button\" size=\"sm\" onClick={addTestimonial}>\n                                <Plus className=\"h-4 w-4 mr-1\" />\n                                Add\n                              </Button>\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            {(form.watch(\"testimonials\") || []).map((testimonial, index) => (\n                              <div key={index} className=\"border rounded-lg p-4 space-y-3\">\n                                <div className=\"flex justify-between items-start\">\n                                  <h4 className=\"font-medium\">Testimonial {index + 1}</h4>\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => removeTestimonial(index)}\n                                  >\n                                    <X className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                                <div className=\"grid grid-cols-2 gap-3\">\n                                  <Input\n                                    placeholder=\"Student Name\"\n                                    value={testimonial.name}\n                                    onChange={(e) => {\n                                      const testimonials = form.getValues(\"testimonials\") || [];\n                                      testimonials[index].name = e.target.value;\n                                      form.setValue(\"testimonials\", testimonials);\n                                    }}\n                                  />\n                                  <Input\n                                    placeholder=\"Role (e.g., Piano Student)\"\n                                    value={testimonial.role || \"\"}\n                                    onChange={(e) => {\n                                      const testimonials = form.getValues(\"testimonials\") || [];\n                                      testimonials[index].role = e.target.value;\n                                      form.setValue(\"testimonials\", testimonials);\n                                    }}\n                                  />\n                                </div>\n                                <Textarea\n                                  placeholder=\"What did they say about your academy?\"\n                                  value={testimonial.text}\n                                  onChange={(e) => {\n                                    const testimonials = form.getValues(\"testimonials\") || [];\n                                    testimonials[index].text = e.target.value;\n                                    form.setValue(\"testimonials\", testimonials);\n                                  }}\n                                />\n                                <div className=\"grid grid-cols-2 gap-3\">\n                                  <Input\n                                    type=\"number\"\n                                    min=\"1\"\n                                    max=\"5\"\n                                    placeholder=\"Rating (1-5)\"\n                                    value={testimonial.rating || 5}\n                                    onChange={(e) => {\n                                      const testimonials = form.getValues(\"testimonials\") || [];\n                                      testimonials[index].rating = parseInt(e.target.value);\n                                      form.setValue(\"testimonials\", testimonials);\n                                    }}\n                                  />\n                                  <Input\n                                    placeholder=\"Avatar URL (optional)\"\n                                    value={testimonial.avatar || \"\"}\n                                    onChange={(e) => {\n                                      const testimonials = form.getValues(\"testimonials\") || [];\n                                      testimonials[index].avatar = e.target.value;\n                                      form.setValue(\"testimonials\", testimonials);\n                                    }}\n                                  />\n                                </div>\n                              </div>\n                            ))}\n                          </CardContent>\n                        </Card>\n                      </div>\n                    )}\n\n                    {/* Contact Tab */}\n                    {activeTab === 'contact' && (\n                      <div className=\"space-y-6\">\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>Contact Information</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              <FormField\n                                control={form.control}\n                                name=\"contactEmail\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel className=\"flex items-center gap-2\">\n                                      <Mail className=\"h-4 w-4\" />\n                                      Email\n                                    </FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"contact@academy.com\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={form.control}\n                                name=\"contactPhone\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel className=\"flex items-center gap-2\">\n                                      <Phone className=\"h-4 w-4\" />\n                                      Phone\n                                    </FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"+1 (555) 123-4567\" {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                            <FormField\n                              control={form.control}\n                              name=\"website\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel className=\"flex items-center gap-2\">\n                                    <Globe className=\"h-4 w-4\" />\n                                    Website\n                                  </FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"https://www.academy.com\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"address\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel className=\"flex items-center gap-2\">\n                                    <MapPin className=\"h-4 w-4\" />\n                                    Address\n                                  </FormLabel>\n                                  <FormControl>\n                                    <Textarea placeholder=\"123 Music Street, City, State 12345\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </CardContent>\n                        </Card>\n\n                        <Card>\n                          <CardHeader>\n                            <CardTitle>Social Media Links</CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"socialLinks.instagram\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel className=\"flex items-center gap-2\">\n                                    <Instagram className=\"h-4 w-4\" />\n                                    Instagram\n                                  </FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"https://instagram.com/youracademy\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"socialLinks.facebook\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel className=\"flex items-center gap-2\">\n                                    <Facebook className=\"h-4 w-4\" />\n                                    Facebook\n                                  </FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"https://facebook.com/youracademy\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"socialLinks.twitter\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel className=\"flex items-center gap-2\">\n                                    <Twitter className=\"h-4 w-4\" />\n                                    Twitter\n                                  </FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"https://twitter.com/youracademy\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={form.control}\n                              name=\"socialLinks.youtube\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel className=\"flex items-center gap-2\">\n                                    <Youtube className=\"h-4 w-4\" />\n                                    YouTube\n                                  </FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"https://youtube.com/youracademy\" {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </CardContent>\n                        </Card>\n                      </div>\n                    )}\n\n                    {/* Pricing Tab */}\n                    {activeTab === 'pricing' && (\n                      <div className=\"space-y-6\">\n                        <Card>\n                          <CardHeader>\n                            <CardTitle className=\"flex items-center justify-between\">\n                              <span>Pricing Plans</span>\n                              <Button type=\"button\" size=\"sm\" onClick={addPricingPlan}>\n                                <Plus className=\"h-4 w-4 mr-1\" />\n                                Add Plan\n                              </Button>\n                            </CardTitle>\n                          </CardHeader>\n                          <CardContent className=\"space-y-6\">\n                            {(form.watch(\"pricing\") || []).map((plan, index) => (\n                              <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n                                <div className=\"flex justify-between items-start\">\n                                  <h4 className=\"font-medium\">Plan {index + 1}</h4>\n                                  <Button\n                                    type=\"button\"\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => removePricingPlan(index)}\n                                  >\n                                    <X className=\"h-4 w-4\" />\n                                  </Button>\n                                </div>\n                                <div className=\"grid grid-cols-2 gap-3\">\n                                  <Input\n                                    placeholder=\"Plan Name\"\n                                    value={plan.name}\n                                    onChange={(e) => {\n                                      const pricing = form.getValues(\"pricing\") || [];\n                                      pricing[index].name = e.target.value;\n                                      form.setValue(\"pricing\", pricing);\n                                    }}\n                                  />\n                                  <Input\n                                    placeholder=\"Price (e.g., $50/month)\"\n                                    value={plan.price}\n                                    onChange={(e) => {\n                                      const pricing = form.getValues(\"pricing\") || [];\n                                      pricing[index].price = e.target.value;\n                                      form.setValue(\"pricing\", pricing);\n                                    }}\n                                  />\n                                </div>\n                                <Textarea\n                                  placeholder=\"Plan description\"\n                                  value={plan.description || \"\"}\n                                  onChange={(e) => {\n                                    const pricing = form.getValues(\"pricing\") || [];\n                                    pricing[index].description = e.target.value;\n                                    form.setValue(\"pricing\", pricing);\n                                  }}\n                                />\n                              </div>\n                            ))}\n                            {(form.watch(\"pricing\") || []).length === 0 && (\n                              <div className=\"text-center py-8 text-muted-foreground\">\n                                <DollarSign className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                                <p>No pricing plans yet. Add your first plan above.</p>\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      </div>\n                    )}\n\n                    <Separator />\n\n                    {/* Action Buttons */}\n                    <div className=\"flex justify-between items-center pt-4\">\n                      <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                        Cancel\n                      </Button>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => window.open(`/academy/${classroom.customSlug}`, '_blank')}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          Preview\n                        </Button>\n                        <Button type=\"submit\" disabled={updateAcademyMutation.isPending}>\n                          <Save className=\"h-4 w-4 mr-2\" />\n                          {updateAcademyMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                        </Button>\n                      </div>\n                    </div>\n                  </form>\n                </Form>\n              </div>\n            </ScrollArea>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":41381},"client/src/components/classroom/ClassroomContent.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  BookOpen, \n  Play, \n  Clock, \n  Users, \n  TrendingUp, \n  Award,\n  Calendar,\n  MessageSquare,\n  Target,\n  Brain\n} from \"lucide-react\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\ninterface ClassroomContentProps {\n  role: Role;\n  activeTab: string;\n  classroomId: string;\n}\n\nexport const ClassroomContent = ({ role, activeTab, classroomId }: ClassroomContentProps) => {\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      {/* Welcome Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            Advanced Piano Techniques\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground mb-4\">\n            Master advanced piano playing techniques and musical expression through structured lessons and practice.\n          </p>\n          <div className=\"flex items-center gap-4\">\n            <Badge>Advanced Level</Badge>\n            <Badge variant=\"secondary\">Piano</Badge>\n            <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n              <Users className=\"h-4 w-4\" />\n              24 students\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {role === \"student\" ? \"Your Progress\" : \"Class Progress\"}\n                </p>\n                <p className=\"text-2xl font-bold\">75%</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-primary\" />\n            </div>\n            <Progress value={75} className=\"mt-3\" />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Next Class</p>\n                <p className=\"text-lg font-semibold\">Tomorrow 2:00 PM</p>\n              </div>\n              <Clock className=\"h-8 w-8 text-secondary\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {role === \"student\" ? \"XP Points\" : \"Active Students\"}\n                </p>\n                <p className=\"text-2xl font-bold\">\n                  {role === \"student\" ? \"1,250\" : \"18\"}\n                </p>\n              </div>\n              {role === \"student\" ? (\n                <Award className=\"h-8 w-8 text-accent\" />\n              ) : (\n                <Users className=\"h-8 w-8 text-accent\" />\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activity</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[\n              { action: \"Completed Lesson 8: Advanced Harmonies\", time: \"2 hours ago\", type: \"lesson\" },\n              { action: \"New assignment posted: Chopin Etude Analysis\", time: \"1 day ago\", type: \"assignment\" },\n              { action: \"Live class recording available\", time: \"2 days ago\", type: \"recording\" }\n            ].map((activity, idx) => (\n              <div key={idx} className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/30\">\n                <div className={`p-2 rounded-full ${\n                  activity.type === \"lesson\" ? \"bg-primary/10\" :\n                  activity.type === \"assignment\" ? \"bg-secondary/10\" : \"bg-accent/10\"\n                }`}>\n                  {activity.type === \"lesson\" && <BookOpen className=\"h-4 w-4\" />}\n                  {activity.type === \"assignment\" && <Target className=\"h-4 w-4\" />}\n                  {activity.type === \"recording\" && <Play className=\"h-4 w-4\" />}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">{activity.action}</p>\n                  <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderLessons = () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Course Lessons</h2>\n        {role !== \"student\" && (\n          <Button>Add New Lesson</Button>\n        )}\n      </div>\n      \n      <div className=\"grid gap-4\">\n        {Array.from({ length: 5 }, (_, i) => (\n          <Card key={i}>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg\">Lesson {i + 1}: Advanced Chord Progressions</CardTitle>\n                <Badge variant={i < 3 ? \"default\" : \"secondary\"}>\n                  {i < 3 ? \"Completed\" : \"Locked\"}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\">\n                Learn complex chord progressions and how to use them in different musical contexts.\n              </p>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center gap-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    45 min\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Play className=\"h-4 w-4\" />\n                    Video + Practice\n                  </div>\n                </div>\n                <Button variant={i < 3 ? \"outline\" : \"default\"} disabled={i >= 3}>\n                  {i < 3 ? \"Review\" : \"Start Lesson\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"overview\":\n        return renderOverview();\n      case \"lessons\":\n        return renderLessons();\n      case \"schedule\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Class Schedule</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Schedule component coming soon...</p>\n            </CardContent>\n          </Card>\n        );\n      case \"discussions\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Discussions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Discussion forum coming soon...</p>\n            </CardContent>\n          </Card>\n        );\n      case \"progress\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>My Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Progress tracking coming soon...</p>\n            </CardContent>\n          </Card>\n        );\n      case \"assignments\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Assignments</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Assignments list coming soon...</p>\n            </CardContent>\n          </Card>\n        );\n      case \"students\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Students Management</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Student management coming soon...</p>\n            </CardContent>\n          </Card>\n        );\n      case \"analytics\":\n        return (\n          <Card>\n            <CardHeader>\n              <CardTitle>Analytics Dashboard</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground\">Analytics dashboard coming soon...</p>\n            </CardContent>\n          </Card>\n        );\n      default:\n        return renderOverview();\n    }\n  };\n\n  return (\n    <div className=\"flex-1\">\n      {renderContent()}\n    </div>\n  );\n};","size_bytes":8916},"client/src/components/classroom/ClassroomList.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Users, \n  BookOpen, \n  Clock, \n  Play, \n  Settings, \n  TrendingUp,\n  Calendar,\n  Bell\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\ninterface ClassroomListProps {\n  role: Role;\n}\n\nconst mockClassrooms = [\n  {\n    id: \"1\",\n    title: \"Advanced Piano Techniques\",\n    description: \"Master advanced piano playing techniques and musical expression\",\n    subject: \"Piano\",\n    students: 24,\n    lessons: 12,\n    progress: 75,\n    nextClass: \"Tomorrow 2:00 PM\",\n    instructor: \"Dr. Sarah Williams\",\n    status: \"active\",\n    level: \"Advanced\",\n    xp: 1200\n  },\n  {\n    id: \"2\", \n    title: \"Guitar Fundamentals\",\n    description: \"Learn the basics of guitar playing from chords to scales\",\n    subject: \"Guitar\",\n    students: 18,\n    lessons: 8,\n    progress: 45,\n    nextClass: \"Friday 4:00 PM\",\n    instructor: \"Marcus Johnson\",\n    status: \"active\",\n    level: \"Beginner\",\n    xp: 650\n  },\n  {\n    id: \"3\",\n    title: \"Vocal Performance Mastery\",\n    description: \"Develop your voice and stage presence for performances\",\n    subject: \"Vocals\",\n    students: 15,\n    lessons: 10,\n    progress: 90,\n    nextClass: \"Monday 6:00 PM\",\n    instructor: \"Elena Rodriguez\",\n    status: \"active\",\n    level: \"Intermediate\",\n    xp: 980\n  }\n];\n\nexport const ClassroomList = ({ role }: ClassroomListProps) => {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid gap-6\">\n        {mockClassrooms.map((classroom) => (\n          <Card key={classroom.id} className=\"group hover:shadow-musical transition-all duration-300\">\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <CardTitle className=\"text-xl\">{classroom.title}</CardTitle>\n                    <Badge variant=\"secondary\">{classroom.level}</Badge>\n                    <Badge variant=\"outline\">{classroom.subject}</Badge>\n                  </div>\n                  <p className=\"text-muted-foreground mb-3\">{classroom.description}</p>\n                  \n                  <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                    <div className=\"flex items-center gap-1\">\n                      <Users className=\"h-4 w-4\" />\n                      {classroom.students} students\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <BookOpen className=\"h-4 w-4\" />\n                      {classroom.lessons} lessons\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Clock className=\"h-4 w-4\" />\n                      {classroom.nextClass}\n                    </div>\n                    {role === \"student\" && (\n                      <div className=\"flex items-center gap-1\">\n                        <TrendingUp className=\"h-4 w-4\" />\n                        {classroom.xp} XP\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col items-end gap-2\">\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarFallback>{classroom.instructor.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                  </Avatar>\n                  <div className=\"text-sm text-muted-foreground text-right\">\n                    {classroom.instructor}\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n\n            <CardContent>\n              {/* Progress Bar for Students */}\n              {role === \"student\" && (\n                <div className=\"mb-4\">\n                  <div className=\"flex justify-between text-sm mb-1\">\n                    <span>Progress</span>\n                    <span>{classroom.progress}%</span>\n                  </div>\n                  <div className=\"w-full bg-muted rounded-full h-2\">\n                    <div \n                      className=\"bg-gradient-to-r from-primary to-secondary h-2 rounded-full transition-all\"\n                      style={{ width: `${classroom.progress}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex gap-2\">\n                  <Button asChild>\n                    <Link to={`/classroom/dashboard/${classroom.id}`}>\n                      <BookOpen className=\"h-4 w-4 mr-2\" />\n                      Enter Classroom\n                    </Link>\n                  </Button>\n                  \n                  {role !== \"student\" && (\n                    <Button variant=\"outline\" asChild>\n                      <Link to={`/classroom/manage?id=${classroom.id}`}>\n                        <Settings className=\"h-4 w-4 mr-2\" />\n                        Manage\n                      </Link>\n                    </Button>\n                  )}\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Calendar className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <Bell className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"secondary\" size=\"sm\">\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Join Live\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {mockClassrooms.length === 0 && (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <BookOpen className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">\n              {role === \"student\" ? \"No Classrooms Enrolled\" : \"No Classrooms Created\"}\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              {role === \"student\" \n                ? \"Explore and join classrooms to start your learning journey\"\n                : \"Create your first classroom to start teaching\"\n              }\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};","size_bytes":6650},"client/src/components/classroom/ClassroomSidebar.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  LayoutDashboard,\n  BookOpen,\n  Users,\n  Calendar,\n  MessageSquare,\n  BarChart3,\n  Settings,\n  Play,\n  HelpCircle,\n  Award,\n  Target,\n  Brain\n} from \"lucide-react\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\ninterface ClassroomSidebarProps {\n  role: Role;\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  classroomId: string;\n}\n\nconst getTabsForRole = (role: Role) => {\n  const commonTabs = [\n    { id: \"overview\", label: \"Overview\", icon: LayoutDashboard },\n    { id: \"lessons\", label: \"Lessons\", icon: BookOpen },\n    { id: \"schedule\", label: \"Schedule\", icon: Calendar },\n    { id: \"discussions\", label: \"Discussions\", icon: MessageSquare },\n  ];\n\n  const studentTabs = [\n    ...commonTabs,\n    { id: \"progress\", label: \"My Progress\", icon: BarChart3 },\n    { id: \"assignments\", label: \"Assignments\", icon: Target },\n    { id: \"ai-feedback\", label: \"AI Feedback\", icon: Brain },\n    { id: \"achievements\", label: \"Achievements\", icon: Award },\n    { id: \"doubts\", label: \"Ask Doubts\", icon: HelpCircle },\n  ];\n\n  const mentorTabs = [\n    ...commonTabs,\n    { id: \"students\", label: \"Students\", icon: Users },\n    { id: \"analytics\", label: \"Analytics\", icon: BarChart3 },\n    { id: \"content\", label: \"Content\", icon: BookOpen },\n    { id: \"live-sessions\", label: \"Live Sessions\", icon: Play },\n    { id: \"settings\", label: \"Settings\", icon: Settings },\n  ];\n\n  return role === \"student\" ? studentTabs : mentorTabs;\n};\n\nexport const ClassroomSidebar = ({ role, activeTab, onTabChange, classroomId }: ClassroomSidebarProps) => {\n  const tabs = getTabsForRole(role);\n\n  return (\n    <Card className=\"w-64 h-fit\">\n      <CardContent className=\"p-4\">\n        <div className=\"space-y-2\">\n          {tabs.map((tab) => {\n            const Icon = tab.icon;\n            const isActive = activeTab === tab.id;\n            \n            return (\n              <Button\n                key={tab.id}\n                variant={isActive ? \"default\" : \"ghost\"}\n                className=\"w-full justify-start\"\n                onClick={() => onTabChange(tab.id)}\n              >\n                <Icon className=\"h-4 w-4 mr-3\" />\n                {tab.label}\n                {tab.id === \"doubts\" && role === \"student\" && (\n                  <Badge variant=\"secondary\" className=\"ml-auto text-xs\">\n                    3\n                  </Badge>\n                )}\n                {tab.id === \"assignments\" && role === \"student\" && (\n                  <Badge variant=\"destructive\" className=\"ml-auto text-xs\">\n                    2\n                  </Badge>\n                )}\n              </Button>\n            );\n          })}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-6 pt-4 border-t\">\n          <h4 className=\"text-sm font-medium mb-3\">Quick Actions</h4>\n          <div className=\"space-y-2\">\n            {role === \"student\" ? (\n              <>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Practice Mode\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                  <HelpCircle className=\"h-4 w-4 mr-2\" />\n                  Ask Question\n                </Button>\n              </>\n            ) : (\n              <>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Start Live Class\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                  <MessageSquare className=\"h-4 w-4 mr-2\" />\n                  Send Announcement\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Classroom Info */}\n        <div className=\"mt-6 pt-4 border-t\">\n          <h4 className=\"text-sm font-medium mb-2\">Classroom Info</h4>\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <div>24 students enrolled</div>\n            <div>12 lessons completed</div>\n            <div>Next class: Tomorrow 2:00 PM</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":4336},"client/src/components/classroom/CreateClassroomButton.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { z } from \"zod\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\ninterface CreateClassroomButtonProps {\n  role: Role;\n}\n\nconst classroomFormSchema = z.object({\n  title: z.string().min(1, \"Classroom title is required\"),\n  description: z.string().min(1, \"Description is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  level: z.string().min(1, \"Level is required\"),\n  maxStudents: z.string().min(1, \"Max students is required\"),\n});\n\ntype ClassroomFormData = z.infer<typeof classroomFormSchema>;\n\nconst subjects = [\n  \"Piano\", \"Guitar\", \"Vocals\", \"Drums\", \"Violin\", \"Bass\", \n  \"Music Theory\", \"Composition\", \"Production\", \"Other\"\n];\n\nconst levels = [\"Beginner\", \"Intermediate\", \"Advanced\", \"All Levels\"];\n\nexport const CreateClassroomButton = ({ role }: CreateClassroomButtonProps) => {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const currentUser = getCurrentUser();\n  \n  const form = useForm<ClassroomFormData>({\n    resolver: zodResolver(classroomFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      subject: \"\",\n      level: \"\",\n      maxStudents: \"20\"\n    }\n  });\n\n  const createClassroomMutation = useMutation({\n    mutationFn: (data: ClassroomFormData) => {\n      // Generate a unique slug based on the title and timestamp\n      const slug = data.title.toLowerCase()\n        .replace(/[^a-z0-9]+/g, '-')\n        .replace(/^-+|-+$/g, '') + '-' + Date.now();\n      \n      return apiRequest(\"/api/classrooms\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          // Required legacy fields for database compatibility\n          title: data.title,\n          subject: data.subject,\n          level: data.level,\n          description: data.description,\n          masterId: currentUser?.id,\n          maxStudents: parseInt(data.maxStudents),\n          isActive: true,\n          // New academy fields\n          academyName: data.title,\n          about: data.description,\n          instruments: [data.subject],\n          curriculum: `${data.level} level ${data.subject} instruction`,\n          isPublic: true,\n          primaryColor: \"#3B82F6\",\n          customSlug: slug,\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Classroom Created!\",\n        description: `${form.getValues().title} has been created successfully.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\"] });\n      setOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create classroom\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ClassroomFormData) => {\n    console.log(\"Form submission data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    \n    if (!currentUser) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to create a classroom.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Check if all required fields are filled\n    if (!data.title || !data.subject || !data.level) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: \"Please fill in all required fields: title, subject, and level.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createClassroomMutation.mutate(data);\n  };\n\n  if (role === \"student\") return null;\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create Classroom\n        </Button>\n      </DialogTrigger>\n      \n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Classroom</DialogTitle>\n          <DialogDescription>\n            Set up a new classroom for your students. You can modify these settings later.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Classroom Title</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., Advanced Piano Techniques\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Describe what students will learn in this classroom...\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"subject\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Subject</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select subject\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {subjects.map((subject) => (\n                          <SelectItem key={subject} value={subject}>\n                            {subject}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"level\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Level</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select level\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {levels.map((level) => (\n                          <SelectItem key={level} value={level}>\n                            {level}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"maxStudents\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Maximum Students</FormLabel>\n                  <FormControl>\n                    <Input type=\"number\" min=\"1\" max=\"100\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setOpen(false)}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={createClassroomMutation.isPending}>\n                {createClassroomMutation.isPending ? \"Creating...\" : \"Create Classroom\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":8941},"client/src/components/classroom/LiveClassInterface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Video, \n  Mic, \n  MicOff, \n  VideoOff, \n  Users, \n  MessageSquare, \n  Share, \n  Settings,\n  Hand,\n  PhoneOff,\n  Monitor,\n  FileText,\n  Music,\n  Send\n} from \"lucide-react\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\ninterface LiveClassInterfaceProps {\n  role: Role;\n  classId: string;\n}\n\nexport const LiveClassInterface = ({ role, classId }: LiveClassInterfaceProps) => {\n  const [isMuted, setIsMuted] = useState(true);\n  const [isVideoOff, setIsVideoOff] = useState(true);\n  const [isHandRaised, setIsHandRaised] = useState(false);\n  const [chatMessage, setChatMessage] = useState(\"\");\n  const [participants, setParticipants] = useState(24);\n  const [chatMessages, setChatMessages] = useState([\n    { user: \"Alice M.\", message: \"Great explanation of the chord progression!\", time: \"14:32\", role: \"student\" },\n    { user: \"Prof. Williams\", message: \"Thank you! Now let's practice together\", time: \"14:33\", role: \"instructor\" },\n    { user: \"Bob K.\", message: \"Could you slow down the tempo please?\", time: \"14:34\", role: \"student\" },\n    { user: \"Charlie S.\", message: \"The audio quality is excellent today!\", time: \"14:35\", role: \"student\" },\n  ]);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const { toast } = useToast();\n\n  const handleSendMessage = () => {\n    if (chatMessage.trim()) {\n      setChatMessages(prev => [...prev, {\n        user: \"You\",\n        message: chatMessage,\n        time: new Date().toLocaleTimeString().slice(0, 5),\n        role: role === \"master\" ? \"instructor\" : \"student\"\n      }]);\n      setChatMessage(\"\");\n      toast({\n        title: \"Message sent!\",\n        description: \"Your message has been posted to the class chat.\",\n      });\n    }\n  };\n\n  const handleToggleMic = () => {\n    setIsMuted(!isMuted);\n    toast({\n      title: isMuted ? \"Microphone unmuted\" : \"Microphone muted\",\n      description: isMuted ? \"You can now speak in the class\" : \"Your microphone is now muted\",\n    });\n  };\n\n  const handleToggleVideo = () => {\n    setIsVideoOff(!isVideoOff);\n    toast({\n      title: isVideoOff ? \"Camera turned on\" : \"Camera turned off\",\n      description: isVideoOff ? \"Your video is now visible to the class\" : \"Your camera is now off\",\n    });\n  };\n\n  const handleRaiseHand = () => {\n    setIsHandRaised(!isHandRaised);\n    toast({\n      title: isHandRaised ? \"Hand lowered\" : \"Hand raised\",\n      description: isHandRaised ? \"You've lowered your hand\" : \"The instructor will see your raised hand\",\n    });\n  };\n\n  const handleScreenShare = () => {\n    setIsScreenSharing(!isScreenSharing);\n    toast({\n      title: isScreenSharing ? \"Screen sharing stopped\" : \"Screen sharing started\",\n      description: isScreenSharing ? \"You've stopped sharing your screen\" : \"You're now sharing your screen\",\n    });\n  };\n  return (\n    <div className=\"space-y-6\">\n      {/* Class Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Video className=\"h-5 w-5\" />\n                Advanced Piano Techniques - Live Session Demo\n              </CardTitle>\n              <div className=\"flex items-center gap-2 mt-2\">\n                <Badge variant=\"destructive\" className=\"animate-pulse\">🔴 LIVE DEMO</Badge>\n                <span className=\"text-sm text-muted-foreground\">{participants} participants</span>\n                <Badge variant=\"secondary\">Interactive Demo</Badge>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" onClick={() => toast({ title: \"Link copied!\", description: \"Class link copied to clipboard\" })}>\n                <Share className=\"h-4 w-4 mr-2\" />\n                Share\n              </Button>\n              <Button variant=\"destructive\" size=\"sm\" onClick={() => toast({ title: \"Left class\", description: \"You have left the live session\" })}>\n                <PhoneOff className=\"h-4 w-4 mr-2\" />\n                Leave\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        {/* Main Video Area */}\n        <div className=\"lg:col-span-3\">\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"aspect-video bg-black rounded-t-lg flex items-center justify-center relative overflow-hidden\">\n                {/* Simulated Video Feed */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 flex items-center justify-center\">\n                  <div className=\"text-center text-white\">\n                    <div className=\"text-6xl mb-4\">🎹</div>\n                    <h3 className=\"text-2xl font-semibold mb-2\">Prof. Sarah Williams</h3>\n                    <p className=\"text-lg opacity-75\">Teaching Advanced Chord Progressions</p>\n                    {isScreenSharing && (\n                      <div className=\"mt-4 p-3 bg-white/10 rounded-lg\">\n                        <FileText className=\"h-8 w-8 mx-auto mb-2\" />\n                        <p className=\"text-sm\">Sharing: Music Theory Notes</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Your Video (Picture-in-Picture) */}\n                <div className=\"absolute bottom-4 right-4 w-32 h-24 bg-gray-800 rounded-lg border-2 border-white/20 flex items-center justify-center\">\n                  {isVideoOff ? (\n                    <div className=\"text-white text-xs text-center\">\n                      <VideoOff className=\"h-6 w-6 mx-auto mb-1\" />\n                      Camera Off\n                    </div>\n                  ) : (\n                    <div className=\"text-white text-xs text-center\">\n                      <div className=\"text-2xl mb-1\">👤</div>\n                      You\n                    </div>\n                  )}\n                </div>\n\n                {/* Live Indicators */}\n                <div className=\"absolute top-4 left-4 flex items-center space-x-2\">\n                  <div className=\"flex items-center space-x-1 bg-red-500 px-2 py-1 rounded text-white text-xs\">\n                    <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></div>\n                    LIVE DEMO\n                  </div>\n                  <div className=\"bg-black/50 px-2 py-1 rounded text-white text-xs\">\n                    {participants} participants\n                  </div>\n                </div>\n\n                {/* Hand Raised Indicator */}\n                {isHandRaised && (\n                  <div className=\"absolute top-4 right-4 bg-yellow-500 px-2 py-1 rounded text-white text-xs flex items-center\">\n                    <Hand className=\"h-3 w-3 mr-1\" />\n                    Hand Raised\n                  </div>\n                )}\n              </div>\n              \n              {/* Enhanced Controls */}\n              <div className=\"p-4 flex items-center justify-between bg-card border-t\">\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant={isMuted ? \"destructive\" : \"outline\"} \n                    size=\"sm\"\n                    onClick={handleToggleMic}\n                  >\n                    {isMuted ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n                  </Button>\n                  <Button \n                    variant={isVideoOff ? \"destructive\" : \"outline\"} \n                    size=\"sm\"\n                    onClick={handleToggleVideo}\n                  >\n                    {isVideoOff ? <VideoOff className=\"h-4 w-4\" /> : <Video className=\"h-4 w-4\" />}\n                  </Button>\n                  {role === \"student\" && (\n                    <Button \n                      variant={isHandRaised ? \"secondary\" : \"outline\"} \n                      size=\"sm\"\n                      onClick={handleRaiseHand}\n                    >\n                      <Hand className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {(role === \"master\" || role === \"staff\") && (\n                    <Button \n                      variant={isScreenSharing ? \"secondary\" : \"outline\"} \n                      size=\"sm\"\n                      onClick={handleScreenShare}\n                    >\n                      <Monitor className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n                \n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Music className=\"h-4 w-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Settings className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Enhanced Sidebar */}\n        <div className=\"space-y-4\">\n          {/* Participants */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <Users className=\"h-4 w-4\" />\n                Participants ({participants})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                <div className=\"flex items-center justify-between text-sm p-2 bg-primary/10 rounded\">\n                  <span className=\"font-medium\">Prof. Sarah Williams</span>\n                  <Badge variant=\"secondary\" className=\"text-xs\">Host</Badge>\n                </div>\n                {[\n                  { name: \"Alice M.\", status: \"speaking\" },\n                  { name: \"Bob K.\", status: \"muted\" },\n                  { name: \"Charlie S.\", status: \"hand-raised\" },\n                  { name: \"Diana R.\", status: \"normal\" },\n                  { name: \"Eve T.\", status: \"normal\" },\n                  { name: \"Frank W.\", status: \"muted\" },\n                  { name: \"Grace L.\", status: \"normal\" },\n                  { name: \"You\", status: isHandRaised ? \"hand-raised\" : isMuted ? \"muted\" : \"normal\" }\n                ].map((participant, i) => (\n                  <div key={i} className=\"flex items-center justify-between text-sm\">\n                    <span className={participant.name === \"You\" ? \"font-medium\" : \"\"}>\n                      {participant.name}\n                    </span>\n                    <div className=\"flex gap-1\">\n                      {participant.status === \"muted\" && <MicOff className=\"h-3 w-3 text-muted-foreground\" />}\n                      {participant.status === \"hand-raised\" && <Hand className=\"h-3 w-3 text-yellow-500\" />}\n                      {participant.status === \"speaking\" && <Mic className=\"h-3 w-3 text-green-500\" />}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Enhanced Chat */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm flex items-center gap-2\">\n                <MessageSquare className=\"h-4 w-4\" />\n                Live Chat\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2 max-h-64 overflow-y-auto mb-3\">\n                {chatMessages.map((msg, i) => (\n                  <div key={i} className={`text-xs p-2 rounded ${\n                    msg.role === \"instructor\" ? \"bg-primary/10 border-l-2 border-primary\" : \"bg-muted\"\n                  }`}>\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"font-medium\">{msg.user}</span>\n                      <span className=\"text-xs text-muted-foreground\">{msg.time}</span>\n                    </div>\n                    <p>{msg.message}</p>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex space-x-2\">\n                <Input\n                  placeholder=\"Type a message...\"\n                  value={chatMessage}\n                  onChange={(e) => setChatMessage(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  className=\"text-sm\"\n                />\n                <Button size=\"sm\" onClick={handleSendMessage}>\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":12932},"client/src/components/classroom/ManagementTabs.tsx":{"content":"import { useState } from \"react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Users, \n  BookOpen, \n  BarChart3, \n  Settings, \n  Play,\n  Calendar,\n  MessageSquare,\n  Award\n} from \"lucide-react\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\ninterface ManagementTabsProps {\n  role: Role;\n}\n\nexport const ManagementTabs = ({ role }: ManagementTabsProps) => {\n  const [activeTab, setActiveTab] = useState(\"classrooms\");\n\n  if (role === \"student\") {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Access Restricted</h3>\n          <p className=\"text-muted-foreground\">\n            This management area is only available for mentors and staff members.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n      <TabsList className=\"grid w-full grid-cols-5\">\n        <TabsTrigger value=\"classrooms\">Classrooms</TabsTrigger>\n        <TabsTrigger value=\"students\">Students</TabsTrigger>\n        <TabsTrigger value=\"content\">Content</TabsTrigger>\n        <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n      </TabsList>\n\n      <TabsContent value=\"classrooms\" className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5\" />\n                Classroom Management\n              </CardTitle>\n              <Button>\n                <Play className=\"h-4 w-4 mr-2\" />\n                Create New Classroom\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4\">\n              {[\n                { name: \"Advanced Piano Techniques\", students: 24, status: \"active\" },\n                { name: \"Guitar Fundamentals\", students: 18, status: \"active\" },\n                { name: \"Vocal Performance\", students: 15, status: \"draft\" }\n              ].map((classroom, idx) => (\n                <div key={idx} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-semibold\">{classroom.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{classroom.students} students enrolled</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant={classroom.status === \"active\" ? \"default\" : \"secondary\"}>\n                      {classroom.status}\n                    </Badge>\n                    <Button variant=\"outline\" size=\"sm\">Edit</Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"students\" className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Student Management\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid gap-4\">\n              {[\n                { name: \"Alice Johnson\", email: \"alice@example.com\", classrooms: 2, progress: 85 },\n                { name: \"Bob Smith\", email: \"bob@example.com\", classrooms: 1, progress: 92 },\n                { name: \"Carol Davis\", email: \"carol@example.com\", classrooms: 3, progress: 78 }\n              ].map((student, idx) => (\n                <div key={idx} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <h4 className=\"font-semibold\">{student.name}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{student.email}</p>\n                  </div>\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      {student.classrooms} classrooms\n                    </div>\n                    <div className=\"text-sm\">\n                      {student.progress}% avg progress\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">View Profile</Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"content\" className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              Content Library\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8\">\n              <BookOpen className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Content Management</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Manage lessons, assignments, and learning materials\n              </p>\n              <Button>\n                Add New Content\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"analytics\" className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5\" />\n              Analytics Dashboard\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-6 border rounded-lg\">\n                <div className=\"text-3xl font-bold text-primary\">47</div>\n                <div className=\"text-sm text-muted-foreground\">Total Students</div>\n              </div>\n              <div className=\"text-center p-6 border rounded-lg\">\n                <div className=\"text-3xl font-bold text-secondary\">89%</div>\n                <div className=\"text-sm text-muted-foreground\">Avg Completion</div>\n              </div>\n              <div className=\"text-center p-6 border rounded-lg\">\n                <div className=\"text-3xl font-bold text-accent\">4.8</div>\n                <div className=\"text-sm text-muted-foreground\">Avg Rating</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"settings\" className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Platform Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Notification Preferences</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Configure how you receive notifications about student activity\n                </p>\n              </div>\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Classroom Defaults</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Set default settings for new classrooms\n                </p>\n              </div>\n              <div className=\"p-4 border rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Integration Settings</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Configure external tools and integrations\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n    </Tabs>\n  );\n};","size_bytes":8156},"client/src/components/classroom/RoleSelector.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Crown, Shield, GraduationCap } from \"lucide-react\";\n\ntype Role = \"master\" | \"staff\" | \"student\";\n\ninterface RoleSelectorProps {\n  currentRole: Role;\n  onRoleChange: (role: Role) => void;\n}\n\nconst roleConfig = {\n  master: {\n    label: \"Master\",\n    description: \"Classroom Owner & Manager\",\n    icon: Crown,\n    color: \"bg-gradient-to-r from-yellow-500 to-orange-500\",\n    textColor: \"text-yellow-600\",\n    bgColor: \"bg-yellow-50 dark:bg-yellow-950/20\"\n  },\n  staff: {\n    label: \"Staff\",\n    description: \"Assistant & Content Manager\", \n    icon: Shield,\n    color: \"bg-gradient-to-r from-blue-500 to-indigo-500\",\n    textColor: \"text-blue-600\",\n    bgColor: \"bg-blue-50 dark:bg-blue-950/20\"\n  },\n  student: {\n    label: \"Student\",\n    description: \"Learner & Participant\",\n    icon: GraduationCap,\n    color: \"bg-gradient-to-r from-green-500 to-emerald-500\",\n    textColor: \"text-green-600\",\n    bgColor: \"bg-green-50 dark:bg-green-950/20\"\n  }\n};\n\nexport const RoleSelector = ({ currentRole, onRoleChange }: RoleSelectorProps) => {\n  return (\n    <Card className=\"mb-6\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"font-semibold mb-1\">Testing Mode - Switch Roles</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              Switch between different roles to test the classroom experience\n            </p>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            {Object.entries(roleConfig).map(([role, config]) => {\n              const Icon = config.icon;\n              const isActive = currentRole === role;\n              \n              return (\n                <Button\n                  key={role}\n                  variant={isActive ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => onRoleChange(role as Role)}\n                  className={`flex items-center gap-2 ${\n                    isActive ? config.color : \"\"\n                  }`}\n                >\n                  <Icon className=\"h-4 w-4\" />\n                  {config.label}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n        \n        {/* Current Role Display */}\n        <div className={`mt-4 p-3 rounded-lg ${roleConfig[currentRole].bgColor}`}>\n          <div className=\"flex items-center gap-2\">\n            {(() => {\n              const CurrentIcon = roleConfig[currentRole].icon;\n              return <CurrentIcon className={`h-5 w-5 ${roleConfig[currentRole].textColor}`} />;\n            })()}\n            <span className=\"font-medium\">Current Role: {roleConfig[currentRole].label}</span>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {roleConfig[currentRole].description}\n            </Badge>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":3046},"client/src/components/classroom/TimetableManager.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { Calendar, Clock, Plus, User, AlertTriangle, Check, X } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst scheduleFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  dayOfWeek: z.number().min(0).max(6),\n  startTime: z.string().min(1, \"Start time is required\"),\n  endTime: z.string().min(1, \"End time is required\"),\n  instructorId: z.number().min(1, \"Instructor is required\"),\n  maxStudents: z.number().min(1).max(50).default(20),\n  description: z.string().optional()\n});\n\ntype ScheduleFormData = z.infer<typeof scheduleFormSchema>;\n\ninterface Schedule {\n  id: number;\n  classroomId: number;\n  title: string;\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n  instructorId: number;\n  maxStudents: number;\n  description?: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface Instructor {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n\ninterface TimetableManagerProps {\n  classroomId: number;\n}\n\nconst dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst timeSlots = Array.from({ length: 24 }, (_, i) => {\n  const hour = i.toString().padStart(2, '0');\n  return `${hour}:00`;\n});\n\nexport default function TimetableManager({ classroomId }: TimetableManagerProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedDay, setSelectedDay] = useState<number | null>(null);\n  const [selectedTime, setSelectedTime] = useState<string | null>(null);\n  const [availabilityChecks, setAvailabilityChecks] = useState<Record<string, boolean>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ScheduleFormData>({\n    resolver: zodResolver(scheduleFormSchema),\n    defaultValues: {\n      title: \"\",\n      dayOfWeek: 1,\n      startTime: \"09:00\",\n      endTime: \"10:00\",\n      maxStudents: 20,\n      description: \"\"\n    }\n  });\n\n  // Fetch classroom schedules\n  const { data: schedules = [], isLoading: schedulesLoading } = useQuery({\n    queryKey: ['/api/schedules', classroomId],\n    queryFn: async () => {\n      const response = await fetch(`/api/schedules?classroomId=${classroomId}`);\n      if (!response.ok) throw new Error('Failed to fetch schedules');\n      return response.json();\n    }\n  });\n\n  // Fetch available instructors (staff members)\n  const { data: instructors = [], isLoading: instructorsLoading } = useQuery({\n    queryKey: ['/api/classrooms', classroomId, 'members'],\n    queryFn: async () => {\n      const response = await fetch(`/api/classrooms/${classroomId}/members`);\n      if (!response.ok) throw new Error('Failed to fetch classroom members');\n      const members = await response.json();\n      return members.filter((member: any) => member.role === 'staff' || member.role === 'master');\n    }\n  });\n\n  // Create schedule mutation\n  const createScheduleMutation = useMutation({\n    mutationFn: async (data: ScheduleFormData) => {\n      const response = await fetch('/api/schedules', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ...data, classroomId })\n      });\n      if (!response.ok) throw new Error('Failed to create schedule');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedules', classroomId] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Schedule Created\",\n        description: \"New class session has been added to the timetable.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Creating Schedule\",\n        description: error.message || \"Failed to create schedule\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Check instructor availability\n  const checkAvailabilityMutation = useMutation({\n    mutationFn: async ({ instructorId, dayOfWeek, startTime, endTime }: any) => {\n      const response = await fetch('/api/schedules/check-availability', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ instructorId, dayOfWeek, startTime, endTime })\n      });\n      if (!response.ok) throw new Error('Failed to check availability');\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      const key = `${variables.instructorId}-${variables.dayOfWeek}-${variables.startTime}-${variables.endTime}`;\n      setAvailabilityChecks(prev => ({ ...prev, [key]: data.available }));\n    }\n  });\n\n  // Watch form values to check availability\n  const watchedValues = form.watch(['instructorId', 'dayOfWeek', 'startTime', 'endTime']);\n  \n  useEffect(() => {\n    const [instructorId, dayOfWeek, startTime, endTime] = watchedValues;\n    \n    if (instructorId && dayOfWeek !== undefined && startTime && endTime) {\n      checkAvailabilityMutation.mutate({ instructorId, dayOfWeek, startTime, endTime });\n    }\n  }, [watchedValues]);\n\n  const onSubmit = (data: ScheduleFormData) => {\n    const availabilityKey = `${data.instructorId}-${data.dayOfWeek}-${data.startTime}-${data.endTime}`;\n    \n    if (availabilityChecks[availabilityKey] === false) {\n      toast({\n        title: \"Scheduling Conflict\",\n        description: \"The selected instructor is not available at this time.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    createScheduleMutation.mutate(data);\n  };\n\n  const handleQuickCreate = (dayOfWeek: number, timeSlot: string) => {\n    setSelectedDay(dayOfWeek);\n    setSelectedTime(timeSlot);\n    form.setValue('dayOfWeek', dayOfWeek);\n    form.setValue('startTime', timeSlot);\n    const endHour = parseInt(timeSlot.split(':')[0]) + 1;\n    form.setValue('endTime', `${endHour.toString().padStart(2, '0')}:00`);\n    setIsDialogOpen(true);\n  };\n\n  // Create weekly grid\n  const renderWeeklyGrid = () => {\n    const grid = [];\n    \n    // Header with day names\n    grid.push(\n      <div key=\"header\" className=\"grid grid-cols-8 gap-2 mb-4\">\n        <div className=\"text-sm font-medium text-muted-foreground p-2\">Time</div>\n        {dayNames.slice(1, 6).map(day => (\n          <div key={day} className=\"text-sm font-medium text-center p-2 bg-muted rounded\">\n            {day}\n          </div>\n        ))}\n        <div className=\"text-sm font-medium text-center p-2 bg-muted rounded\">Weekend</div>\n      </div>\n    );\n\n    // Time slots (9 AM to 6 PM for main grid)\n    const workingHours = timeSlots.slice(9, 18);\n    \n    workingHours.forEach(timeSlot => {\n      const row = [\n        <div key={`time-${timeSlot}`} className=\"text-sm text-muted-foreground p-2 font-medium\">\n          {timeSlot}\n        </div>\n      ];\n\n      // Weekdays (Monday-Friday)\n      for (let day = 1; day <= 5; day++) {\n        const daySchedules = schedules.filter(\n          (schedule: Schedule) => schedule.dayOfWeek === day && schedule.startTime === timeSlot\n        );\n\n        if (daySchedules.length > 0) {\n          row.push(\n            <div key={`${day}-${timeSlot}`} className=\"p-1\">\n              {daySchedules.map((schedule: Schedule) => {\n                const instructor = instructors.find((inst: Instructor) => inst.id === schedule.instructorId);\n                return (\n                  <div\n                    key={schedule.id}\n                    className=\"bg-primary/10 border border-primary/20 rounded p-2 text-xs hover:bg-primary/20 cursor-pointer transition-colors\"\n                  >\n                    <div className=\"font-medium truncate\">{schedule.title}</div>\n                    <div className=\"text-muted-foreground flex items-center gap-1\">\n                      <User className=\"h-3 w-3\" />\n                      {instructor ? `${instructor.firstName} ${instructor.lastName}` : 'Unassigned'}\n                    </div>\n                    <div className=\"text-muted-foreground\">\n                      {schedule.startTime} - {schedule.endTime}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          );\n        } else {\n          row.push(\n            <div\n              key={`${day}-${timeSlot}`}\n              className=\"p-1 min-h-16 border border-dashed border-muted-foreground/20 rounded hover:border-primary/40 cursor-pointer transition-colors group\"\n              onClick={() => handleQuickCreate(day, timeSlot)}\n            >\n              <div className=\"h-full w-full flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity\">\n                <Plus className=\"h-4 w-4 text-muted-foreground\" />\n              </div>\n            </div>\n          );\n        }\n      }\n\n      // Weekend column (Saturday + Sunday combined)\n      const weekendSchedules = [\n        ...schedules.filter((schedule: Schedule) => schedule.dayOfWeek === 6 && schedule.startTime === timeSlot),\n        ...schedules.filter((schedule: Schedule) => schedule.dayOfWeek === 0 && schedule.startTime === timeSlot)\n      ];\n\n      if (weekendSchedules.length > 0) {\n        row.push(\n          <div key={`weekend-${timeSlot}`} className=\"p-1\">\n            {weekendSchedules.map((schedule: Schedule) => {\n              const instructor = instructors.find((inst: Instructor) => inst.id === schedule.instructorId);\n              const dayName = schedule.dayOfWeek === 0 ? 'Sun' : 'Sat';\n              return (\n                <div\n                  key={schedule.id}\n                  className=\"bg-accent/10 border border-accent/20 rounded p-2 text-xs hover:bg-accent/20 cursor-pointer transition-colors mb-1\"\n                >\n                  <div className=\"font-medium truncate\">{schedule.title} ({dayName})</div>\n                  <div className=\"text-muted-foreground flex items-center gap-1\">\n                    <User className=\"h-3 w-3\" />\n                    {instructor ? `${instructor.firstName} ${instructor.lastName}` : 'Unassigned'}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        );\n      } else {\n        row.push(\n          <div key={`weekend-${timeSlot}`} className=\"p-1 min-h-16 border border-dashed border-muted-foreground/20 rounded\">\n          </div>\n        );\n      }\n\n      grid.push(\n        <div key={`row-${timeSlot}`} className=\"grid grid-cols-8 gap-2 mb-2\">\n          {row}\n        </div>\n      );\n    });\n\n    return grid;\n  };\n\n  const currentAvailabilityKey = `${form.watch('instructorId')}-${form.watch('dayOfWeek')}-${form.watch('startTime')}-${form.watch('endTime')}`;\n  const isCurrentTimeAvailable = availabilityChecks[currentAvailabilityKey];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Weekly Timetable</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Manage class schedules and assign instructors\n          </p>\n        </div>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Class Session\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Create New Class Session</DialogTitle>\n              <DialogDescription>\n                Schedule a new class and assign an instructor\n              </DialogDescription>\n            </DialogHeader>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Class Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Piano Basics, Guitar Intermediate\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"dayOfWeek\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Day</FormLabel>\n                        <Select value={field.value?.toString()} onValueChange={(value) => field.onChange(parseInt(value))}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select day\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {dayNames.map((day, index) => (\n                              <SelectItem key={day} value={index.toString()}>\n                                {day}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"maxStudents\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Max Students</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            min=\"1\" \n                            max=\"50\" \n                            {...field} \n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"startTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <Select value={field.value} onValueChange={field.onChange}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Start time\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {timeSlots.map(time => (\n                              <SelectItem key={time} value={time}>\n                                {time}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"endTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Time</FormLabel>\n                        <Select value={field.value} onValueChange={field.onChange}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"End time\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {timeSlots.map(time => (\n                              <SelectItem key={time} value={time}>\n                                {time}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"instructorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Instructor</FormLabel>\n                      <Select value={field.value?.toString()} onValueChange={(value) => field.onChange(parseInt(value))}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select instructor\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {instructors.map((instructor: Instructor) => (\n                            <SelectItem key={instructor.id} value={instructor.id.toString()}>\n                              {instructor.firstName} {instructor.lastName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Availability indicator */}\n                {form.watch('instructorId') && form.watch('startTime') && form.watch('endTime') && (\n                  <div className=\"flex items-center gap-2 p-3 rounded-lg border\">\n                    {checkAvailabilityMutation.isPending ? (\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\n                        <div className=\"h-4 w-4 border-2 border-muted-foreground border-t-transparent rounded-full animate-spin\" />\n                        Checking availability...\n                      </div>\n                    ) : isCurrentTimeAvailable === true ? (\n                      <div className=\"flex items-center gap-2 text-green-600\">\n                        <Check className=\"h-4 w-4\" />\n                        Instructor is available\n                      </div>\n                    ) : isCurrentTimeAvailable === false ? (\n                      <div className=\"flex items-center gap-2 text-red-600\">\n                        <X className=\"h-4 w-4\" />\n                        Scheduling conflict detected\n                      </div>\n                    ) : null}\n                  </div>\n                )}\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Additional details about this class...\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button \n                    type=\"submit\" \n                    disabled={createScheduleMutation.isPending || isCurrentTimeAvailable === false}\n                    className=\"flex-1\"\n                  >\n                    {createScheduleMutation.isPending ? \"Creating...\" : \"Create Session\"}\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Timetable Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"flex items-center p-4\">\n            <Calendar className=\"h-8 w-8 text-blue-600 mr-3\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Sessions</p>\n              <p className=\"text-2xl font-bold\">{schedules.length}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"flex items-center p-4\">\n            <Clock className=\"h-8 w-8 text-green-600 mr-3\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">This Week</p>\n              <p className=\"text-2xl font-bold\">\n                {schedules.filter((s: Schedule) => s.dayOfWeek >= 1 && s.dayOfWeek <= 5).length}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"flex items-center p-4\">\n            <User className=\"h-8 w-8 text-purple-600 mr-3\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Instructors</p>\n              <p className=\"text-2xl font-bold\">{instructors.length}</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"flex items-center p-4\">\n            <AlertTriangle className=\"h-8 w-8 text-orange-600 mr-3\" />\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Weekend Classes</p>\n              <p className=\"text-2xl font-bold\">\n                {schedules.filter((s: Schedule) => s.dayOfWeek === 0 || s.dayOfWeek === 6).length}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Weekly Timetable Grid */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Weekly Schedule\n          </CardTitle>\n          <CardDescription>\n            Click on empty time slots to quickly add new sessions. Hover over existing sessions for details.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {schedulesLoading || instructorsLoading ? (\n            <div className=\"flex items-center justify-center h-64\">\n              <div className=\"text-center\">\n                <div className=\"h-8 w-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">Loading timetable...</p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              {renderWeeklyGrid()}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>\n            Common scheduling operations\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4\" />\n              Copy Last Week\n            </Button>\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Set Recurring Sessions\n            </Button>\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4\" />\n              Manage Instructor Availability\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":24262},"client/src/components/course/CourseCreationForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { BookOpen, Plus, X, Upload, Save, Eye, Send } from \"lucide-react\";\n\nconst courseFormSchema = z.object({\n  title: z.string().min(5, \"Title must be at least 5 characters\"),\n  description: z.string().min(20, \"Description must be at least 20 characters\"),\n  category: z.string().min(1, \"Please select a category\"),\n  level: z.string().min(1, \"Please select a level\"),\n  price: z.string().min(1, \"Please enter a price\"),\n  duration: z.string().min(1, \"Please enter duration in minutes\"),\n  targetAudience: z.string().min(10, \"Please describe the target audience\"),\n  syllabus: z.string().min(50, \"Please provide a detailed syllabus\"),\n  prerequisites: z.string().optional(),\n  learningObjectives: z.string().min(20, \"Please list learning objectives\"),\n  difficulty: z.string().min(1, \"Please select difficulty level\"),\n  estimatedWeeks: z.string().min(1, \"Please enter estimated weeks\"),\n  maxStudents: z.string().min(1, \"Please enter maximum students\"),\n  tags: z.string().optional(),\n  imageUrl: z.string().url().optional().or(z.literal(\"\"))\n});\n\ntype CourseFormValues = z.infer<typeof courseFormSchema>;\n\ninterface CourseCreationFormProps {\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport const CourseCreationForm = ({ onSuccess, onCancel }: CourseCreationFormProps) => {\n  const [prerequisites, setPrerequisites] = useState<string[]>([]);\n  const [objectives, setObjectives] = useState<string[]>([]);\n  const [tags, setTags] = useState<string[]>([]);\n  const [newPrerequisite, setNewPrerequisite] = useState(\"\");\n  const [newObjective, setNewObjective] = useState(\"\");\n  const [newTag, setNewTag] = useState(\"\");\n  const [courseStatus, setCourseStatus] = useState<\"draft\" | \"pending\">(\"draft\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const currentUser = getCurrentUser();\n\n  const form = useForm<CourseFormValues>({\n    resolver: zodResolver(courseFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"\",\n      level: \"\",\n      price: \"\",\n      duration: \"\",\n      targetAudience: \"\",\n      syllabus: \"\",\n      prerequisites: \"\",\n      learningObjectives: \"\",\n      difficulty: \"1\",\n      estimatedWeeks: \"\",\n      maxStudents: \"100\",\n      tags: \"\",\n      imageUrl: \"\"\n    }\n  });\n\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest('/api/courses', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      toast({\n        title: \"Course Created Successfully\",\n        description: courseStatus === \"draft\" ? \n          \"Your course has been saved as a draft.\" :\n          \"Your course has been submitted for review.\",\n      });\n      form.reset();\n      setPrerequisites([]);\n      setObjectives([]);\n      setTags([]);\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create course. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const onSubmit = (values: CourseFormValues) => {\n    const courseData = {\n      ...values,\n      price: parseFloat(values.price),\n      duration: parseInt(values.duration),\n      difficulty: parseInt(values.difficulty),\n      estimatedWeeks: parseInt(values.estimatedWeeks),\n      maxStudents: parseInt(values.maxStudents),\n      mentorId: currentUser?.id,\n      prerequisites,\n      learningObjectives: objectives,\n      tags,\n      status: courseStatus,\n      isActive: true\n    };\n\n    createCourseMutation.mutate(courseData);\n  };\n\n  const addPrerequisite = () => {\n    if (newPrerequisite.trim() && !prerequisites.includes(newPrerequisite.trim())) {\n      setPrerequisites([...prerequisites, newPrerequisite.trim()]);\n      setNewPrerequisite(\"\");\n    }\n  };\n\n  const removePrerequisite = (index: number) => {\n    setPrerequisites(prerequisites.filter((_, i) => i !== index));\n  };\n\n  const addObjective = () => {\n    if (newObjective.trim() && !objectives.includes(newObjective.trim())) {\n      setObjectives([...objectives, newObjective.trim()]);\n      setNewObjective(\"\");\n    }\n  };\n\n  const removeObjective = (index: number) => {\n    setObjectives(objectives.filter((_, i) => i !== index));\n  };\n\n  const addTag = () => {\n    if (newTag.trim() && !tags.includes(newTag.trim())) {\n      setTags([...tags, newTag.trim()]);\n      setNewTag(\"\");\n    }\n  };\n\n  const removeTag = (index: number) => {\n    setTags(tags.filter((_, i) => i !== index));\n  };\n\n  const categories = [\n    \"piano\", \"guitar\", \"violin\", \"drums\", \"vocals\", \"theory\", \"composition\", \"production\"\n  ];\n\n  const levels = [\n    \"beginner\", \"intermediate\", \"advanced\"\n  ];\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      <Card>\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <BookOpen className=\"h-8 w-8 text-primary\" />\n            <CardTitle className=\"text-3xl\">Create New Course</CardTitle>\n          </div>\n          <CardDescription className=\"text-lg\">\n            Share your musical expertise with students around the world\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Basic Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Basic Information</h3>\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Course Title</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., Advanced Jazz Piano Techniques\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Provide a compelling description of your course...\"\n                            className=\"min-h-24\"\n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {categories.map((category) => (\n                                <SelectItem key={category} value={category}>\n                                  {category.charAt(0).toUpperCase() + category.slice(1)}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"level\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Level</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select level\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {levels.map((level) => (\n                                <SelectItem key={level} value={level}>\n                                  {level.charAt(0).toUpperCase() + level.slice(1)}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* Course Details */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-foreground\">Course Details</h3>\n                  \n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"price\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Price ($)</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" step=\"0.01\" placeholder=\"99.99\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"duration\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Duration (minutes)</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" placeholder=\"480\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"estimatedWeeks\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Estimated Weeks</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" placeholder=\"8\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"maxStudents\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Max Students</FormLabel>\n                          <FormControl>\n                            <Input type=\"number\" placeholder=\"100\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"difficulty\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Difficulty (1-10)</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select difficulty\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Array.from({ length: 10 }, (_, i) => (\n                              <SelectItem key={i + 1} value={(i + 1).toString()}>\n                                {i + 1} - {i < 3 ? \"Easy\" : i < 7 ? \"Medium\" : \"Hard\"}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Course Content */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-foreground\">Course Content</h3>\n                \n                <FormField\n                  control={form.control}\n                  name=\"targetAudience\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Target Audience</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe who this course is for...\"\n                          className=\"min-h-20\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"syllabus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Course Syllabus</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Provide a detailed course syllabus with lessons and topics...\"\n                          className=\"min-h-32\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Prerequisites */}\n                <div className=\"space-y-2\">\n                  <FormLabel>Prerequisites</FormLabel>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add a prerequisite...\"\n                      value={newPrerequisite}\n                      onChange={(e) => setNewPrerequisite(e.target.value)}\n                      onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addPrerequisite())}\n                    />\n                    <Button type=\"button\" onClick={addPrerequisite} size=\"sm\">\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {prerequisites.map((prereq, index) => (\n                      <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                        {prereq}\n                        <X \n                          className=\"h-3 w-3 cursor-pointer\" \n                          onClick={() => removePrerequisite(index)}\n                        />\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Learning Objectives */}\n                <div className=\"space-y-2\">\n                  <FormLabel>Learning Objectives</FormLabel>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add a learning objective...\"\n                      value={newObjective}\n                      onChange={(e) => setNewObjective(e.target.value)}\n                      onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addObjective())}\n                    />\n                    <Button type=\"button\" onClick={addObjective} size=\"sm\">\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {objectives.map((objective, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"flex items-center gap-1\">\n                        {objective}\n                        <X \n                          className=\"h-3 w-3 cursor-pointer\" \n                          onClick={() => removeObjective(index)}\n                        />\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Tags */}\n                <div className=\"space-y-2\">\n                  <FormLabel>Tags</FormLabel>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      placeholder=\"Add a tag...\"\n                      value={newTag}\n                      onChange={(e) => setNewTag(e.target.value)}\n                      onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTag())}\n                    />\n                    <Button type=\"button\" onClick={addTag} size=\"sm\">\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {tags.map((tag, index) => (\n                      <Badge key={index} className=\"flex items-center gap-1\">\n                        {tag}\n                        <X \n                          className=\"h-3 w-3 cursor-pointer\" \n                          onClick={() => removeTag(index)}\n                        />\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"imageUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Course Image URL (Optional)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"https://example.com/course-image.jpg\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        Provide a URL to an image that represents your course\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-4 pt-6\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setCourseStatus(\"draft\");\n                    form.handleSubmit(onSubmit)();\n                  }}\n                  disabled={createCourseMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save as Draft\n                </Button>\n                \n                <Button\n                  type=\"button\"\n                  onClick={() => {\n                    setCourseStatus(\"pending\");\n                    form.handleSubmit(onSubmit)();\n                  }}\n                  disabled={createCourseMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Submit for Review\n                </Button>\n\n                {onCancel && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    onClick={onCancel}\n                    disabled={createCourseMutation.isPending}\n                  >\n                    Cancel\n                  </Button>\n                )}\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default CourseCreationForm;","size_bytes":21269},"client/src/components/course/CourseManagementDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCurrentUser, hasRole } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  BookOpen, \n  Users, \n  TrendingUp, \n  Clock, \n  Star, \n  DollarSign,\n  CheckCircle,\n  XCircle,\n  Eye,\n  Edit,\n  Trash2,\n  Send,\n  FileText,\n  BarChart3,\n  UserCheck\n} from \"lucide-react\";\n\ninterface Course {\n  id: number;\n  title: string;\n  description: string;\n  category: string;\n  level: string;\n  price: number;\n  duration: number;\n  mentorId: number;\n  status: string;\n  currentEnrollments: number;\n  maxStudents: number;\n  averageRating: number;\n  totalRatings: number;\n  totalRevenue: number;\n  estimatedWeeks: number;\n  difficulty: number;\n  createdAt: string;\n  approvedAt?: string;\n  rejectedAt?: string;\n  adminNotes?: string;\n}\n\ninterface CourseAnalytics {\n  totalEnrollments: number;\n  totalCompletions: number;\n  totalRevenue: number;\n  averageRating: number;\n  totalLessonsCompleted: number;\n}\n\nexport const CourseManagementDashboard = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [selectedCourse, setSelectedCourse] = useState<Course | null>(null);\n  const [adminNotes, setAdminNotes] = useState(\"\");\n  const [showAnalytics, setShowAnalytics] = useState<number | null>(null);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const currentUser = getCurrentUser();\n  const isAdmin = hasRole(\"admin\");\n  const isMentor = hasRole(\"mentor\");\n\n  // Fetch courses based on user role\n  const { data: courses = [], isLoading } = useQuery<Course[]>({\n    queryKey: ['/api/courses', currentUser?.role, currentUser?.id],\n    queryFn: async () => {\n      if (isAdmin) {\n        return apiRequest('/api/courses');\n      } else if (isMentor) {\n        return apiRequest(`/api/courses?mentor=${currentUser?.id}`);\n      }\n      return [];\n    }\n  });\n\n  // Fetch course analytics for selected course\n  const { data: analytics } = useQuery<CourseAnalytics>({\n    queryKey: ['/api/courses', showAnalytics, 'analytics/summary'],\n    queryFn: () => apiRequest(`/api/courses/${showAnalytics}/analytics/summary`),\n    enabled: !!showAnalytics\n  });\n\n  // Course approval mutation\n  const approveMutation = useMutation({\n    mutationFn: async ({ courseId, notes }: { courseId: number; notes: string }) => {\n      return apiRequest(`/api/courses/${courseId}/approve`, {\n        method: 'POST',\n        body: JSON.stringify({ adminNotes: notes })\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      toast({\n        title: \"Course Approved\",\n        description: \"Course has been approved successfully.\",\n      });\n      setSelectedCourse(null);\n      setAdminNotes(\"\");\n    }\n  });\n\n  // Course rejection mutation\n  const rejectMutation = useMutation({\n    mutationFn: async ({ courseId, notes }: { courseId: number; notes: string }) => {\n      return apiRequest(`/api/courses/${courseId}/reject`, {\n        method: 'POST',\n        body: JSON.stringify({ adminNotes: notes })\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      toast({\n        title: \"Course Rejected\",\n        description: \"Course has been rejected.\",\n        variant: \"destructive\"\n      });\n      setSelectedCourse(null);\n      setAdminNotes(\"\");\n    }\n  });\n\n  // Course publication mutation\n  const publishMutation = useMutation({\n    mutationFn: async ({ courseId, notes }: { courseId: number; notes: string }) => {\n      return apiRequest(`/api/courses/${courseId}/publish`, {\n        method: 'POST',\n        body: JSON.stringify({ adminNotes: notes })\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      toast({\n        title: \"Course Published\",\n        description: \"Course is now live and available to students.\",\n      });\n      setSelectedCourse(null);\n      setAdminNotes(\"\");\n    }\n  });\n\n  // Course deletion mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (courseId: number) => {\n      return apiRequest(`/api/courses/${courseId}`, {\n        method: 'DELETE'\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      toast({\n        title: \"Course Deleted\",\n        description: \"Course has been archived successfully.\",\n      });\n    }\n  });\n\n  const filteredCourses = courses.filter(course => {\n    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         course.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || course.status === statusFilter;\n    const matchesCategory = categoryFilter === \"all\" || course.category === categoryFilter;\n    \n    return matchesSearch && matchesStatus && matchesCategory;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"draft\": return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\";\n      case \"approved\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"published\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"rejected\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"archived\": return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"published\": return <CheckCircle className=\"h-4 w-4\" />;\n      case \"rejected\": return <XCircle className=\"h-4 w-4\" />;\n      case \"pending\": return <Clock className=\"h-4 w-4\" />;\n      default: return <FileText className=\"h-4 w-4\" />;\n    }\n  };\n\n  const categories = [\"piano\", \"guitar\", \"violin\", \"drums\", \"vocals\", \"theory\"];\n  const statuses = [\"draft\", \"pending\", \"approved\", \"published\", \"rejected\", \"archived\"];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-gray-200 rounded\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-5/6\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">\n              {isAdmin ? \"Course Management\" : \"My Courses\"}\n            </h1>\n            <p className=\"text-muted-foreground\">\n              {isAdmin ? \"Review and manage all courses\" : \"Manage your courses and track performance\"}\n            </p>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search courses...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  {statuses.map(status => (\n                    <SelectItem key={status} value={status}>\n                      {status.charAt(0).toUpperCase() + status.slice(1)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {categories.map(category => (\n                    <SelectItem key={category} value={category}>\n                      {category.charAt(0).toUpperCase() + category.slice(1)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Course Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredCourses.map((course) => (\n            <Card key={course.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg mb-2\">{course.title}</CardTitle>\n                    <CardDescription className=\"line-clamp-2\">\n                      {course.description}\n                    </CardDescription>\n                  </div>\n                  <Badge className={`ml-2 ${getStatusColor(course.status)} flex items-center gap-1`}>\n                    {getStatusIcon(course.status)}\n                    {course.status}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Course Stats */}\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"h-4 w-4 text-muted-foreground\" />\n                      <span>{course.currentEnrollments}/{course.maxStudents}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Star className=\"h-4 w-4 text-yellow-500\" />\n                      <span>{course.averageRating.toFixed(1)} ({course.totalRatings})</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <DollarSign className=\"h-4 w-4 text-green-500\" />\n                      <span>${course.totalRevenue.toFixed(0)}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-blue-500\" />\n                      <span>{course.estimatedWeeks}w</span>\n                    </div>\n                  </div>\n\n                  {/* Action Buttons */}\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => setShowAnalytics(course.id)}\n                    >\n                      <BarChart3 className=\"h-4 w-4 mr-1\" />\n                      Analytics\n                    </Button>\n\n                    {isAdmin && course.status === \"pending\" && (\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button size=\"sm\" onClick={() => setSelectedCourse(course)}>\n                            <UserCheck className=\"h-4 w-4 mr-1\" />\n                            Review\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Review Course: {course.title}</DialogTitle>\n                            <DialogDescription>\n                              Review and approve or reject this course submission.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <h4 className=\"font-semibold mb-2\">Course Details</h4>\n                              <p className=\"text-sm text-muted-foreground mb-2\">{course.description}</p>\n                              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                                <span><strong>Category:</strong> {course.category}</span>\n                                <span><strong>Level:</strong> {course.level}</span>\n                                <span><strong>Price:</strong> ${course.price}</span>\n                                <span><strong>Duration:</strong> {course.duration}min</span>\n                              </div>\n                            </div>\n                            <div>\n                              <label className=\"block text-sm font-medium mb-2\">\n                                Admin Notes (Optional)\n                              </label>\n                              <Textarea\n                                placeholder=\"Add any notes or feedback...\"\n                                value={adminNotes}\n                                onChange={(e) => setAdminNotes(e.target.value)}\n                              />\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                onClick={() => approveMutation.mutate({ \n                                  courseId: course.id, \n                                  notes: adminNotes \n                                })}\n                                disabled={approveMutation.isPending}\n                                className=\"flex-1\"\n                              >\n                                <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                Approve\n                              </Button>\n                              <Button\n                                variant=\"destructive\"\n                                onClick={() => rejectMutation.mutate({ \n                                  courseId: course.id, \n                                  notes: adminNotes \n                                })}\n                                disabled={rejectMutation.isPending}\n                                className=\"flex-1\"\n                              >\n                                <XCircle className=\"h-4 w-4 mr-2\" />\n                                Reject\n                              </Button>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n\n                    {isAdmin && course.status === \"approved\" && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => publishMutation.mutate({ \n                          courseId: course.id, \n                          notes: \"\" \n                        })}\n                        disabled={publishMutation.isPending}\n                      >\n                        <Send className=\"h-4 w-4 mr-1\" />\n                        Publish\n                      </Button>\n                    )}\n\n                    {(isAdmin || (isMentor && course.mentorId === currentUser?.id)) && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => deleteMutation.mutate(course.id)}\n                        disabled={deleteMutation.isPending}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-1\" />\n                        Delete\n                      </Button>\n                    )}\n                  </div>\n\n                  {/* Admin Notes Display */}\n                  {course.adminNotes && (\n                    <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n                      <h5 className=\"font-semibold text-sm mb-1\">Admin Notes:</h5>\n                      <p className=\"text-sm text-muted-foreground\">{course.adminNotes}</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {filteredCourses.length === 0 && (\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No courses found</h3>\n              <p className=\"text-muted-foreground\">\n                {searchTerm || statusFilter !== \"all\" || categoryFilter !== \"all\"\n                  ? \"Try adjusting your filters to see more courses.\"\n                  : \"Create your first course to get started.\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Analytics Modal */}\n        {showAnalytics && analytics && (\n          <Dialog open={!!showAnalytics} onOpenChange={() => setShowAnalytics(null)}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Course Analytics</DialogTitle>\n                <DialogDescription>\n                  Performance metrics for the selected course\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <TrendingUp className=\"h-8 w-8 text-blue-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold\">{analytics.totalEnrollments}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Enrollments</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <CheckCircle className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold\">{analytics.totalCompletions}</div>\n                  <div className=\"text-sm text-muted-foreground\">Completions</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <DollarSign className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold\">${analytics.totalRevenue.toFixed(0)}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Revenue</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <Star className=\"h-8 w-8 text-yellow-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold\">{analytics.averageRating.toFixed(1)}</div>\n                  <div className=\"text-sm text-muted-foreground\">Average Rating</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <BookOpen className=\"h-8 w-8 text-purple-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold\">{analytics.totalLessonsCompleted}</div>\n                  <div className=\"text-sm text-muted-foreground\">Lessons Completed</div>\n                </div>\n                <div className=\"text-center p-4 bg-muted rounded-lg\">\n                  <Users className=\"h-8 w-8 text-indigo-500 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold\">\n                    {analytics.totalEnrollments > 0 ? \n                      Math.round((analytics.totalCompletions / analytics.totalEnrollments) * 100) : 0}%\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Completion Rate</div>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CourseManagementDashboard;","size_bytes":21131},"client/src/components/master/ClassroomCreationForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { Users, BookOpen, Globe } from \"lucide-react\";\n\nconst apiRequest = async (url: string, options: { method: string; body?: string }) => {\n  const response = await fetch(url, {\n    method: options.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: options.body,\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\nconst classroomSchema = z.object({\n  title: z.string().min(3, \"Title must be at least 3 characters\").max(100, \"Title too long\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\").max(500, \"Description too long\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  level: z.string().min(1, \"Level is required\"),\n  maxStudents: z.number().min(1, \"Must allow at least 1 student\").max(500, \"Too many students\"),\n});\n\ntype ClassroomFormData = z.infer<typeof classroomSchema>;\n\ninterface ClassroomCreationFormProps {\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nconst subjects = [\n  \"Piano\",\n  \"Guitar\", \n  \"Violin\",\n  \"Vocals\",\n  \"Drums\",\n  \"Bass\",\n  \"Music Theory\",\n  \"Composition\",\n  \"Music Production\",\n  \"General Music\"\n];\n\nconst levels = [\n  \"Beginner\",\n  \"Intermediate\", \n  \"Advanced\",\n  \"All Levels\"\n];\n\nexport default function ClassroomCreationForm({ onSuccess, onCancel }: ClassroomCreationFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const currentUser = getCurrentUser();\n\n  const form = useForm<ClassroomFormData>({\n    resolver: zodResolver(classroomSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      subject: \"\",\n      level: \"\",\n      maxStudents: 30,\n    },\n  });\n\n  const createClassroom = useMutation({\n    mutationFn: async (data: ClassroomFormData) => {\n      return apiRequest('/api/classrooms', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...data,\n          masterId: parseInt(currentUser?.id || '0'),\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Classroom Created\",\n        description: \"Your classroom has been created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/classrooms'] });\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create classroom\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ClassroomFormData) => {\n    createClassroom.mutate(data);\n  };\n\n  return (\n    <Card className=\"max-w-2xl mx-auto\">\n      <CardHeader className=\"text-center space-y-4\">\n        <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n          <Users className=\"w-8 h-8 text-white\" />\n        </div>\n        <CardTitle className=\"text-2xl font-bold\">Create New Classroom</CardTitle>\n        <CardDescription className=\"text-lg\">\n          Set up a new classroom to teach and manage your students\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Feature highlights */}\n        <div className=\"grid md:grid-cols-3 gap-4 mb-6\">\n          <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n            <BookOpen className=\"w-6 h-6 text-blue-600 mx-auto mb-1\" />\n            <h4 className=\"font-medium text-blue-800 dark:text-blue-300 text-sm\">Course Management</h4>\n          </div>\n          <div className=\"text-center p-3 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n            <Users className=\"w-6 h-6 text-green-600 mx-auto mb-1\" />\n            <h4 className=\"font-medium text-green-800 dark:text-green-300 text-sm\">Student Tracking</h4>\n          </div>\n          <div className=\"text-center p-3 bg-purple-50 dark:bg-purple-950/20 rounded-lg\">\n            <Globe className=\"w-6 h-6 text-purple-600 mx-auto mb-1\" />\n            <h4 className=\"font-medium text-purple-800 dark:text-purple-300 text-sm\">Live Sessions</h4>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">Classroom Title *</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"e.g., Advanced Piano Techniques, Guitar Fundamentals...\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">Description *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Describe what students will learn in this classroom, teaching methods, expectations...\"\n                      className=\"min-h-[100px] resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"subject\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-base font-semibold\">Subject *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select subject\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {subjects.map((subject) => (\n                          <SelectItem key={subject} value={subject}>\n                            {subject}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"level\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-base font-semibold\">Level *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select level\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {levels.map((level) => (\n                          <SelectItem key={level} value={level}>\n                            {level}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"maxStudents\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">Maximum Students</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"number\"\n                      min={1}\n                      max={500}\n                      {...field}\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-4 pt-4\">\n              {onCancel && (\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n              )}\n              <Button\n                type=\"submit\"\n                disabled={createClassroom.isPending}\n                className=\"flex-1 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n              >\n                {createClassroom.isPending ? \"Creating...\" : \"Create Classroom\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9809},"client/src/components/master/EnrollmentRequestManager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Clock, CheckCircle, XCircle, Search, Mail, Calendar,\n  UserCheck, UserX, AlertCircle, Users, Eye\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getCurrentUser } from \"@/lib/auth\";\n\ninterface EnrollmentRequest {\n  id: number;\n  userId: number;\n  classroomId: number;\n  role: string;\n  status: string;\n  joinedAt: string;\n  username: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  avatar: string;\n}\n\ninterface EnrollmentRequestManagerProps {\n  classroomId: number;\n  academyName: string;\n}\n\nexport default function EnrollmentRequestManager({ classroomId, academyName }: EnrollmentRequestManagerProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedTab, setSelectedTab] = useState(\"pending\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const user = getCurrentUser();\n\n  // Fetch enrollment requests\n  const { data: allRequests = [], isLoading } = useQuery({\n    queryKey: [\"/api/classrooms\", classroomId, \"requests\"],\n    queryFn: () => apiRequest(`/api/classrooms/${classroomId}/requests`),\n    enabled: !!classroomId,\n  });\n\n  // Filter requests by status and search\n  const pendingRequests = allRequests.filter((req: EnrollmentRequest) => req.status === 'pending');\n  const approvedRequests = allRequests.filter((req: EnrollmentRequest) => req.status === 'active');\n  const rejectedRequests = allRequests.filter((req: EnrollmentRequest) => req.status === 'rejected');\n\n  const filteredRequests = {\n    pending: pendingRequests.filter((req: EnrollmentRequest) => \n      req.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.email?.toLowerCase().includes(searchTerm.toLowerCase())\n    ),\n    approved: approvedRequests.filter((req: EnrollmentRequest) => \n      req.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.email?.toLowerCase().includes(searchTerm.toLowerCase())\n    ),\n    rejected: rejectedRequests.filter((req: EnrollmentRequest) => \n      req.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.firstName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.lastName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      req.email?.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  };\n\n  // Approve request mutation\n  const approveRequestMutation = useMutation({\n    mutationFn: (requestId: number) => \n      apiRequest(`/api/classroom-memberships/${requestId}/status`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ \n          status: \"active\",\n          reviewedBy: user?.id \n        })\n      }),\n    onSuccess: () => {\n      toast({ \n        title: \"Request Approved!\", \n        description: \"The student has been accepted into your academy.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\", classroomId, \"requests\"] });\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to approve request\", \n        description: \"There was an error approving the request. Please try again.\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  // Reject request mutation\n  const rejectRequestMutation = useMutation({\n    mutationFn: (requestId: number) => \n      apiRequest(`/api/classroom-memberships/${requestId}/status`, {\n        method: \"PATCH\",\n        body: JSON.stringify({ \n          status: \"rejected\",\n          reviewedBy: user?.id \n        })\n      }),\n    onSuccess: () => {\n      toast({ \n        title: \"Request Rejected\", \n        description: \"The enrollment request has been declined.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/classrooms\", classroomId, \"requests\"] });\n    },\n    onError: () => {\n      toast({ \n        title: \"Failed to reject request\", \n        description: \"There was an error rejecting the request. Please try again.\",\n        variant: \"destructive\" \n      });\n    }\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'rejected': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending': return <Clock className=\"h-4 w-4\" />;\n      case 'active': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'rejected': return <XCircle className=\"h-4 w-4\" />;\n      default: return <AlertCircle className=\"h-4 w-4\" />;\n    }\n  };\n\n  const renderRequestsTable = (requests: EnrollmentRequest[], showActions = false) => (\n    <Table>\n      <TableHeader>\n        <TableRow>\n          <TableHead>Student</TableHead>\n          <TableHead>Contact</TableHead>\n          <TableHead>Request Date</TableHead>\n          <TableHead>Status</TableHead>\n          {showActions && <TableHead>Actions</TableHead>}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {requests.length === 0 ? (\n          <TableRow>\n            <TableCell colSpan={showActions ? 5 : 4} className=\"text-center py-8 text-muted-foreground\">\n              No {selectedTab} requests found\n            </TableCell>\n          </TableRow>\n        ) : (\n          requests.map((request) => (\n            <TableRow key={request.id}>\n              <TableCell>\n                <div className=\"flex items-center gap-3\">\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={request.avatar} />\n                    <AvatarFallback>\n                      {request.firstName?.[0]}{request.lastName?.[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <div className=\"font-medium\">\n                      {request.firstName && request.lastName ? \n                        `${request.firstName} ${request.lastName}` : \n                        request.username}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">@{request.username}</div>\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Mail className=\"h-4 w-4\" />\n                  {request.email}\n                </div>\n              </TableCell>\n              <TableCell>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  {new Date(request.joinedAt).toLocaleDateString()}\n                </div>\n              </TableCell>\n              <TableCell>\n                <Badge className={getStatusColor(request.status)}>\n                  {getStatusIcon(request.status)}\n                  <span className=\"ml-1 capitalize\">{request.status}</span>\n                </Badge>\n              </TableCell>\n              {showActions && (\n                <TableCell>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => approveRequestMutation.mutate(request.id)}\n                      disabled={approveRequestMutation.isPending}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      <UserCheck className=\"h-4 w-4 mr-1\" />\n                      Approve\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => rejectRequestMutation.mutate(request.id)}\n                      disabled={rejectRequestMutation.isPending}\n                    >\n                      <UserX className=\"h-4 w-4 mr-1\" />\n                      Reject\n                    </Button>\n                  </div>\n                </TableCell>\n              )}\n            </TableRow>\n          ))\n        )}\n      </TableBody>\n    </Table>\n  );\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p>Loading enrollment requests...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Users className=\"h-5 w-5\" />\n          Enrollment Requests\n        </CardTitle>\n        <CardDescription>\n          Manage student enrollment requests for {academyName}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search by name, username, or email...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-5 w-5 text-yellow-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{pendingRequests.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Pending</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{approvedRequests.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Approved</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-2\">\n                <XCircle className=\"h-5 w-5 text-red-500\" />\n                <div>\n                  <div className=\"text-2xl font-bold\">{rejectedRequests.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Rejected</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tabs */}\n        <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n          <TabsList>\n            <TabsTrigger value=\"pending\" className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4\" />\n              Pending ({pendingRequests.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"approved\" className=\"flex items-center gap-2\">\n              <CheckCircle className=\"h-4 w-4\" />\n              Approved ({approvedRequests.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"rejected\" className=\"flex items-center gap-2\">\n              <XCircle className=\"h-4 w-4\" />\n              Rejected ({rejectedRequests.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"pending\" className=\"mt-6\">\n            {renderRequestsTable(filteredRequests.pending, true)}\n          </TabsContent>\n\n          <TabsContent value=\"approved\" className=\"mt-6\">\n            {renderRequestsTable(filteredRequests.approved, false)}\n          </TabsContent>\n\n          <TabsContent value=\"rejected\" className=\"mt-6\">\n            {renderRequestsTable(filteredRequests.rejected, false)}\n          </TabsContent>\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":12770},"client/src/components/mentor/MasterRoleRequestForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getCurrentUser } from \"@/lib/auth\";\nimport { Crown, Users, BookOpen, Award } from \"lucide-react\";\n\nconst apiRequest = async (url: string, options: { method: string; body?: string }) => {\n  const response = await fetch(url, {\n    method: options.method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: options.body,\n  });\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n  \n  return response.json();\n};\n\nconst masterRoleRequestSchema = z.object({\n  reason: z.string().min(50, \"Please provide at least 50 characters explaining why you want to become a master\"),\n  experience: z.string().min(30, \"Please describe your teaching/classroom management experience (minimum 30 characters)\"),\n  plannedClassrooms: z.string().min(30, \"Please describe your planned classrooms (minimum 30 characters)\"),\n  additionalQualifications: z.string().optional(),\n});\n\ntype MasterRoleRequestFormData = z.infer<typeof masterRoleRequestSchema>;\n\ninterface MasterRoleRequestFormProps {\n  onSuccess?: () => void;\n}\n\nexport default function MasterRoleRequestForm({ onSuccess }: MasterRoleRequestFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const currentUser = getCurrentUser();\n\n  const form = useForm<MasterRoleRequestFormData>({\n    resolver: zodResolver(masterRoleRequestSchema),\n    defaultValues: {\n      reason: \"\",\n      experience: \"\",\n      plannedClassrooms: \"\",\n      additionalQualifications: \"\",\n    },\n  });\n\n  const submitRequest = useMutation({\n    mutationFn: async (data: MasterRoleRequestFormData) => {\n      return apiRequest(`/api/master-role-requests`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          ...data,\n          mentorId: parseInt(currentUser?.id || \"0\"),\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Master Role Request Submitted\",\n        description: \"Your request has been submitted successfully. You'll be notified when it's reviewed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/master-role-requests\"] });\n      form.reset();\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit master role request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: MasterRoleRequestFormData) => {\n    submitRequest.mutate(data);\n  };\n\n  return (\n    <Card className=\"max-w-4xl mx-auto\">\n      <CardHeader className=\"text-center space-y-4\">\n        <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center\">\n          <Crown className=\"w-8 h-8 text-white\" />\n        </div>\n        <CardTitle className=\"text-2xl font-bold\">Request Master Role</CardTitle>\n        <CardDescription className=\"text-lg\">\n          Apply to become a master and unlock classroom creation and management features\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-6\">\n        {/* Benefits Section */}\n        <div className=\"grid md:grid-cols-3 gap-4 mb-8\">\n          <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n            <Users className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n            <h3 className=\"font-semibold text-blue-800 dark:text-blue-300\">Create Classrooms</h3>\n            <p className=\"text-sm text-blue-600 dark:text-blue-400\">Build and manage your own virtual classrooms</p>\n          </div>\n          <div className=\"text-center p-4 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n            <BookOpen className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n            <h3 className=\"font-semibold text-green-800 dark:text-green-300\">Advanced Tools</h3>\n            <p className=\"text-sm text-green-600 dark:text-green-400\">Access advanced teaching and management tools</p>\n          </div>\n          <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-950/20 rounded-lg\">\n            <Award className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n            <h3 className=\"font-semibold text-purple-800 dark:text-purple-300\">Enhanced Status</h3>\n            <p className=\"text-sm text-purple-600 dark:text-purple-400\">Gain recognition as a master educator</p>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"reason\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">\n                    Why do you want to become a master? *\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Explain your motivation for becoming a master, your goals for classroom management, and how it aligns with your teaching philosophy...\"\n                      className=\"min-h-[120px] resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"experience\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">\n                    Teaching & Classroom Management Experience *\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Describe your experience in teaching, managing students, curriculum development, or any relevant educational background...\"\n                      className=\"min-h-[120px] resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"plannedClassrooms\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">\n                    Planned Classrooms & Teaching Approach *\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Describe the type of classrooms you plan to create, your teaching methodology, subject areas, and how you'll engage students...\"\n                      className=\"min-h-[120px] resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"additionalQualifications\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-base font-semibold\">\n                    Additional Qualifications (Optional)\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"List any additional certifications, awards, publications, or relevant qualifications that support your application...\"\n                      className=\"min-h-[100px] resize-none\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex gap-4 pt-4\">\n              <Button\n                type=\"submit\"\n                disabled={submitRequest.isPending}\n                className=\"flex-1 bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600\"\n              >\n                {submitRequest.isPending ? \"Submitting...\" : \"Submit Master Request\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8763},"client/src/components/mentor/MasterRoleRequestStatus.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { getCurrentUser, refreshUserData } from \"@/lib/auth\";\nimport { Crown, Clock, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface MasterRoleRequest {\n  id: number;\n  mentorId: number;\n  reason: string;\n  experience: string;\n  plannedClassrooms: string;\n  additionalQualifications?: string;\n  status: 'pending' | 'approved' | 'rejected';\n  adminNotes?: string;\n  reviewedBy?: number;\n  reviewedAt?: Date;\n  approvedAt?: Date;\n  rejectedAt?: Date;\n  createdAt: Date;\n}\n\nconst getStatusIcon = (status: string) => {\n  switch (status) {\n    case 'pending':\n      return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n    case 'approved':\n      return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    case 'rejected':\n      return <XCircle className=\"w-4 h-4 text-red-500\" />;\n    default:\n      return <AlertCircle className=\"w-4 h-4 text-gray-500\" />;\n  }\n};\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case 'pending':\n      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n    case 'approved':\n      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n    case 'rejected':\n      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n    default:\n      return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n  }\n};\n\nexport default function MasterRoleRequestStatus() {\n  const currentUser = getCurrentUser();\n\n  const { data: requests, isLoading } = useQuery({\n    queryKey: [`/api/mentors/${currentUser?.id}/master-role-requests`],\n    enabled: !!currentUser?.id,\n  });\n\n  // Refresh user data when master role request is approved\n  useEffect(() => {\n    if (requests && Array.isArray(requests) && requests.length > 0) {\n      const latestRequest = requests[0] as MasterRoleRequest;\n      if (latestRequest.status === 'approved' && !currentUser?.isMaster) {\n        // If the request is approved but user data doesn't reflect master status yet\n        refreshUserData().then(() => {\n          console.log('User data refreshed after master role approval');\n        });\n      }\n    }\n  }, [requests, currentUser?.isMaster]);\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!requests || !Array.isArray(requests) || requests.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Crown className=\"w-5 h-5 text-yellow-500\" />\n            Master Role Status\n          </CardTitle>\n          <CardDescription>\n            You haven't submitted a master role request yet\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              To become a master and create classrooms, you need to submit a master role request for admin approval.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const latestRequest = (requests as MasterRoleRequest[])[0];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Crown className=\"w-5 h-5 text-yellow-500\" />\n          Master Role Request Status\n        </CardTitle>\n        <CardDescription>\n          Track your master role application progress\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {getStatusIcon(latestRequest.status)}\n            <span className=\"font-medium\">Current Status:</span>\n            <Badge className={getStatusColor(latestRequest.status)}>\n              {latestRequest.status.charAt(0).toUpperCase() + latestRequest.status.slice(1)}\n            </Badge>\n          </div>\n          <span className=\"text-sm text-muted-foreground\">\n            Submitted: {format(new Date(latestRequest.createdAt), \"MMM d, yyyy\")}\n          </span>\n        </div>\n\n        {latestRequest.status === 'pending' && (\n          <Alert>\n            <Clock className=\"h-4 w-4\" />\n            <AlertDescription>\n              Your master role request is being reviewed by our admin team. You'll be notified once a decision is made.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {latestRequest.status === 'approved' && (\n          <Alert className=\"border-green-200 bg-green-50 dark:border-green-800 dark:bg-green-950\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertDescription className=\"text-green-700 dark:text-green-300\">\n              Congratulations! Your master role request has been approved. You can now create and manage classrooms.\n              {latestRequest.approvedAt && (\n                <span className=\"block mt-1 text-sm\">\n                  Approved on: {format(new Date(latestRequest.approvedAt), \"MMM d, yyyy 'at' h:mm a\")}\n                </span>\n              )}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {latestRequest.status === 'rejected' && (\n          <Alert className=\"border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-950\">\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n            <AlertDescription className=\"text-red-700 dark:text-red-300\">\n              Your master role request was not approved at this time.\n              {latestRequest.rejectedAt && (\n                <span className=\"block mt-1 text-sm\">\n                  Reviewed on: {format(new Date(latestRequest.rejectedAt), \"MMM d, yyyy 'at' h:mm a\")}\n                </span>\n              )}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {latestRequest.adminNotes && (\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <h4 className=\"font-medium mb-2\">Admin Notes:</h4>\n            <p className=\"text-sm text-muted-foreground\">{latestRequest.adminNotes}</p>\n          </div>\n        )}\n\n        <div className=\"grid gap-4 text-sm\">\n          <div>\n            <h4 className=\"font-medium mb-1\">Your Application Summary:</h4>\n            <div className=\"space-y-2 text-muted-foreground\">\n              <p><strong>Reason:</strong> {latestRequest.reason.slice(0, 100)}...</p>\n              <p><strong>Experience:</strong> {latestRequest.experience.slice(0, 100)}...</p>\n              <p><strong>Planned Classrooms:</strong> {latestRequest.plannedClassrooms.slice(0, 100)}...</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7202},"client/src/components/mentor/MentorNavigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  BarChart3, \n  BookOpen, \n  Users, \n  MessageCircle, \n  Calendar,\n  Settings,\n  LogOut,\n  Crown,\n  UserCheck,\n  GraduationCap,\n  Search\n} from \"lucide-react\";\nimport { getCurrentUser, isMaster, onAuthStateChange } from \"@/lib/auth\";\n\ninterface MentorNavigationProps {\n  currentUser: any;\n  className?: string;\n}\n\nexport const MentorNavigation = ({ currentUser, className = \"\" }: MentorNavigationProps) => {\n  const [location] = useLocation();\n  const [authUser, setAuthUser] = useState(getCurrentUser());\n\n  // Listen for user authentication state changes\n  useEffect(() => {\n    const cleanup = onAuthStateChange((user) => {\n      setAuthUser(user);\n    });\n    return cleanup;\n  }, []);\n\n  const baseNavigationItems = [\n    {\n      label: \"Dashboard\",\n      href: \"/mentor-dashboard\",\n      icon: BarChart3,\n      active: location === \"/mentor-dashboard\"\n    },\n    {\n      label: \"My Students\",\n      href: \"/mentor-students\",\n      icon: GraduationCap,\n      active: location === \"/mentor-students\"\n    },\n    {\n      label: \"Requests\",\n      href: \"/mentor-requests\",\n      icon: UserCheck,\n      active: location === \"/mentor-requests\"\n    },\n    {\n      label: \"Interactions\",\n      href: \"/mentor-interactions\",\n      icon: MessageCircle,\n      active: location === \"/mentor-interactions\"\n    },\n    {\n      label: \"Sessions\",\n      href: \"/mentor-sessions\",\n      icon: Calendar,\n      active: location === \"/mentor-sessions\"\n    },\n    {\n      label: \"My Classroom\",\n      href: \"/staff-classroom\",\n      icon: BookOpen,\n      active: location === \"/staff-classroom\",\n      hideForMaster: true\n    },\n    {\n      label: \"Discover Academies\",\n      href: \"/classroom-discovery\",\n      hideForMaster: true,\n      icon: Search,\n      active: location === \"/classroom-discovery\"\n    }\n  ];\n\n  // For masters, only add master dashboard navigation (classrooms managed within master dashboard)\n  const masterNavigationItems = [\n    ...baseNavigationItems,\n    {\n      label: \"Master Dashboard\",\n      href: \"/master-dashboard\",\n      icon: Crown,\n      active: location === \"/master-dashboard\"\n    }\n  ];\n\n  // Filter navigation items based on user role\n  const getFilteredNavigationItems = () => {\n    const isUserMaster = authUser?.role === 'mentor' && authUser?.isMaster === true;\n    const items = isUserMaster ? masterNavigationItems : baseNavigationItems;\n    \n    // Filter out items that should be hidden for masters\n    if (isUserMaster) {\n      return items.filter(item => !item.hideForMaster);\n    }\n    \n    return items;\n  };\n\n  const navigationItems = getFilteredNavigationItems();\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"userRole\");\n    localStorage.removeItem(\"currentUser\");\n    localStorage.removeItem(\"mentorId\");\n    window.location.href = \"/\";\n  };\n\n  return (\n    <nav className={`w-64 min-w-64 bg-card border-r flex-shrink-0 ${className}`}>\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\n            {currentUser?.firstName?.[0]}{currentUser?.lastName?.[0]}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"font-medium text-sm truncate\">\n              {currentUser?.firstName} {currentUser?.lastName}\n            </p>\n            <div className=\"flex items-center gap-1\">\n              <p className=\"text-xs text-muted-foreground truncate\">\n                Mentor Portal\n              </p>\n              {(authUser?.role === 'mentor' && authUser?.isMaster === true) && (\n                <Crown className=\"h-3 w-3 text-yellow-500\" />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"space-y-2\">\n          {navigationItems.map((item) => (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant={item.active ? \"default\" : \"ghost\"}\n                className=\"w-full justify-start gap-3\"\n              >\n                <item.icon className=\"h-4 w-4\" />\n                <span>{item.label}</span>\n                {item.label === \"Master Dashboard\" && (\n                  <Crown className=\"h-3 w-3 ml-auto text-yellow-500\" />\n                )}\n              </Button>\n            </Link>\n          ))}\n        </div>\n\n        <div className=\"mt-8 pt-4 border-t space-y-2\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start gap-3\"\n          >\n            <Settings className=\"h-4 w-4\" />\n            <span>Settings</span>\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start gap-3 text-red-600 hover:text-red-700 hover:bg-red-50\"\n            onClick={handleLogout}\n          >\n            <LogOut className=\"h-4 w-4\" />\n            <span>Logout</span>\n          </Button>\n        </div>\n      </div>\n    </nav>\n  );\n};","size_bytes":5175},"client/src/components/student/StudentNavigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BookOpen, \n  Video, \n  Trophy, \n  Users, \n  Calendar,\n  Settings,\n  TrendingUp,\n  User,\n  LogOut,\n  Music,\n  Target,\n  Award,\n  BarChart3,\n  MessageCircle,\n  Crown,\n  Sparkles\n} from \"lucide-react\";\n\ninterface StudentNavigationProps {\n  currentUser?: any;\n  className?: string;\n}\n\nexport const StudentNavigation = ({ currentUser, className = \"\" }: StudentNavigationProps) => {\n  const [location] = useLocation();\n\n  const navigationItems = [\n    {\n      label: \"Dashboard\",\n      href: \"/student-dashboard\",\n      icon: BarChart3,\n      active: location === \"/student-dashboard\"\n    },\n    {\n      label: \"My Courses\",\n      href: \"/student-courses\",\n      icon: BookOpen,\n      active: location === \"/student-courses\"\n    },\n    {\n      label: \"Live Sessions\",\n      href: \"/student-sessions\",\n      icon: Video,\n      active: location === \"/student-sessions\"\n    },\n    {\n      label: \"Progress\",\n      href: \"/student-progress\",\n      icon: TrendingUp,\n      active: location === \"/student-progress\"\n    },\n    {\n      label: \"Achievements\",\n      href: \"/student-achievements\",\n      icon: Trophy,\n      active: location === \"/student-achievements\"\n    },\n    {\n      label: \"Find Mentors\",\n      href: \"/student-mentors\",\n      icon: User,\n      active: location === \"/student-mentors\"\n    },\n    {\n      label: \"My Academies\",\n      href: \"/my-academies\",\n      icon: Crown,\n      active: location === \"/my-academies\"\n    },\n    {\n      label: \"Discover Academies\",\n      href: \"/academy-discovery\",\n      icon: Sparkles,\n      active: location === \"/academy-discovery\"\n    },\n    {\n      label: \"Mentor Chat\",\n      href: \"/mentor-interactions\",\n      icon: MessageCircle,\n      active: location === \"/mentor-interactions\"\n    },\n    {\n      label: \"Community\",\n      href: \"/student-community\",\n      icon: Users,\n      active: location === \"/student-community\"\n    },\n    {\n      label: \"Practice Tools\",\n      href: \"/student-tools\",\n      icon: Music,\n      active: location === \"/student-tools\"\n    }\n  ];\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"userRole\");\n    localStorage.removeItem(\"currentUser\");\n    window.location.href = \"/\";\n  };\n\n  return (\n    <nav className={`bg-card border-r ${className}`}>\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\n            {currentUser?.firstName?.[0]}{currentUser?.lastName?.[0]}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"font-medium text-sm truncate\">\n              {currentUser?.firstName} {currentUser?.lastName}\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\">\n              Student Portal\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-4\">\n        <div className=\"space-y-2\">\n          {navigationItems.map((item) => (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant={item.active ? \"default\" : \"ghost\"}\n                className=\"w-full justify-start gap-3\"\n              >\n                <item.icon className=\"h-4 w-4\" />\n                <span>{item.label}</span>\n              </Button>\n            </Link>\n          ))}\n        </div>\n\n        <div className=\"mt-8 pt-4 border-t space-y-2\">\n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start gap-3\"\n          >\n            <Settings className=\"h-4 w-4\" />\n            <span>Settings</span>\n          </Button>\n          \n          <Button\n            variant=\"ghost\"\n            className=\"w-full justify-start gap-3 text-red-600 hover:text-red-700 hover:bg-red-50\"\n            onClick={handleLogout}\n          >\n            <LogOut className=\"h-4 w-4\" />\n            <span>Logout</span>\n          </Button>\n        </div>\n      </div>\n    </nav>\n  );\n};","size_bytes":4143},"client/src/components/student/StudentSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { logout } from \"@/lib/auth\";\nimport { \n  BookOpen, \n  Video, \n  Trophy, \n  Users, \n  Calendar,\n  Settings,\n  Music,\n  Headphones,\n  Target,\n  MessageCircle,\n  FileText,\n  Star,\n  TrendingUp,\n  User,\n  LogOut,\n  Crown,\n  Sparkles\n} from \"lucide-react\";\n\ninterface StudentSidebarProps {\n  currentUser?: any;\n  onLogout?: () => void;\n}\n\nexport const StudentSidebar = ({ currentUser, onLogout }: StudentSidebarProps) => {\n  const [location] = useLocation();\n  const [collapsed, setCollapsed] = useState(false);\n\n  const navigationItems = [\n    {\n      label: \"Dashboard\",\n      href: \"/student-dashboard\",\n      icon: TrendingUp,\n      active: location === \"/student-dashboard\"\n    },\n    {\n      label: \"My Courses\",\n      href: \"/student-courses\",\n      icon: BookOpen,\n      active: location === \"/student-courses\",\n      badge: \"3\" // Number of active courses\n    },\n    {\n      label: \"Live Sessions\",\n      href: \"/student-sessions\",\n      icon: Video,\n      active: location === \"/student-sessions\",\n      badge: \"2\" // Number of upcoming sessions\n    },\n    {\n      label: \"Find Mentors\",\n      href: \"/student-mentors\",\n      icon: User,\n      active: location === \"/student-mentors\"\n    },\n    {\n      label: \"My Academies\",\n      href: \"/my-academies\",\n      icon: Crown,\n      active: location === \"/my-academies\"\n    },\n    {\n      label: \"Discover Academies\",\n      href: \"/academy-discovery\",\n      icon: Sparkles,\n      active: location === \"/academy-discovery\"\n    },\n    {\n      label: \"Mentor Chat\",\n      href: \"/mentor-interactions\",\n      icon: MessageCircle,\n      active: location === \"/mentor-interactions\"\n    },\n    {\n      label: \"Practice Tools\",\n      href: \"/tools\",\n      icon: Music,\n      active: location === \"/tools\"\n    },\n    {\n      label: \"Achievements\",\n      href: \"/student-achievements\",\n      icon: Trophy,\n      active: location === \"/student-achievements\"\n    },\n    {\n      label: \"Community\",\n      href: \"/community\",\n      icon: Users,\n      active: location === \"/community\"\n    },\n    {\n      label: \"Messages\",\n      href: \"/student-messages\",\n      icon: MessageCircle,\n      active: location === \"/student-messages\"\n    },\n    {\n      label: \"Progress\",\n      href: \"/student-progress\",\n      icon: Target,\n      active: location === \"/student-progress\"\n    }\n  ];\n\n  const quickStats = [\n    { label: \"Courses\", value: \"5\", icon: BookOpen },\n    { label: \"Hours\", value: \"48\", icon: Headphones },\n    { label: \"Streak\", value: \"7d\", icon: Target }\n  ];\n\n  return (\n    <div className={`bg-card border-r transition-all duration-300 ${collapsed ? 'w-16' : 'w-64'} flex flex-col h-full`}>\n      {/* Header */}\n      <div className=\"p-4 border-b\">\n        <div className=\"flex items-center justify-between\">\n          {!collapsed && (\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                <Music className=\"h-4 w-4 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"font-semibold text-sm\">Student Portal</h2>\n                <p className=\"text-xs text-muted-foreground\">HarmonyLearn</p>\n              </div>\n            </div>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setCollapsed(!collapsed)}\n            className=\"h-8 w-8 p-0\"\n          >\n            <div className={`transition-transform ${collapsed ? 'rotate-180' : ''}`}>\n              →\n            </div>\n          </Button>\n        </div>\n      </div>\n\n      {/* User Profile */}\n      {!collapsed && currentUser && (\n        <div className=\"p-4 border-b\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold\">\n              {currentUser?.firstName?.[0]}{currentUser?.lastName?.[0]}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"font-medium text-sm truncate\">\n                {currentUser?.firstName} {currentUser?.lastName}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {currentUser?.email}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Quick Stats */}\n      {!collapsed && (\n        <div className=\"p-4 border-b\">\n          <h3 className=\"text-xs font-semibold text-muted-foreground mb-3 uppercase tracking-wider\">\n            Quick Stats\n          </h3>\n          <div className=\"grid grid-cols-3 gap-2\">\n            {quickStats.map((stat) => (\n              <Card key={stat.label} className=\"bg-muted/50\">\n                <CardContent className=\"p-2 text-center\">\n                  <stat.icon className=\"h-4 w-4 mx-auto mb-1 text-muted-foreground\" />\n                  <p className=\"text-sm font-semibold\">{stat.value}</p>\n                  <p className=\"text-xs text-muted-foreground\">{stat.label}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Navigation */}\n      <div className=\"flex-1 p-4\">\n        <nav className=\"space-y-2\">\n          {navigationItems.map((item) => (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant={item.active ? \"default\" : \"ghost\"}\n                className={`w-full justify-start gap-3 ${collapsed ? 'px-2' : 'px-3'}`}\n                title={collapsed ? item.label : undefined}\n              >\n                <item.icon className=\"h-4 w-4 flex-shrink-0\" />\n                {!collapsed && (\n                  <>\n                    <span className=\"flex-1 text-left\">{item.label}</span>\n                    {item.badge && (\n                      <Badge variant=\"secondary\" className=\"ml-auto\">\n                        {item.badge}\n                      </Badge>\n                    )}\n                  </>\n                )}\n              </Button>\n            </Link>\n          ))}\n        </nav>\n      </div>\n\n      {/* Footer Actions */}\n      <div className=\"p-4 border-t space-y-2\">\n        <Link href=\"/student-settings\">\n          <Button\n            variant=\"ghost\"\n            className={`w-full justify-start gap-3 ${collapsed ? 'px-2' : 'px-3'}`}\n            title={collapsed ? \"Settings\" : undefined}\n          >\n            <Settings className=\"h-4 w-4 flex-shrink-0\" />\n            {!collapsed && <span>Settings</span>}\n          </Button>\n        </Link>\n        \n        <Button\n          variant=\"ghost\"\n          className={`w-full justify-start gap-3 text-red-600 hover:text-red-700 hover:bg-red-50 ${collapsed ? 'px-2' : 'px-3'}`}\n          onClick={() => {\n            logout();\n            if (onLogout) onLogout();\n          }}\n          title={collapsed ? \"Logout\" : undefined}\n        >\n          <LogOut className=\"h-4 w-4 flex-shrink-0\" />\n          {!collapsed && <span>Logout</span>}\n        </Button>\n      </div>\n    </div>\n  );\n};","size_bytes":7325},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-musical transition-all duration-300\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-warm transition-all duration-300\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        hero: \"bg-gradient-hero text-primary-foreground hover:scale-105 shadow-glow transition-all duration-300\",\n        musical: \"bg-gradient-cool text-primary-foreground hover:animate-pulse-glow shadow-musical transition-all duration-300\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2227},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"client/src/pages/master/MasterDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { getCurrentUser, isMaster } from \"@/lib/auth\";\nimport ClassroomCreationForm from \"@/components/master/ClassroomCreationForm\";\nimport EnrollmentRequestManager from \"@/components/master/EnrollmentRequestManager\";\nimport { Crown, Users, BookOpen, Plus, Calendar, TrendingUp, Star, UserCheck } from \"lucide-react\";\n\ninterface Classroom {\n  id: number;\n  title: string;\n  description: string;\n  subject: string;\n  level: string;\n  masterId: number;\n  maxStudents: number;\n  isActive: boolean;\n  createdAt: Date;\n}\n\nexport default function MasterDashboard() {\n  const currentUser = getCurrentUser();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n\n  const { data: classrooms, isLoading: loadingClassrooms } = useQuery({\n    queryKey: [`/api/classrooms/master/${currentUser?.id}`],\n    enabled: !!currentUser?.id && isMaster(),\n  });\n\n  const { data: stats, isLoading: loadingStats } = useQuery({\n    queryKey: [`/api/master/${currentUser?.id}/stats`],\n    enabled: !!currentUser?.id && isMaster(),\n  });\n\n  if (!isMaster()) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <Card className=\"max-w-2xl mx-auto text-center\">\n          <CardHeader>\n            <Crown className=\"w-16 h-16 text-yellow-500 mx-auto mb-4\" />\n            <CardTitle className=\"text-2xl\">Master Access Required</CardTitle>\n            <CardDescription className=\"text-lg\">\n              You need master status to access this dashboard.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              Apply for master status from your mentor dashboard to create and manage classrooms.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const classroomList = Array.isArray(classrooms) ? classrooms as Classroom[] : [];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"space-y-1\">\n          <div className=\"flex items-center gap-3\">\n            <Crown className=\"w-8 h-8 text-yellow-500\" />\n            <h1 className=\"text-3xl font-bold\">Master Dashboard</h1>\n            <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\">\n              Master\n            </Badge>\n          </div>\n          <p className=\"text-lg text-muted-foreground\">\n            Manage your classrooms and student progress\n          </p>\n        </div>\n        \n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Classroom\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Classroom</DialogTitle>\n            </DialogHeader>\n            <ClassroomCreationForm\n              onSuccess={() => setShowCreateDialog(false)}\n              onCancel={() => setShowCreateDialog(false)}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Total Classrooms\n              </CardTitle>\n              <Users className=\"w-4 h-4 text-muted-foreground\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{classroomList.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Active classrooms</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Total Students\n              </CardTitle>\n              <BookOpen className=\"w-4 h-4 text-muted-foreground\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {loadingStats ? \"...\" : ((stats as any)?.totalStudents || 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Across all classrooms</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Live Sessions\n              </CardTitle>\n              <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {loadingStats ? \"...\" : ((stats as any)?.liveSessions || 0)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">This week</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                Average Rating\n              </CardTitle>\n              <Star className=\"w-4 h-4 text-muted-foreground\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {loadingStats ? \"...\" : ((stats as any)?.averageRating || \"4.8\")}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Student feedback</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Classrooms Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5\" />\n            Your Classrooms\n          </CardTitle>\n          <CardDescription>\n            Manage and monitor your active classrooms\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {loadingClassrooms ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"h-24 bg-gray-200 dark:bg-gray-700 rounded-lg\"></div>\n                </div>\n              ))}\n            </div>\n          ) : classroomList.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Users className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No Classrooms Yet</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Create your first classroom to start teaching and managing students.\n              </p>\n              <Button\n                onClick={() => setShowCreateDialog(true)}\n                className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Classroom\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid gap-4\">\n              {classroomList.map((classroom) => (\n                <div key={classroom.id} className=\"border rounded-lg p-6 hover:bg-muted/50 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-2 flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <h3 className=\"text-lg font-semibold\">{classroom.title}</h3>\n                        <Badge variant=\"secondary\">{classroom.subject}</Badge>\n                        <Badge variant=\"outline\">{classroom.level}</Badge>\n                      </div>\n                      <p className=\"text-muted-foreground\">{classroom.description}</p>\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                        <span className=\"flex items-center gap-1\">\n                          <Users className=\"w-4 h-4\" />\n                          0/{classroom.maxStudents} students\n                        </span>\n                        <span className=\"flex items-center gap-1\">\n                          <Calendar className=\"w-4 h-4\" />\n                          Created {new Date(classroom.createdAt).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        Manage\n                      </Button>\n                      <Button size=\"sm\">\n                        View\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Performance Analytics\n            </CardTitle>\n            <CardDescription>\n              Track your teaching performance and student progress\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button variant=\"outline\" className=\"w-full\">\n              View Analytics\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              Schedule Management\n            </CardTitle>\n            <CardDescription>\n              Manage live sessions and classroom schedules\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button variant=\"outline\" className=\"w-full\">\n              Manage Schedule\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enrollment Request Management */}\n      {classroomList.length > 0 && (\n        <div className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <UserCheck className=\"h-6 w-6\" />\n            Student Enrollment Requests\n          </h2>\n          {classroomList.map((classroom) => (\n            <EnrollmentRequestManager\n              key={classroom.id}\n              classroomId={classroom.id}\n              academyName={classroom.title}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":11315},"client/src/pages/tools/MetronomePage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Music, Play, Pause, Settings, ArrowLeft } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { getCurrentUser, isAuthenticated } from \"@/lib/auth\";\n\nexport default function MetronomePage() {\n  const [currentUser] = useState(getCurrentUser());\n  const [, setLocation] = useLocation();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      setLocation('/');\n    }\n  }, [setLocation]);\n\n  const [bpm, setBpm] = useState<number[]>([120]);\n  const [timeSignature, setTimeSignature] = useState(\"4/4\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [accentPattern, setAccentPattern] = useState(\"strong-weak\");\n  const [volume, setVolume] = useState<number[]>([80]);\n\n  // Audio context and scheduling\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n  const [nextNoteTime, setNextNoteTime] = useState(0);\n  const [currentBeat, setCurrentBeat] = useState(0);\n\n  useEffect(() => {\n    if (isPlaying && !audioContext) {\n      const ctx = new (window.AudioContext || (window as any).webkitAudioContext)();\n      setAudioContext(ctx);\n      setNextNoteTime(ctx.currentTime);\n    }\n  }, [isPlaying, audioContext]);\n\n  const playClick = (isAccent: boolean = false) => {\n    if (!audioContext) return;\n\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n\n    oscillator.frequency.value = isAccent ? 1000 : 800;\n    oscillator.type = 'square';\n\n    gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n    gainNode.gain.linearRampToValueAtTime(volume[0] / 100, audioContext.currentTime + 0.01);\n    gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.1);\n\n    oscillator.start(audioContext.currentTime);\n    oscillator.stop(audioContext.currentTime + 0.1);\n  };\n\n  const scheduleNote = () => {\n    if (!audioContext) return;\n\n    const secondsPerBeat = 60.0 / bpm[0];\n    const beatsPerMeasure = parseInt(timeSignature.split('/')[0]);\n\n    while (nextNoteTime < audioContext.currentTime + 0.1) {\n      const isAccent = currentBeat === 0;\n      playClick(isAccent);\n      \n      setCurrentBeat((prev) => (prev + 1) % beatsPerMeasure);\n      setNextNoteTime(nextNoteTime + secondsPerBeat);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying && audioContext) {\n      const timer = setInterval(scheduleNote, 25);\n      return () => clearInterval(timer);\n    }\n  }, [isPlaying, audioContext, nextNoteTime, currentBeat, bpm, timeSignature]);\n\n  const toggleMetronome = () => {\n    setIsPlaying(!isPlaying);\n    if (!isPlaying) {\n      setCurrentBeat(0);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Link href=\"/tools\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Tools\n                </Button>\n              </Link>\n              <Badge variant=\"secondary\">Practice Essential</Badge>\n            </div>\n            <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-3\">\n              <div className=\"p-3 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n                <Music className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n              </div>\n              Professional Metronome\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Keep perfect time with our advanced metronome featuring customizable beats and accent patterns\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Metronome Control */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"p-8\">\n                <div className=\"text-center mb-8\">\n                  {/* BPM Display */}\n                  <div className=\"bg-muted/30 rounded-2xl p-8 mb-6\">\n                    <div className=\"text-6xl font-bold text-blue-600 dark:text-blue-400 mb-2\">\n                      {bpm[0]}\n                    </div>\n                    <div className=\"text-lg text-muted-foreground\">BPM • {timeSignature}</div>\n                    \n                    {/* Beat Indicator */}\n                    <div className=\"flex justify-center gap-2 mt-4\">\n                      {Array.from({ length: parseInt(timeSignature.split('/')[0]) }).map((_, i) => (\n                        <div\n                          key={i}\n                          className={`w-4 h-4 rounded-full transition-all duration-100 ${\n                            isPlaying && currentBeat === i\n                              ? 'bg-blue-600 scale-125'\n                              : 'bg-muted-foreground/30'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Play/Pause Button */}\n                  <Button\n                    size=\"lg\"\n                    onClick={toggleMetronome}\n                    className=\"w-20 h-20 rounded-full text-2xl\"\n                  >\n                    {isPlaying ? <Pause className=\"h-8 w-8\" /> : <Play className=\"h-8 w-8\" />}\n                  </Button>\n                </div>\n\n                {/* BPM Control */}\n                <div className=\"space-y-6\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-3 block\">Tempo (BPM)</label>\n                    <Slider\n                      value={bpm}\n                      onValueChange={setBpm}\n                      max={200}\n                      min={40}\n                      step={1}\n                      className=\"mb-4\"\n                    />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                      <span>40</span>\n                      <span>120</span>\n                      <span>200</span>\n                    </div>\n                  </div>\n\n                  {/* Quick BPM Buttons */}\n                  <div className=\"grid grid-cols-4 gap-2\">\n                    {[60, 80, 100, 120, 140, 160, 180, 200].map((tempo) => (\n                      <Button\n                        key={tempo}\n                        variant={bpm[0] === tempo ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => setBpm([tempo])}\n                      >\n                        {tempo}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            {/* Settings Panel */}\n            <div className=\"space-y-6\">\n              {/* Time Signature */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Settings className=\"h-5 w-5\" />\n                    Settings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Time Signature</label>\n                    <Select value={timeSignature} onValueChange={setTimeSignature}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"2/4\">2/4</SelectItem>\n                        <SelectItem value=\"3/4\">3/4</SelectItem>\n                        <SelectItem value=\"4/4\">4/4</SelectItem>\n                        <SelectItem value=\"5/4\">5/4</SelectItem>\n                        <SelectItem value=\"6/8\">6/8</SelectItem>\n                        <SelectItem value=\"7/8\">7/8</SelectItem>\n                        <SelectItem value=\"9/8\">9/8</SelectItem>\n                        <SelectItem value=\"12/8\">12/8</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Accent Pattern</label>\n                    <Select value={accentPattern} onValueChange={setAccentPattern}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"strong-weak\">Strong-Weak</SelectItem>\n                        <SelectItem value=\"all-strong\">All Strong</SelectItem>\n                        <SelectItem value=\"no-accent\">No Accent</SelectItem>\n                        <SelectItem value=\"custom\">Custom</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-3 block\">Volume</label>\n                    <Slider\n                      value={volume}\n                      onValueChange={setVolume}\n                      max={100}\n                      min={0}\n                      step={5}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Tempo Markings Reference */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Tempo Guide</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Largo</span>\n                    <span>40-60 BPM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Adagio</span>\n                    <span>66-76 BPM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Andante</span>\n                    <span>76-108 BPM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Moderato</span>\n                    <span>108-120 BPM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Allegro</span>\n                    <span>120-168 BPM</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Presto</span>\n                    <span>168-200 BPM</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11795},"client/src/pages/tools/PracticePlannerPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Target, ArrowLeft, Plus, Clock, Play, Pause, CheckCircle, Circle } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { getCurrentUser, isAuthenticated } from \"@/lib/auth\";\n\nexport default function PracticePlannerPage() {\n  const [currentUser] = useState(getCurrentUser());\n  const [, setLocation] = useLocation();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      setLocation('/');\n    }\n  }, [setLocation]);\n\n  const [sessionGoal, setSessionGoal] = useState(\"\");\n  const [sessionDuration, setSessionDuration] = useState(\"30\");\n  const [isSessionActive, setIsSessionActive] = useState(false);\n  const [timeRemaining, setTimeRemaining] = useState(30 * 60);\n  const [currentActivity, setCurrentActivity] = useState(0);\n\n  const [practiceActivities, setPracticeActivities] = useState([\n    {\n      id: 1,\n      name: \"Warm-up Scales\",\n      duration: 8,\n      category: \"technique\",\n      completed: false,\n      notes: \"Focus on evenness and tempo\"\n    },\n    {\n      id: 2,\n      name: \"Song Practice: Moonlight Sonata\",\n      duration: 15,\n      category: \"repertoire\",\n      completed: false,\n      notes: \"Work on measures 20-35, slow practice\"\n    },\n    {\n      id: 3,\n      name: \"Sight Reading\",\n      duration: 5,\n      category: \"reading\",\n      completed: false,\n      notes: \"Bach Chorales, Book 1\"\n    },\n    {\n      id: 4,\n      name: \"Cool Down\",\n      duration: 2,\n      category: \"other\",\n      completed: false,\n      notes: \"Light stretching and reflection\"\n    }\n  ]);\n\n  const totalPlannedTime = practiceActivities.reduce((sum, activity) => sum + activity.duration, 0);\n  const completedActivities = practiceActivities.filter(a => a.completed).length;\n  const sessionProgress = (completedActivities / practiceActivities.length) * 100;\n\n  const toggleSession = () => {\n    setIsSessionActive(!isSessionActive);\n    if (!isSessionActive) {\n      setTimeRemaining(parseInt(sessionDuration) * 60);\n    }\n  };\n\n  const toggleActivityComplete = (activityId: number) => {\n    setPracticeActivities(prev =>\n      prev.map(activity =>\n        activity.id === activityId\n          ? { ...activity, completed: !activity.completed }\n          : activity\n      )\n    );\n  };\n\n  const addActivity = () => {\n    const newActivity = {\n      id: Date.now(),\n      name: \"New Activity\",\n      duration: 5,\n      category: \"other\",\n      completed: false,\n      notes: \"\"\n    };\n    setPracticeActivities(prev => [...prev, newActivity]);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const practiceStats = {\n    weeklyGoal: 150,\n    weeklyCompleted: 98,\n    sessionsThisWeek: 5,\n    averageSessionLength: 28\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Link href=\"/tools\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Tools\n                </Button>\n              </Link>\n              <Badge variant=\"secondary\">Organization</Badge>\n            </div>\n            <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-3\">\n              <div className=\"p-3 bg-red-100 dark:bg-red-900 rounded-lg\">\n                <Target className=\"h-8 w-8 text-red-600 dark:text-red-400\" />\n              </div>\n              Practice Planner\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Organize effective practice sessions with goals, timing, and progress tracking\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Session Area */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Session Timer & Control */}\n              <Card className=\"p-8\">\n                <div className=\"text-center mb-6\">\n                  {/* Session Timer */}\n                  <div className=\"bg-muted/30 rounded-2xl p-6 mb-6\">\n                    <div className=\"text-5xl font-bold text-red-600 dark:text-red-400 mb-2\">\n                      {formatTime(timeRemaining)}\n                    </div>\n                    <div className=\"text-lg text-muted-foreground mb-4\">\n                      {isSessionActive ? 'Practice Session Active' : 'Ready to Start'}\n                    </div>\n                    \n                    {/* Progress Circle */}\n                    <div className=\"relative w-32 h-32 mx-auto mb-4\">\n                      <svg className=\"w-32 h-32 transform -rotate-90\">\n                        <circle\n                          cx=\"64\"\n                          cy=\"64\"\n                          r=\"56\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"8\"\n                          fill=\"transparent\"\n                          className=\"text-muted-foreground/30\"\n                        />\n                        <circle\n                          cx=\"64\"\n                          cy=\"64\"\n                          r=\"56\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"8\"\n                          fill=\"transparent\"\n                          strokeDasharray={`${2 * Math.PI * 56}`}\n                          strokeDashoffset={`${2 * Math.PI * 56 * (1 - sessionProgress / 100)}`}\n                          className=\"text-red-600 dark:text-red-400 transition-all duration-300\"\n                        />\n                      </svg>\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <span className=\"text-sm font-semibold\">{Math.round(sessionProgress)}%</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Control Buttons */}\n                  <div className=\"flex justify-center gap-4\">\n                    <Button\n                      size=\"lg\"\n                      onClick={toggleSession}\n                      className=\"w-24 h-16\"\n                    >\n                      {isSessionActive ? <Pause className=\"h-6 w-6\" /> : <Play className=\"h-6 w-6\" />}\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Session Goal */}\n                <div className=\"mb-6\">\n                  <label className=\"text-sm font-medium mb-2 block\">Today's Practice Goal</label>\n                  <Input\n                    value={sessionGoal}\n                    onChange={(e) => setSessionGoal(e.target.value)}\n                    placeholder=\"What do you want to accomplish today?\"\n                    className=\"text-center\"\n                  />\n                </div>\n              </Card>\n\n              {/* Practice Activities */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">Practice Activities</CardTitle>\n                    <Button variant=\"outline\" size=\"sm\" onClick={addActivity} className=\"gap-2\">\n                      <Plus className=\"h-4 w-4\" />\n                      Add Activity\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-3\">\n                  {practiceActivities.map((activity, index) => (\n                    <div \n                      key={activity.id} \n                      className={`p-4 border rounded-lg transition-all ${\n                        activity.completed ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800' :\n                        isSessionActive && currentActivity === index ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800' :\n                        'bg-muted/30'\n                      }`}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => toggleActivityComplete(activity.id)}\n                          className=\"p-1 h-6 w-6\"\n                        >\n                          {activity.completed ? \n                            <CheckCircle className=\"h-4 w-4 text-green-600\" /> : \n                            <Circle className=\"h-4 w-4\" />\n                          }\n                        </Button>\n                        \n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className={`font-medium ${activity.completed ? 'line-through text-muted-foreground' : ''}`}>\n                              {activity.name}\n                            </h4>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {activity.category}\n                              </Badge>\n                              <span className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                                <Clock className=\"h-3 w-3\" />\n                                {activity.duration}min\n                              </span>\n                            </div>\n                          </div>\n                          {activity.notes && (\n                            <p className=\"text-sm text-muted-foreground\">{activity.notes}</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  <div className=\"flex justify-between items-center pt-4 border-t text-sm\">\n                    <span className=\"text-muted-foreground\">Total planned time:</span>\n                    <span className=\"font-medium\">{totalPlannedTime} minutes</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Settings & Stats */}\n            <div className=\"space-y-6\">\n              {/* Session Settings */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Session Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Session Duration</label>\n                    <Select value={sessionDuration} onValueChange={setSessionDuration}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"15\">15 minutes</SelectItem>\n                        <SelectItem value=\"30\">30 minutes</SelectItem>\n                        <SelectItem value=\"45\">45 minutes</SelectItem>\n                        <SelectItem value=\"60\">1 hour</SelectItem>\n                        <SelectItem value=\"90\">1.5 hours</SelectItem>\n                        <SelectItem value=\"120\">2 hours</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Weekly Progress */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Weekly Progress</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm\">Practice Time</span>\n                      <span className=\"text-sm font-medium\">\n                        {practiceStats.weeklyCompleted}/{practiceStats.weeklyGoal} min\n                      </span>\n                    </div>\n                    <Progress value={(practiceStats.weeklyCompleted / practiceStats.weeklyGoal) * 100} />\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-center\">\n                    <div className=\"p-3 bg-muted/30 rounded-lg\">\n                      <div className=\"text-lg font-bold text-blue-600\">{practiceStats.sessionsThisWeek}</div>\n                      <div className=\"text-xs text-muted-foreground\">Sessions</div>\n                    </div>\n                    <div className=\"p-3 bg-muted/30 rounded-lg\">\n                      <div className=\"text-lg font-bold text-green-600\">{practiceStats.averageSessionLength}min</div>\n                      <div className=\"text-xs text-muted-foreground\">Avg Length</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Practice Templates */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Quick Templates</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-2\">\n                  <Button variant=\"outline\" className=\"w-full justify-start text-sm\">\n                    🎹 Piano Practice (30min)\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start text-sm\">\n                    🎸 Guitar Technique (45min)\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start text-sm\">\n                    🎵 Music Theory Study (20min)\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start text-sm\">\n                    📖 Sight Reading (15min)\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Practice Tips */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Practice Tips</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-3 text-sm\">\n                  <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <strong>Warm Up:</strong> Always start with scales or technical exercises\n                  </div>\n                  <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <strong>Slow Practice:</strong> Focus on accuracy before speed\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                    <strong>Break Time:</strong> Take 5-10 minute breaks every 30 minutes\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16029},"client/src/pages/tools/ProgressAnalyticsPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { TrendingUp, ArrowLeft, Calendar, Award, Target, Clock, BarChart3 } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { getCurrentUser, isAuthenticated } from \"@/lib/auth\";\n\nexport default function ProgressAnalyticsPage() {\n  const [currentUser] = useState(getCurrentUser());\n  const [, setLocation] = useLocation();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      setLocation('/');\n    }\n  }, [setLocation]);\n\n  const [timeRange, setTimeRange] = useState(\"week\");\n  const [selectedMetric, setSelectedMetric] = useState(\"practice-time\");\n\n  const analyticsData = {\n    week: {\n      practiceTime: 180,\n      sessionsCompleted: 8,\n      averageSessionLength: 22.5,\n      goalCompletion: 85,\n      improvement: 12\n    },\n    month: {\n      practiceTime: 720,\n      sessionsCompleted: 28,\n      averageSessionLength: 25.7,\n      goalCompletion: 78,\n      improvement: 24\n    },\n    year: {\n      practiceTime: 8640,\n      sessionsCompleted: 312,\n      averageSessionLength: 27.7,\n      goalCompletion: 82,\n      improvement: 156\n    }\n  };\n\n  const currentData = analyticsData[timeRange as keyof typeof analyticsData];\n\n  const skillProgress = [\n    { skill: \"Scales & Arpeggios\", current: 85, previous: 78, category: \"Technique\" },\n    { skill: \"Sight Reading\", current: 72, previous: 65, category: \"Reading\" },\n    { skill: \"Rhythm Recognition\", current: 90, previous: 88, category: \"Theory\" },\n    { skill: \"Chord Progressions\", current: 68, previous: 58, category: \"Theory\" },\n    { skill: \"Improvisation\", current: 55, previous: 45, category: \"Creative\" },\n    { skill: \"Performance\", current: 75, previous: 70, category: \"Expression\" }\n  ];\n\n  const practiceHistory = [\n    { date: \"Mon\", minutes: 35, sessions: 2, focus: \"Scales\" },\n    { date: \"Tue\", minutes: 45, sessions: 2, focus: \"Repertoire\" },\n    { date: \"Wed\", minutes: 20, sessions: 1, focus: \"Theory\" },\n    { date: \"Thu\", minutes: 40, sessions: 2, focus: \"Technique\" },\n    { date: \"Fri\", minutes: 25, sessions: 1, focus: \"Sight Reading\" },\n    { date: \"Sat\", minutes: 60, sessions: 3, focus: \"Performance\" },\n    { date: \"Sun\", minutes: 30, sessions: 1, focus: \"Review\" }\n  ];\n\n  const achievements = [\n    { \n      name: \"Practice Streak\", \n      description: \"7 days consecutive practice\", \n      earned: true, \n      date: \"2024-01-15\",\n      icon: \"🔥\"\n    },\n    { \n      name: \"Scale Master\", \n      description: \"Completed all major scales\", \n      earned: true, \n      date: \"2024-01-10\",\n      icon: \"🎵\"\n    },\n    { \n      name: \"Theory Scholar\", \n      description: \"100% on music theory quiz\", \n      earned: false, \n      progress: 75,\n      icon: \"📚\"\n    },\n    { \n      name: \"Rhythm Expert\", \n      description: \"Master complex rhythms\", \n      earned: false, \n      progress: 45,\n      icon: \"🥁\"\n    }\n  ];\n\n  const getSkillTrend = (current: number, previous: number) => {\n    const change = current - previous;\n    return {\n      direction: change > 0 ? 'up' : change < 0 ? 'down' : 'stable',\n      value: Math.abs(change),\n      color: change > 0 ? 'text-green-600' : change < 0 ? 'text-red-600' : 'text-muted-foreground'\n    };\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Link href=\"/tools\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Tools\n                </Button>\n              </Link>\n              <Badge variant=\"secondary\">Analytics</Badge>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-3\">\n                  <div className=\"p-3 bg-indigo-100 dark:bg-indigo-900 rounded-lg\">\n                    <TrendingUp className=\"h-8 w-8 text-indigo-600 dark:text-indigo-400\" />\n                  </div>\n                  Progress Analytics\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Track your musical growth with detailed performance metrics and insights\n                </p>\n              </div>\n              <div className=\"flex gap-4\">\n                <Select value={timeRange} onValueChange={setTimeRange}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                    <SelectItem value=\"year\">This Year</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Overview Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n            <Card className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Clock className=\"h-8 w-8 text-blue-500\" />\n              </div>\n              <div className=\"text-3xl font-bold text-blue-600\">{currentData.practiceTime}</div>\n              <div className=\"text-sm text-muted-foreground\">Minutes Practiced</div>\n              <div className=\"text-xs text-green-600 mt-1\">+{currentData.improvement}% vs last {timeRange}</div>\n            </Card>\n\n            <Card className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Target className=\"h-8 w-8 text-green-500\" />\n              </div>\n              <div className=\"text-3xl font-bold text-green-600\">{currentData.sessionsCompleted}</div>\n              <div className=\"text-sm text-muted-foreground\">Sessions</div>\n              <div className=\"text-xs text-green-600 mt-1\">On track</div>\n            </Card>\n\n            <Card className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <BarChart3 className=\"h-8 w-8 text-purple-500\" />\n              </div>\n              <div className=\"text-3xl font-bold text-purple-600\">{currentData.averageSessionLength}</div>\n              <div className=\"text-sm text-muted-foreground\">Avg Session (min)</div>\n              <div className=\"text-xs text-green-600 mt-1\">+2.3 min</div>\n            </Card>\n\n            <Card className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <Award className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n              <div className=\"text-3xl font-bold text-yellow-600\">{currentData.goalCompletion}%</div>\n              <div className=\"text-sm text-muted-foreground\">Goal Completion</div>\n              <div className=\"text-xs text-green-600 mt-1\">Excellent!</div>\n            </Card>\n\n            <Card className=\"p-6 text-center\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <TrendingUp className=\"h-8 w-8 text-indigo-500\" />\n              </div>\n              <div className=\"text-3xl font-bold text-indigo-600\">A+</div>\n              <div className=\"text-sm text-muted-foreground\">Overall Grade</div>\n              <div className=\"text-xs text-green-600 mt-1\">Keep it up!</div>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Skill Progress */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-6\">\n                  <CardTitle className=\"text-xl\">Skill Development</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-4\">\n                  {skillProgress.map((skill) => {\n                    const trend = getSkillTrend(skill.current, skill.previous);\n                    return (\n                      <div key={skill.skill} className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <span className=\"font-medium\">{skill.skill}</span>\n                            <Badge variant=\"outline\" className=\"ml-2 text-xs\">{skill.category}</Badge>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-sm font-semibold\">{skill.current}%</span>\n                            <span className={`text-xs ${trend.color}`}>\n                              {trend.direction === 'up' && '↗'}\n                              {trend.direction === 'down' && '↘'}\n                              {trend.direction === 'stable' && '→'}\n                              {trend.value > 0 && trend.value}\n                            </span>\n                          </div>\n                        </div>\n                        <Progress value={skill.current} className=\"h-2\" />\n                      </div>\n                    );\n                  })}\n                </CardContent>\n              </Card>\n\n              {/* Practice History Chart */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-6\">\n                  <CardTitle className=\"text-xl\">Weekly Practice Overview</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <div className=\"space-y-4\">\n                    {practiceHistory.map((day) => (\n                      <div key={day.date} className=\"flex items-center gap-4\">\n                        <div className=\"w-12 text-sm font-medium text-center\">{day.date}</div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <span className=\"text-sm\">{day.focus}</span>\n                            <span className=\"text-sm text-muted-foreground\">{day.minutes}min</span>\n                          </div>\n                          <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                            <div \n                              className=\"h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full transition-all duration-300\"\n                              style={{ width: `${(day.minutes / 60) * 100}%` }}\n                            />\n                          </div>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">{day.sessions}</Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Achievements & Goals */}\n            <div className=\"space-y-6\">\n              {/* Achievements */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Award className=\"h-5 w-5\" />\n                    Achievements\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-3\">\n                  {achievements.map((achievement) => (\n                    <div \n                      key={achievement.name}\n                      className={`p-3 rounded-lg border ${\n                        achievement.earned ? \n                        'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800' :\n                        'bg-muted/30'\n                      }`}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <span className=\"text-2xl\">{achievement.icon}</span>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-sm\">{achievement.name}</h4>\n                          <p className=\"text-xs text-muted-foreground mb-2\">{achievement.description}</p>\n                          {achievement.earned ? (\n                            <Badge variant=\"default\" className=\"text-xs\">\n                              Earned {achievement.date}\n                            </Badge>\n                          ) : (\n                            <div className=\"space-y-1\">\n                              <Progress value={achievement.progress} className=\"h-1\" />\n                              <span className=\"text-xs text-muted-foreground\">{achievement.progress}% complete</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              {/* Current Goals */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Target className=\"h-5 w-5\" />\n                    Current Goals\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-4\">\n                  <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"font-medium text-sm\">Practice 150 min/week</span>\n                      <span className=\"text-sm\">{currentData.practiceTime}/150</span>\n                    </div>\n                    <Progress value={(currentData.practiceTime / 150) * 100} className=\"h-2\" />\n                  </div>\n                  \n                  <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"font-medium text-sm\">Complete Scale Training</span>\n                      <span className=\"text-sm\">8/12</span>\n                    </div>\n                    <Progress value={67} className=\"h-2\" />\n                  </div>\n                  \n                  <div className=\"p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"font-medium text-sm\">Master 3 New Songs</span>\n                      <span className=\"text-sm\">1/3</span>\n                    </div>\n                    <Progress value={33} className=\"h-2\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Insights */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Insights</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-3 text-sm\">\n                  <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <strong>🎯 Great consistency!</strong> You've maintained a steady practice schedule this week.\n                  </div>\n                  <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <strong>📈 Improving fast!</strong> Your rhythm recognition skills have improved significantly.\n                  </div>\n                  <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                    <strong>💡 Focus area:</strong> Consider more sight reading practice to balance your skills.\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16544},"client/src/pages/tools/RhythmTrainerPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Zap, ArrowLeft, Play, Pause, RotateCcw, Target, Volume2 } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { getCurrentUser, isAuthenticated } from \"@/lib/auth\";\n\nexport default function RhythmTrainerPage() {\n  const [currentUser] = useState(getCurrentUser());\n  const [, setLocation] = useLocation();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      setLocation('/');\n    }\n  }, [setLocation]);\n\n  const [selectedPattern, setSelectedPattern] = useState(\"basic-4-4\");\n  const [difficulty, setDifficulty] = useState(\"beginner\");\n  const [tempo, setTempo] = useState(\"100\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentBeat, setCurrentBeat] = useState(0);\n  const [exerciseMode, setExerciseMode] = useState(\"listen\");\n  const [userTaps, setUserTaps] = useState<number[]>([]);\n  const [score, setScore] = useState(0);\n\n  const rhythmPatterns = {\n    \"basic-4-4\": {\n      name: \"Basic 4/4\",\n      pattern: [1, 0, 1, 0, 1, 0, 1, 0],\n      timeSignature: \"4/4\",\n      description: \"Quarter notes on the beat\"\n    },\n    \"syncopated\": {\n      name: \"Syncopated\",\n      pattern: [1, 0, 0, 1, 0, 1, 0, 0],\n      timeSignature: \"4/4\", \n      description: \"Off-beat emphasis\"\n    },\n    \"triplets\": {\n      name: \"Triplets\",\n      pattern: [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],\n      timeSignature: \"4/4\",\n      description: \"Eighth note triplets\"\n    },\n    \"dotted\": {\n      name: \"Dotted Rhythms\",\n      pattern: [1, 0, 0, 1, 0, 1, 0, 0],\n      timeSignature: \"4/4\",\n      description: \"Dotted quarter and eighth notes\"\n    },\n    \"complex\": {\n      name: \"Complex Pattern\",\n      pattern: [1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0],\n      timeSignature: \"4/4\",\n      description: \"Mixed note values\"\n    }\n  };\n\n  const currentPattern = rhythmPatterns[selectedPattern as keyof typeof rhythmPatterns];\n\n  const togglePlayback = () => {\n    setIsPlaying(!isPlaying);\n    if (!isPlaying) {\n      setCurrentBeat(0);\n      setUserTaps([]);\n    }\n  };\n\n  const resetExercise = () => {\n    setIsPlaying(false);\n    setCurrentBeat(0);\n    setUserTaps([]);\n    setScore(0);\n  };\n\n  const handleTap = () => {\n    if (exerciseMode === \"tap\") {\n      const tapTime = Date.now();\n      setUserTaps(prev => [...prev, tapTime]);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      const interval = setInterval(() => {\n        setCurrentBeat(prev => (prev + 1) % currentPattern.pattern.length);\n      }, (60 / parseInt(tempo)) * 1000 / (currentPattern.pattern.length / 4));\n\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, tempo, currentPattern]);\n\n  const exerciseStats = {\n    accuracy: 87,\n    patternsCompleted: 23,\n    practiceTime: \"18 min\",\n    bestStreak: 12\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Link href=\"/tools\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Tools\n                </Button>\n              </Link>\n              <Badge variant=\"secondary\">Theory & Training</Badge>\n            </div>\n            <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-3\">\n              <div className=\"p-3 bg-yellow-100 dark:bg-yellow-900 rounded-lg\">\n                <Zap className=\"h-8 w-8 text-yellow-600 dark:text-yellow-400\" />\n              </div>\n              Rhythm Trainer\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Develop your rhythmic skills with pattern recognition and tap exercises\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Rhythm Display */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Rhythm Pattern Visualizer */}\n              <Card className=\"p-8\">\n                <div className=\"text-center mb-6\">\n                  <h2 className=\"text-2xl font-bold mb-2\">{currentPattern.name}</h2>\n                  <div className=\"flex justify-center gap-2 mb-4\">\n                    <Badge variant=\"outline\">{currentPattern.timeSignature}</Badge>\n                    <Badge variant=\"outline\">{tempo} BPM</Badge>\n                  </div>\n                  <p className=\"text-muted-foreground mb-6\">{currentPattern.description}</p>\n                  \n                  {/* Rhythm Visual */}\n                  <div className=\"bg-muted/30 rounded-2xl p-6 mb-6\">\n                    <div className=\"flex justify-center gap-2 flex-wrap mb-4\">\n                      {currentPattern.pattern.map((beat, index) => (\n                        <div\n                          key={index}\n                          className={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-200 ${\n                            isPlaying && currentBeat === index\n                              ? 'bg-yellow-600 text-white scale-110 shadow-lg'\n                              : beat === 1\n                              ? 'bg-yellow-100 dark:bg-yellow-900/50 text-yellow-600 dark:text-yellow-400 border-2 border-yellow-300'\n                              : 'bg-muted border-2 border-muted-foreground/20'\n                          }`}\n                        >\n                          {beat === 1 && (\n                            <div className={`w-3 h-3 rounded-full ${\n                              isPlaying && currentBeat === index ? 'bg-white' : 'bg-yellow-600 dark:bg-yellow-400'\n                            }`} />\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                    \n                    {/* Beat Counter */}\n                    <div className=\"text-sm text-muted-foreground mb-4\">\n                      Beat {Math.floor(currentBeat / (currentPattern.pattern.length / 4)) + 1} of 4\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    <Progress \n                      value={(currentBeat / currentPattern.pattern.length) * 100} \n                      className=\"h-2\"\n                    />\n                  </div>\n\n                  {/* Control Buttons */}\n                  <div className=\"flex justify-center gap-4 mb-6\">\n                    <Button\n                      size=\"lg\"\n                      onClick={togglePlayback}\n                      className=\"w-20 h-20 rounded-full\"\n                    >\n                      {isPlaying ? <Pause className=\"h-8 w-8\" /> : <Play className=\"h-8 w-8\" />}\n                    </Button>\n                    <Button\n                      size=\"lg\"\n                      variant=\"outline\"\n                      onClick={resetExercise}\n                      className=\"w-20 h-20 rounded-full\"\n                    >\n                      <RotateCcw className=\"h-6 w-6\" />\n                    </Button>\n                  </div>\n\n                  {/* Tap Area (for tap exercises) */}\n                  {exerciseMode === \"tap\" && (\n                    <div className=\"mt-6\">\n                      <Button\n                        size=\"lg\"\n                        variant=\"outline\"\n                        className=\"w-full h-24 text-xl\"\n                        onClick={handleTap}\n                        disabled={!isPlaying}\n                      >\n                        TAP HERE\n                      </Button>\n                      <p className=\"text-sm text-muted-foreground mt-2\">\n                        Tap along with the rhythm pattern\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </Card>\n\n              {/* Exercise Stats */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Session Progress</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">{exerciseStats.accuracy}%</div>\n                      <div className=\"text-xs text-muted-foreground\">Accuracy</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{exerciseStats.patternsCompleted}</div>\n                      <div className=\"text-xs text-muted-foreground\">Patterns Done</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-purple-600\">{exerciseStats.practiceTime}</div>\n                      <div className=\"text-xs text-muted-foreground\">Practice Time</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-orange-600\">{exerciseStats.bestStreak}</div>\n                      <div className=\"text-xs text-muted-foreground\">Best Streak</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Settings & Pattern Library */}\n            <div className=\"space-y-6\">\n              {/* Exercise Settings */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Exercise Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Pattern</label>\n                    <Select value={selectedPattern} onValueChange={setSelectedPattern}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"basic-4-4\">Basic 4/4</SelectItem>\n                        <SelectItem value=\"syncopated\">Syncopated</SelectItem>\n                        <SelectItem value=\"triplets\">Triplets</SelectItem>\n                        <SelectItem value=\"dotted\">Dotted Rhythms</SelectItem>\n                        <SelectItem value=\"complex\">Complex Pattern</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Exercise Mode</label>\n                    <Select value={exerciseMode} onValueChange={setExerciseMode}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"listen\">Listen Mode</SelectItem>\n                        <SelectItem value=\"tap\">Tap Along</SelectItem>\n                        <SelectItem value=\"quiz\">Rhythm Quiz</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Difficulty</label>\n                    <Select value={difficulty} onValueChange={setDifficulty}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"beginner\">Beginner</SelectItem>\n                        <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                        <SelectItem value=\"advanced\">Advanced</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Tempo (BPM)</label>\n                    <Select value={tempo} onValueChange={setTempo}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"60\">60 BPM (Very Slow)</SelectItem>\n                        <SelectItem value=\"80\">80 BPM (Slow)</SelectItem>\n                        <SelectItem value=\"100\">100 BPM (Medium)</SelectItem>\n                        <SelectItem value=\"120\">120 BPM (Moderate)</SelectItem>\n                        <SelectItem value=\"140\">140 BPM (Fast)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card className=\"p-6\">\n                <CardContent className=\"p-0 space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full gap-2\">\n                    <Volume2 className=\"h-4 w-4\" />\n                    Play Pattern\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full gap-2\">\n                    <Target className=\"h-4 w-4\" />\n                    Random Pattern\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full gap-2\">\n                    <Zap className=\"h-4 w-4\" />\n                    Challenge Mode\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Pattern Info */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Pattern Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-3 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Name:</span> {currentPattern.name}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Time Signature:</span> {currentPattern.timeSignature}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Beats:</span> {currentPattern.pattern.filter(b => b === 1).length}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Total Length:</span> {currentPattern.pattern.length} subdivisions\n                  </div>\n                  <div className=\"pt-2\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {difficulty} level\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15663},"client/src/pages/tools/ScaleTrainerPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Music2, ArrowLeft, Play, Pause, Volume2, RotateCcw, Target } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { getCurrentUser, isAuthenticated } from \"@/lib/auth\";\n\nexport default function ScaleTrainerPage() {\n  const [currentUser] = useState(getCurrentUser());\n  const [, setLocation] = useLocation();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      setLocation('/');\n    }\n  }, [setLocation]);\n\n  const [selectedScale, setSelectedScale] = useState(\"C-major\");\n  const [scaleMode, setScaleMode] = useState(\"ascending\");\n  const [tempo, setTempo] = useState(\"120\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentNote, setCurrentNote] = useState(0);\n  const [exerciseType, setExerciseType] = useState(\"practice\");\n\n  const scales = {\n    \"C-major\": { name: \"C Major\", notes: [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\", \"C\"], mode: \"Ionian\" },\n    \"C-minor\": { name: \"C Minor\", notes: [\"C\", \"D\", \"Eb\", \"F\", \"G\", \"Ab\", \"Bb\", \"C\"], mode: \"Natural Minor\" },\n    \"C-pentatonic\": { name: \"C Pentatonic\", notes: [\"C\", \"D\", \"E\", \"G\", \"A\", \"C\"], mode: \"Pentatonic\" },\n    \"C-blues\": { name: \"C Blues\", notes: [\"C\", \"Eb\", \"F\", \"Gb\", \"G\", \"Bb\", \"C\"], mode: \"Blues\" },\n    \"G-major\": { name: \"G Major\", notes: [\"G\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F#\", \"G\"], mode: \"Ionian\" },\n    \"D-dorian\": { name: \"D Dorian\", notes: [\"D\", \"E\", \"F\", \"G\", \"A\", \"B\", \"C\", \"D\"], mode: \"Dorian\" },\n    \"E-phrygian\": { name: \"E Phrygian\", notes: [\"E\", \"F\", \"G\", \"A\", \"B\", \"C\", \"D\", \"E\"], mode: \"Phrygian\" },\n    \"F-lydian\": { name: \"F Lydian\", notes: [\"F\", \"G\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"], mode: \"Lydian\" },\n    \"A-mixolydian\": { name: \"A Mixolydian\", notes: [\"A\", \"B\", \"C#\", \"D\", \"E\", \"F#\", \"G\", \"A\"], mode: \"Mixolydian\" }\n  };\n\n  const currentScale = scales[selectedScale as keyof typeof scales];\n  const displayNotes = scaleMode === \"descending\" ? [...currentScale.notes].reverse() : currentScale.notes;\n\n  const togglePlayback = () => {\n    setIsPlaying(!isPlaying);\n    if (!isPlaying) {\n      setCurrentNote(0);\n    }\n  };\n\n  const resetExercise = () => {\n    setIsPlaying(false);\n    setCurrentNote(0);\n  };\n\n  const exerciseStats = {\n    accuracy: 92,\n    completedScales: 15,\n    practiceTime: \"12 min\",\n    streak: 5\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Link href=\"/tools\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Tools\n                </Button>\n              </Link>\n              <Badge variant=\"secondary\">Theory & Training</Badge>\n            </div>\n            <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-3\">\n              <div className=\"p-3 bg-purple-100 dark:bg-purple-900 rounded-lg\">\n                <Music2 className=\"h-8 w-8 text-purple-600 dark:text-purple-400\" />\n              </div>\n              Scale Trainer\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Master scales and modes with interactive exercises and audio playback\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Scale Display */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Current Scale */}\n              <Card className=\"p-8\">\n                <div className=\"text-center mb-6\">\n                  <h2 className=\"text-3xl font-bold mb-2\">{currentScale.name}</h2>\n                  <Badge variant=\"outline\" className=\"mb-4\">{currentScale.mode}</Badge>\n                  \n                  {/* Scale Notes Visual */}\n                  <div className=\"bg-muted/30 rounded-2xl p-6 mb-6\">\n                    <div className=\"flex justify-center gap-3 flex-wrap\">\n                      {displayNotes.map((note, index) => (\n                        <div\n                          key={index}\n                          className={`w-16 h-16 rounded-full flex items-center justify-center text-lg font-bold transition-all duration-300 ${\n                            isPlaying && currentNote === index\n                              ? 'bg-purple-600 text-white scale-110 shadow-lg'\n                              : index === 0 || index === displayNotes.length - 1\n                              ? 'bg-purple-100 dark:bg-purple-900/50 text-purple-600 dark:text-purple-400'\n                              : 'bg-muted border-2 border-muted-foreground/30'\n                          }`}\n                        >\n                          {note}\n                        </div>\n                      ))}\n                    </div>\n                    \n                    {/* Progress Bar */}\n                    {isPlaying && (\n                      <div className=\"mt-4\">\n                        <Progress \n                          value={(currentNote / (displayNotes.length - 1)) * 100} \n                          className=\"h-2\"\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Control Buttons */}\n                  <div className=\"flex justify-center gap-4\">\n                    <Button\n                      size=\"lg\"\n                      onClick={togglePlayback}\n                      className=\"w-20 h-20 rounded-full\"\n                    >\n                      {isPlaying ? <Pause className=\"h-8 w-8\" /> : <Play className=\"h-8 w-8\" />}\n                    </Button>\n                    <Button\n                      size=\"lg\"\n                      variant=\"outline\"\n                      onClick={resetExercise}\n                      className=\"w-20 h-20 rounded-full\"\n                    >\n                      <RotateCcw className=\"h-6 w-6\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n\n              {/* Exercise Stats */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Today's Progress</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0\">\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-green-600\">{exerciseStats.accuracy}%</div>\n                      <div className=\"text-xs text-muted-foreground\">Accuracy</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{exerciseStats.completedScales}</div>\n                      <div className=\"text-xs text-muted-foreground\">Scales Practiced</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-purple-600\">{exerciseStats.practiceTime}</div>\n                      <div className=\"text-xs text-muted-foreground\">Practice Time</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-orange-600\">{exerciseStats.streak}</div>\n                      <div className=\"text-xs text-muted-foreground\">Day Streak</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Settings & Scale Library */}\n            <div className=\"space-y-6\">\n              {/* Exercise Settings */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Exercise Settings</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Scale</label>\n                    <Select value={selectedScale} onValueChange={setSelectedScale}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"C-major\">C Major</SelectItem>\n                        <SelectItem value=\"C-minor\">C Minor</SelectItem>\n                        <SelectItem value=\"C-pentatonic\">C Pentatonic</SelectItem>\n                        <SelectItem value=\"C-blues\">C Blues</SelectItem>\n                        <SelectItem value=\"G-major\">G Major</SelectItem>\n                        <SelectItem value=\"D-dorian\">D Dorian</SelectItem>\n                        <SelectItem value=\"E-phrygian\">E Phrygian</SelectItem>\n                        <SelectItem value=\"F-lydian\">F Lydian</SelectItem>\n                        <SelectItem value=\"A-mixolydian\">A Mixolydian</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Direction</label>\n                    <Select value={scaleMode} onValueChange={setScaleMode}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"ascending\">Ascending</SelectItem>\n                        <SelectItem value=\"descending\">Descending</SelectItem>\n                        <SelectItem value=\"both\">Both Directions</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Tempo (BPM)</label>\n                    <Select value={tempo} onValueChange={setTempo}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"60\">60 BPM (Slow)</SelectItem>\n                        <SelectItem value=\"80\">80 BPM</SelectItem>\n                        <SelectItem value=\"100\">100 BPM</SelectItem>\n                        <SelectItem value=\"120\">120 BPM (Medium)</SelectItem>\n                        <SelectItem value=\"140\">140 BPM</SelectItem>\n                        <SelectItem value=\"160\">160 BPM (Fast)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Exercise Type</label>\n                    <Select value={exerciseType} onValueChange={setExerciseType}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"practice\">Practice Mode</SelectItem>\n                        <SelectItem value=\"quiz\">Scale Quiz</SelectItem>\n                        <SelectItem value=\"ear-training\">Ear Training</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card className=\"p-6\">\n                <CardContent className=\"p-0 space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full gap-2\">\n                    <Volume2 className=\"h-4 w-4\" />\n                    Play Scale\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full gap-2\">\n                    <Target className=\"h-4 w-4\" />\n                    Random Scale\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full gap-2\">\n                    <Music2 className=\"h-4 w-4\" />\n                    Practice Arpeggios\n                  </Button>\n                </CardContent>\n              </Card>\n\n              {/* Scale Theory */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg\">Scale Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-3 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Mode:</span> {currentScale.mode}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Pattern:</span> {\n                      selectedScale.includes('major') ? 'W-W-H-W-W-W-H' :\n                      selectedScale.includes('minor') ? 'W-H-W-W-H-W-W' :\n                      selectedScale.includes('pentatonic') ? 'W-W-W+H-W-W+H' :\n                      selectedScale.includes('blues') ? 'W+H-W-H-H-W+H-W' :\n                      'Various patterns'\n                    }\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Notes:</span> {currentScale.notes.join(' - ')}\n                  </div>\n                  <div className=\"pt-2\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {currentScale.notes.length} notes\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":14364},"client/src/pages/tools/TunerPage.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { StudentNavigation } from \"@/components/student/StudentNavigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Target, ArrowLeft, Mic, Volume2, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { getCurrentUser, isAuthenticated } from \"@/lib/auth\";\n\nexport default function TunerPage() {\n  const [currentUser] = useState(getCurrentUser());\n  const [, setLocation] = useLocation();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isAuthenticated()) {\n      setLocation('/');\n    }\n  }, [setLocation]);\n\n  const [isListening, setIsListening] = useState(false);\n  const [detectedNote, setDetectedNote] = useState(\"A\");\n  const [detectedOctave, setDetectedOctave] = useState(\"4\");\n  const [cents, setCents] = useState(0);\n  const [frequency, setFrequency] = useState(440.0);\n  const [targetNote, setTargetNote] = useState(\"A4\");\n  const [tuningMode, setTuningMode] = useState(\"chromatic\");\n  const [instrument, setInstrument] = useState(\"guitar\");\n\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const microphoneRef = useRef<MediaStreamAudioSourceNode | null>(null);\n\n  const noteFrequencies = {\n    'C': 261.63, 'C#': 277.18, 'D': 293.66, 'D#': 311.13,\n    'E': 329.63, 'F': 349.23, 'F#': 369.99, 'G': 392.00,\n    'G#': 415.30, 'A': 440.00, 'A#': 466.16, 'B': 493.88\n  };\n\n  const instrumentTunings = {\n    guitar: ['E2', 'A2', 'D3', 'G3', 'B3', 'E4'],\n    bass: ['E1', 'A1', 'D2', 'G2'],\n    violin: ['G3', 'D4', 'A4', 'E5'],\n    ukulele: ['G4', 'C4', 'E4', 'A4']\n  };\n\n  const startTuner = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n      analyserRef.current = audioContextRef.current.createAnalyser();\n      microphoneRef.current = audioContextRef.current.createMediaStreamSource(stream);\n      \n      microphoneRef.current.connect(analyserRef.current);\n      analyserRef.current.fftSize = 4096;\n      \n      setIsListening(true);\n      updatePitch();\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n    }\n  };\n\n  const stopTuner = () => {\n    if (microphoneRef.current) {\n      microphoneRef.current.disconnect();\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n    }\n    setIsListening(false);\n  };\n\n  const updatePitch = () => {\n    if (!analyserRef.current || !isListening) return;\n\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Float32Array(bufferLength);\n    analyserRef.current.getFloatFrequencyData(dataArray);\n\n    // Simplified pitch detection (in real implementation, use autocorrelation)\n    const detectedFreq = 440 + (Math.random() - 0.5) * 20; // Mock detection\n    setFrequency(detectedFreq);\n    \n    // Calculate closest note and cents deviation\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const A4 = 440;\n    const C0 = A4 * Math.pow(2, -4.75);\n    \n    const h = Math.round(12 * Math.log2(detectedFreq / C0));\n    const octave = Math.floor(h / 12);\n    const n = h % 12;\n    const noteName = noteNames[n];\n    \n    setDetectedNote(noteName);\n    setDetectedOctave(String(octave));\n    \n    // Calculate cents\n    const expectedFreq = C0 * Math.pow(2, h / 12);\n    const centDeviation = 1200 * Math.log2(detectedFreq / expectedFreq);\n    setCents(Math.round(centDeviation));\n\n    if (isListening) {\n      requestAnimationFrame(updatePitch);\n    }\n  };\n\n  const getTuningStatus = () => {\n    if (Math.abs(cents) < 5) return { status: 'perfect', color: 'text-green-500', bg: 'bg-green-100 dark:bg-green-900' };\n    if (Math.abs(cents) < 15) return { status: 'close', color: 'text-yellow-500', bg: 'bg-yellow-100 dark:bg-yellow-900' };\n    return { status: 'off', color: 'text-red-500', bg: 'bg-red-100 dark:bg-red-900' };\n  };\n\n  const tuningStatus = getTuningStatus();\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Sidebar Navigation */}\n      <div className=\"hidden lg:block w-64 flex-shrink-0\">\n        <div className=\"sticky top-0 h-screen\">\n          <StudentNavigation currentUser={currentUser} className=\"h-full\" />\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-center gap-4 mb-4\">\n              <Link href=\"/tools\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                  Back to Tools\n                </Button>\n              </Link>\n              <Badge variant=\"secondary\">Practice Essential</Badge>\n            </div>\n            <h1 className=\"text-3xl font-bold mb-2 flex items-center gap-3\">\n              <div className=\"p-3 bg-green-100 dark:bg-green-900 rounded-lg\">\n                <Target className=\"h-8 w-8 text-green-600 dark:text-green-400\" />\n              </div>\n              Chromatic Tuner\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Precise tuning for all instruments with real-time visual feedback and custom tunings\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Tuner Display */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"p-8\">\n                <div className=\"text-center mb-8\">\n                  {/* Note Display */}\n                  <div className={`rounded-2xl p-8 mb-6 ${tuningStatus.bg}`}>\n                    <div className={`text-6xl font-bold mb-2 ${tuningStatus.color}`}>\n                      {detectedNote}<sub className=\"text-3xl\">{detectedOctave}</sub>\n                    </div>\n                    <div className=\"text-lg text-muted-foreground mb-4\">\n                      {frequency.toFixed(1)} Hz\n                    </div>\n                    \n                    {/* Cents Indicator */}\n                    <div className=\"space-y-3\">\n                      <div className={`text-2xl font-semibold ${tuningStatus.color}`}>\n                        {cents > 0 ? '+' : ''}{cents} cents\n                      </div>\n                      \n                      {/* Visual Tuning Meter */}\n                      <div className=\"relative w-full max-w-md mx-auto\">\n                        <div className=\"h-6 bg-muted/30 rounded-full relative overflow-hidden\">\n                          <div className=\"absolute inset-0 flex items-center justify-center\">\n                            <div className=\"w-0.5 h-full bg-foreground/50\"></div>\n                          </div>\n                          <div \n                            className={`h-full rounded-full transition-all duration-200 ${\n                              Math.abs(cents) < 5 ? 'bg-green-500' :\n                              Math.abs(cents) < 15 ? 'bg-yellow-500' : 'bg-red-500'\n                            }`}\n                            style={{\n                              width: `${Math.min(Math.abs(cents) / 50 * 50, 50)}%`,\n                              marginLeft: cents < 0 ? 'auto' : '0',\n                              marginRight: cents < 0 ? '0' : 'auto'\n                            }}\n                          />\n                        </div>\n                        <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                          <span>-50¢</span>\n                          <span>0¢</span>\n                          <span>+50¢</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Tuning Status */}\n                    <div className=\"mt-4\">\n                      <Badge variant={tuningStatus.status === 'perfect' ? 'default' : 'secondary'} className=\"text-sm\">\n                        {tuningStatus.status === 'perfect' && 'Perfect Pitch!'}\n                        {tuningStatus.status === 'close' && 'Almost There'}\n                        {tuningStatus.status === 'off' && (cents > 0 ? 'Too High' : 'Too Low')}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  {/* Start/Stop Button */}\n                  <Button\n                    size=\"lg\"\n                    onClick={isListening ? stopTuner : startTuner}\n                    className=\"w-32 h-16 text-lg\"\n                    variant={isListening ? \"destructive\" : \"default\"}\n                  >\n                    <Mic className=\"h-6 w-6 mr-2\" />\n                    {isListening ? 'Stop' : 'Start'}\n                  </Button>\n                </div>\n              </Card>\n            </div>\n\n            {/* Settings & Instrument Tunings */}\n            <div className=\"space-y-6\">\n              {/* Settings */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                    <Settings className=\"h-5 w-5\" />\n                    Settings\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Tuning Mode</label>\n                    <Select value={tuningMode} onValueChange={setTuningMode}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"chromatic\">Chromatic</SelectItem>\n                        <SelectItem value=\"instrument\">Instrument Specific</SelectItem>\n                        <SelectItem value=\"custom\">Custom</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Instrument</label>\n                    <Select value={instrument} onValueChange={setInstrument}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"guitar\">Guitar</SelectItem>\n                        <SelectItem value=\"bass\">Bass Guitar</SelectItem>\n                        <SelectItem value=\"violin\">Violin</SelectItem>\n                        <SelectItem value=\"ukulele\">Ukulele</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <label className=\"text-sm font-medium mb-2 block\">Reference Pitch</label>\n                    <Select value=\"440\" onValueChange={() => {}}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"440\">A4 = 440 Hz</SelectItem>\n                        <SelectItem value=\"442\">A4 = 442 Hz</SelectItem>\n                        <SelectItem value=\"443\">A4 = 443 Hz</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Instrument Tuning Guide */}\n              <Card className=\"p-6\">\n                <CardHeader className=\"p-0 mb-4\">\n                  <CardTitle className=\"text-lg capitalize\">{instrument} Tuning</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-0 space-y-3\">\n                  {instrumentTunings[instrument as keyof typeof instrumentTunings].map((note, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                      <span className=\"font-medium\">String {index + 1}</span>\n                      <Badge variant=\"outline\" className=\"font-mono\">\n                        {note}\n                      </Badge>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card className=\"p-6\">\n                <CardContent className=\"p-0 space-y-3\">\n                  <Button variant=\"outline\" className=\"w-full gap-2\">\n                    <Volume2 className=\"h-4 w-4\" />\n                    Play Reference Tone\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full gap-2\">\n                    <Target className=\"h-4 w-4\" />\n                    Auto-Tune Mode\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13275}},"version":1}